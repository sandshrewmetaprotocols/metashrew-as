(module
 (type $0 (func (param i32) (result i32)))
 (type $1 (func (param i32 i32) (result i32)))
 (type $2 (func))
 (type $3 (func (param i32 i32 i32)))
 (type $4 (func (param i32 i32 i32 i32) (result i32)))
 (type $5 (func (param i32 i32)))
 (type $6 (func (param i32)))
 (type $7 (func (result i32)))
 (type $8 (func (param i32 i32 i32) (result i32)))
 (type $9 (func (param i32 i32 i32 i32)))
 (type $10 (func (param i32 i64 i32 i32)))
 (type $11 (func (param i32 i32 i32 i32 i32) (result i32)))
 (type $12 (func (param i32) (result i64)))
 (type $13 (func (param i32 i32 i64)))
 (type $14 (func (param i32 i32) (result i64)))
 (type $15 (func (param i64) (result i32)))
 (type $16 (func (param i64 i32) (result i32)))
 (type $17 (func (param i32 i64 i32)))
 (type $18 (func (param i32 i64)))
 (type $19 (func (param i32 i64) (result i64)))
 (type $20 (func (param i32) (result f64)))
 (import "env" "abort" (func $~lib/builtins/abort (param i32 i32 i32 i32)))
 (import "env" "__log" (func $assembly/utils/logging/__log (param i32)))
 (import "env" "__host_len" (func $assembly/indexer/index/__host_len (result i32)))
 (import "env" "__load_input" (func $assembly/indexer/index/__load_input (param i32)))
 (import "env" "__get_len" (func $assembly/indexer/index/__get_len (param i32) (result i32)))
 (import "env" "__get" (func $assembly/indexer/index/__get (param i32 i32)))
 (import "env" "__flush" (func $assembly/indexer/index/__flush (param i32)))
 (global $~lib/rt/stub/offset (mut i32) (i32.const 0))
 (global $assembly/indexer/index/_updates (mut i32) (i32.const 0))
 (global $assembly/indexer/index/_updateKeys (mut i32) (i32.const 0))
 (global $~argumentsLength (mut i32) (i32.const 0))
 (global $assembly/utils/b32/ONE (mut i32) (i32.const 0))
 (memory $0 1 32768)
 (data $0 (i32.const 1036) "\1c\02")
 (data $0.1 (i32.const 1048) "\04\00\00\00\00\02\00\00000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedfe0e1e2e3e4e5e6e7e8e9eaebecedeeeff0f1f2f3f4f5f6f7f8f9fafbfcfdfeff")
 (data $1 (i32.const 1580) "<")
 (data $1.1 (i32.const 1592) "\02\00\00\00(\00\00\00A\00l\00l\00o\00c\00a\00t\00i\00o\00n\00 \00t\00o\00o\00 \00l\00a\00r\00g\00e")
 (data $2 (i32.const 1644) "<")
 (data $2.1 (i32.const 1656) "\02\00\00\00\1e\00\00\00~\00l\00i\00b\00/\00r\00t\00/\00s\00t\00u\00b\00.\00t\00s")
 (data $3 (i32.const 1708) "\1c\02")
 (data $3.1 (i32.const 1720) "\04\00\00\00\00\02\00\00000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedfe0e1e2e3e4e5e6e7e8e9eaebecedeeeff0f1f2f3f4f5f6f7f8f9fafbfcfdfeff")
 (data $4 (i32.const 2252) "\1c\01")
 (data $4.1 (i32.const 2264) "\01\00\00\00\00\01\00\00\98/\8aB\91D7q\cf\fb\c0\b5\a5\db\b5\e9[\c2V9\f1\11\f1Y\a4\82?\92\d5^\1c\ab\98\aa\07\d8\01[\83\12\be\851$\c3}\0cUt]\ber\fe\b1\de\80\a7\06\dc\9bt\f1\9b\c1\c1i\9b\e4\86G\be\ef\c6\9d\c1\0f\cc\a1\0c$o,\e9-\aa\84tJ\dc\a9\b0\\\da\88\f9vRQ>\98m\c61\a8\c8\'\03\b0\c7\7fY\bf\f3\0b\e0\c6G\91\a7\d5Qc\ca\06g))\14\85\n\b7\'8!\1b.\fcm,M\13\r8STs\ne\bb\njv.\c9\c2\81\85,r\92\a1\e8\bf\a2Kf\1a\a8p\8bK\c2\a3Ql\c7\19\e8\92\d1$\06\99\d6\855\0e\f4p\a0j\10\16\c1\a4\19\08l7\1eLwH\'\b5\bc\b04\b3\0c\1c9J\aa\d8NO\ca\9c[\f3o.h\ee\82\8ftoc\a5x\14x\c8\84\08\02\c7\8c\fa\ff\be\90\eblP\a4\f7\a3\f9\be\f2xq\c6")
 (data $5 (i32.const 2540) ",")
 (data $5.1 (i32.const 2552) "\06\00\00\00\10\00\00\00\e0\08\00\00\e0\08\00\00\00\01\00\00@")
 (data $6 (i32.const 2588) ",")
 (data $6.1 (i32.const 2600) "\02\00\00\00\1c\00\00\00I\00n\00v\00a\00l\00i\00d\00 \00l\00e\00n\00g\00t\00h")
 (data $7 (i32.const 2636) "<")
 (data $7.1 (i32.const 2648) "\02\00\00\00&\00\00\00~\00l\00i\00b\00/\00a\00r\00r\00a\00y\00b\00u\00f\00f\00e\00r\00.\00t\00s")
 (data $8 (i32.const 2700) ",")
 (data $8.1 (i32.const 2712) "\02\00\00\00\14\00\00\00u\00s\00e\00 \00s\00t\00r\00i\00c\00t")
 (data $9 (i32.const 2748) "\1c")
 (data $9.1 (i32.const 2760) "\02\00\00\00\02\00\00\001")
 (data $10 (i32.const 2780) "<")
 (data $10.1 (i32.const 2792) "\02\00\00\00$\00\00\00U\00n\00p\00a\00i\00r\00e\00d\00 \00s\00u\00r\00r\00o\00g\00a\00t\00e")
 (data $11 (i32.const 2844) ",")
 (data $11.1 (i32.const 2856) "\02\00\00\00\1c\00\00\00~\00l\00i\00b\00/\00s\00t\00r\00i\00n\00g\00.\00t\00s")
 (data $12 (i32.const 2892) "\1c\01")
 (data $12.1 (i32.const 2904) "\04\00\00\00\00\01")
 (data $12.2 (i32.const 2960) "\0f\00\n\11\15\14\1a\1e\07\05")
 (data $12.3 (i32.const 3009) "\1d\00\18\r\19\t\08\17\00\12\16\1f\1b\13\00\01\00\03\10\0b\1c\0c\0e\06\04\02")
 (data $13 (i32.const 3180) "<")
 (data $13.1 (i32.const 3192) "\04\00\00\00 \00\00\00qpzry9x8gf2tvdw0s3jn54khce6mua7l")
 (data $14 (i32.const 3244) "L")
 (data $14.1 (i32.const 3256) "\04\00\00\00:\00\00\00123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz")
 (data $15 (i32.const 3324) "<")
 (data $15.1 (i32.const 3336) "\02\00\00\00$\00\00\00I\00n\00d\00e\00x\00 \00o\00u\00t\00 \00o\00f\00 \00r\00a\00n\00g\00e")
 (data $16 (i32.const 3388) "<")
 (data $16.1 (i32.const 3400) "\02\00\00\00&\00\00\00~\00l\00i\00b\00/\00s\00t\00a\00t\00i\00c\00a\00r\00r\00a\00y\00.\00t\00s")
 (data $17 (i32.const 3452) "<")
 (data $17.1 (i32.const 3464) "\02\00\00\00$\00\00\00~\00l\00i\00b\00/\00t\00y\00p\00e\00d\00a\00r\00r\00a\00y\00.\00t\00s")
 (data $18 (i32.const 3516) "L")
 (data $18.1 (i32.const 3528) "\02\00\00\000\00\00\00G\00o\00t\00 \00a\00r\00r\00a\00y\00b\00u\00f\00f\00e\00r\00 \00o\00f\00 \00s\00i\00z\00e\00 ")
 (data $19 (i32.const 3596) "|")
 (data $19.1 (i32.const 3608) "\02\00\00\00d\00\00\00t\00o\00S\00t\00r\00i\00n\00g\00(\00)\00 \00r\00a\00d\00i\00x\00 \00a\00r\00g\00u\00m\00e\00n\00t\00 \00m\00u\00s\00t\00 \00b\00e\00 \00b\00e\00t\00w\00e\00e\00n\00 \002\00 \00a\00n\00d\00 \003\006")
 (data $20 (i32.const 3724) "<")
 (data $20.1 (i32.const 3736) "\02\00\00\00&\00\00\00~\00l\00i\00b\00/\00u\00t\00i\00l\00/\00n\00u\00m\00b\00e\00r\00.\00t\00s")
 (data $21 (i32.const 3788) "\1c")
 (data $21.1 (i32.const 3800) "\02\00\00\00\02\00\00\000")
 (data $22 (i32.const
 (data $23 (i32.const 4220) "\1c\04")
 (data $23.1 (i32.const 4232) "\02\00\00\00\00\04\00\000\000\000\001\000\002\000\003\000\004\000\005\000\006\000\007\000\008\000\009\000\00a\000\00b\000\00c\000\00d\000\00e\000\00f\001\000\001\001\001\002\001\003\001\004\001\005\001\006\001\007\001\008\001\009\001\00a\001\00b\001\00c\001\00d\001\00e\001\00f\002\000\002\001\002\002\002\003\002\004\002\005\002\006\002\007\002\008\002\009\002\00a\002\00b\002\00c\002\00d\002\00e\002\00f\003\000\003\001\003\002\003\003\003\004\003\005\003\006\003\007\003\008\003\009\003\00a\003\00b\003\00c\003\00d\003\00e\003\00f\004\000\004\001\004\002\004\003\004\004\004\005\004\006\004\007\004\008\004\009\004\00a\004\00b\004\00c\004\00d\004\00e\004\00f\005\000\005\001\005\002\005\003\005\004\005\005\005\006\005\007\005\008\005\009\005\00a\005\00b\005\00c\005\00d\005\00e\005\00f\006\000\006\001\006\002\006\003\006\004\006\005\006\006\006\007\006\008\006\009\006\00a\006\00b\006\00c\006\00d\006\00e\006\00f\007\000\007\001\007\002\007\003\007\004\007\005\007\006\007\007\007\008\007\009\007\00a\007\00b\007\00c\007\00d\007\00e\007\00f\008\000\008\001\008\002\008\003\008\004\008\005\008\006\008\007\008\008\008\009\008\00a\008\00b\008\00c\008\00d\008\00e\008\00f\009\000\009\001\009\002\009\003\009\004\009\005\009\006\009\007\009\008\009\009\009\00a\009\00b\009\00c\009\00d\009\00e\009\00f\00a\000\00a\001\00a\002\00a\003\00a\004\00a\005\00a\006\00a\007\00a\008\00a\009\00a\00a\00a\00b\00a\00c\00a\00d\00a\00e\00a\00f\00b\000\00b\001\00b\002\00b\003\00b\004\00b\005\00b\006\00b\007\00b\008\00b\009\00b\00a\00b\00b\00b\00c\00b\00d\00b\00e\00b\00f\00c\000\00c\001\00c\002\00c\003\00c\004\00c\005\00c\006\00c\007\00c\008\00c\009\00c\00a\00c\00b\00c\00c\00c\00d\00c\00e\00c\00f\00d\000\00d\001\00d\002\00d\003\00d\004\00d\005\00d\006\00d\007\00d\008\00d\009\00d\00a\00d\00b\00d\00c\00d\00d\00d\00e\00d\00f\00e\000\00e\001\00e\002\00e\003\00e\004\00e\005\00e\006\00e\007\00e\008\00e\009\00e\00a\00e\00b\00e\00c\00e\00d\00e\00e\00e\00f\00f\000\00f\001\00f\002\00f\003\00f\004\00f\005\00f\006\00f\007\00f\008\00f\009\00f\00a\00f\00b\00f\00c\00f\00d\00f\00e\00f\00f")
 (data $24 (i32.const 5276) "\\")
 (data $24.1 (i32.const 5288) "\02\00\00\00H\00\00\000\001\002\003\004\005\006\007\008\009\00a\00b\00c\00d\00e\00f\00g\00h\00i\00j\00k\00l\00m\00n\00o\00p\00q\00r\00s\00t\00u\00v\00w\00x\00y\00z")
 (data $25 (i32.const 5372) "\1c")
 (data $25.1 (i32.const 5384) "\02")
 (data $26 (i32.const 5404) "\1c")
 (data $26.1 (i32.const 5416) "\02\00\00\00\n\00\00\00b\00y\00t\00e\00[")
 (data $27 (i32.const 5436) "\1c")
 (data $27.1 (i32.const 5448) "\02\00\00\00\0c\00\00\00]\00 \00=\00 \000\00x")
 (data $28 (i32.const 5468) "\1c")
 (data $28.1 (i32.const 5480) "\02\00\00\00\04\00\00\00 \00(")
 (data $29 (i32.const 5500) "\1c")
 (data $29.1 (i32.const 5512) "\02\00\00\00\02\00\00\00)")
 (data $30 (i32.const 5532) ",\00\00\00\03\00\00\00\00\00\00\00\0b\00\00\00\1c\00\00\000\15\00\00\00\00\00\00P\15\00\00\00\00\00\00p\15\00\00\00\00\00\00\90\15")
 (data $31 (i32.const 5580) "\1c")
 (data $31.1 (i32.const 5592) "\0c\00\00\00\08\00\00\00\01")
 (data $32 (i32.const 5612) "|")
 (data $32.1 (i32.const 5624) "\02\00\00\00^\00\00\00S\00H\00A\002\005\006\00:\00 \00c\00a\00n\00\'\00t\00 \00u\00p\00d\00a\00t\00e\00 \00b\00e\00c\00a\00u\00s\00e\00 \00h\00a\00s\00h\00 \00w\00a\00s\00 \00f\00i\00n\00i\00s\00h\00e\00d\00.")
 (data $33 (i32.const 5740) "\\")
 (data $33.1 (i32.const 5752) "\02\00\00\00L\00\00\00~\00l\00i\00b\00/\00f\00a\00s\00t\00-\00s\00h\00a\002\005\006\00-\00a\00s\00/\00a\00s\00s\00e\00m\00b\00l\00y\00/\00s\00h\00a\002\005\006\00.\00t\00s")
 (data $34 (i32.const 5836) ",")
 (data $34.1 (i32.const 5848) "\02\00\00\00\1a\00\00\00~\00l\00i\00b\00/\00a\00r\00r\00a\00y\00.\00t\00s")
 (data $35 (i32.const 5884) "<")
 (data $35.1 (i32.const 5896) "\02\00\00\00*\00\00\00a\00s\00s\00e\00m\00b\00l\00y\00/\00u\00t\00i\00l\00s\00/\00b\003\002\00.\00t\00s")
 (data $36 (i32.const 5948) "\1c")
 (data $36.1 (i32.const 5960) "\02\00\00\00\04\00\00\00b\00c")
 (data $37 (i32.const 5980) "<")
 (data $37.1 (i32.const 5992) "\02\00\00\00(\00\00\00E\00x\00c\00e\00e\00d\00s\00 \00l\00e\00n\00g\00t\00h\00 \00l\00i\00m\00i\00t")
 (data $38 (i32.const 6044) ",")
 (data $38.1 (i32.const 6056) "\02\00\00\00\1c\00\00\00N\00o\00n\00 \005\00-\00b\00i\00t\00 \00w\00o\00r\00d")
 (data $39 (i32.const 6093) "\01\02\03\04\05\06\07\08\t\n\0b\0c\r\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#$%&\'()*+,-./0123456789:;<=>?@abcdefghijklmnopqrstuvwxyz[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\7f")
 (data $40 (i32.const 6220) "\12\10\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f
 (data $40.1 (i32.const 6764) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\00\00\00\80@\00\04\00\00\00@\01\00\00\00\00\00\00\00\00\a1\90\01")
 (data $40.2 (i32.const 6850) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff0\04\b0")
 (data $40.3 (i32.const 6908) "\f8\03")
 (data $40.4 (i32.const 6935) "\82\00\00\00\00\00\00\fe\ff\ff\ff\ff\bf\b6\00\00\00\00\00\10\00?\00\ff\17\00\00\00\00\01\f8\ff\ff\00\00\01")
 (data $40.5 (i32.const 6982) "\c0\bf\ff=\00\00\00\80\02\00\00\00\ff\ff\ff\07")
 (data $40.6 (i32.const 7008) "\c0\ff\01\00\00\00\00\00\00\f8?$\00\00\c0\ff\ff?\00\00\00\00\00\0e")
 (data $40.7 (i32.const 7046) "\f8\ff\ff\ff\ff\ff\07\00\00\00\00\00\00\14\fe!\fe\00\0c\00\02\00\02\00\00\00\00\00\00\10\1e \00\00\0c\00\00@\06\00\00\00\00\00\00\10\869\02\00\00\00#\00\06\00\00\00\00\00\00\10\be!\00\00\0c\00\00\fc\02\00\00\00\00\00\00\90\1e `\00\0c\00\00\00\04\00\00\00\00\00\00\00\01 \00\00\00\00\00\00\11\00\00\00\00\00\00\c0\c1=`\00\0c\00\00\00\02\00\00\00\00\00\00\90@0\00\00\0c\00\00\00\03\00\00\00\00\00\00\18\1e \00\00\0c\00\00\00\02\00\00\00\00\00\00\00\00\04\\")
 (data $40.8 (i32.const 7218) "\f2\07\c0\7f")
 (data $40.9 (i32.const 7234) "\f2\1f@?")
 (data $40.10 (i32.const 7247) "\03\00\00\a0\02\00\00\00\00\00\00\fe\7f\df\e0\ff\fe\ff\ff\ff\1f@")
 (data $40.11 (i32.const 7281) "\e0\fdf\00\00\00\c3\01\00\1e\00d \00 ")
 (data $40.12 (i32.const 7307) "\10")
 (data $40.13 (i32.const 7319) "\e0")
 (data $40.14 (i32.const 7342) "\1c\00\00\00\1c\00\00\00\0c\00\00\00\0c\00\00\00\00\00\00\00\b0?@\fe\8f \00\00\00\00\00x\00\00\00\00\00\00\08\00\00\00\00\00\00\00`\00\00\00\00\02")
 (data $40.15 (i32.const 7408) "\87\01\04\0e")
 (data $40.16 (i32.const 7438) "\80\t\00\00\00\00\00\00@\7f\e5\1f\f8\9f\00\00\00\00\80\00\ff\ff\01\00\00\00\00\00\00\00\0f\00\00\00\00\00\d0\17\04\00\00\00\00\f8\0f\00\03\00\00\00<;\00\00\00\00\00\00@\a3\03\00\00\00\00\00\00\f0\cf\00\00\00\00\00\00\00\00?")
 (data $40.17 (i32.const 7526) "\f7\ff\fd!\10\03\00\00\00\00\00\f0\ff\ff\ff\ff\ff\ff\ff\07\00\01\00\00\00\f8\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\fb")
 (data $40.18 (i32.const 7587) "\a0\03\e0\00\e0\00\e0\00`\00\f8\00\03\90|\00\00\00\00\00\00\df\ff\02\80\00\00\ff\1f\00\00\00\00\00\00\ff\ff\ff\ff\01")
 (data $40.19 (i32.const 7643) "0")
 (data $40.20 (i32.const 7657) "\80\03")
 (data $40.21 (i32.const 7673) "\80\00\80")
 (data $40.22 (i32.const 7688) "\ff\ff\ff\ff\00\00\00\00\00\80")
 (data $40.23 (i32.const 7724) " \00\00\00\00<>\08")
 (data $40.24 (i32.const 7743) "~")
 (data $40.25 (i32.const 7755) "p\00\00 ")
 (data $40.26 (i32.const 7819) "?\00\10")
 (data $40.27 (i32.const 7833) "\80\f7\bf\00\00\00\f0")
 (data $40.28 (i32.const 7850) "\03\00\ff\ff\ff\ff\03")
 (data $40.29 (i32.const 7866) "\01\00\00\07")
 (data $40.30 (i32.const 7883) "\03D\08\00\00`\10")
 (data $40.31 (i32.const 7908) "0\00\00\00\ff\ff\03\80\00\00\00\00\c0?\00\00\80\ff\03\00\00\00\00\00\07\00\00\00\00\00\c83\00\80\00\00`\00\00\00\00\00\00\00\00~f\00\08\10\00\00\00\00\01\10\00\00\00\00\00\00\9d\c1\02\00\00 \000X")
 (data $40.32 (i32.const 7991) "\f8\00\0e")
 (data $40.33 (i32.const 8008) " !\00\00\00\00\00@")
 (data $40.34 (i32.const 8034) "\fc\ff\03\00\00\00\00\00\00\00\ff\ff\08\00\ff\ff\00\00\00\00$")
 (data $40.35 (i32.const 8075) "\80\80@\00\04\00\00\00@\01\00\00\00\00\00\01\00\00\00\00\c0\00\00\00\00\00\00\00\00\08\00\00\0e")
 (data $40.36 (i32.const 8139) " ")
 (data $40.37 (i32.const 8168) "\01")
 (data $40.38 (i32.const 8186) "\c0\07")
 (data $40.39 (i32.const 8204) "n\f0\00\00\00\00\00\87")
 (data $40.40 (i32.const 8232) "`\00\00\00\00\00\00\00\f0")
 (data $40.41 (i32.const 8289) "\18")
 (data $40.42 (i32.const 8308) "\c0\ff\01")
 (data $40.43 (i32.const 8332) "\02\00\00\00\00\00\00\ff\7f\00\00\00\00\00\00\80\03\00\00\00\00\00x&\00 \00\00\00\00\00\00\07\00\00\00\80\ef\1f\00\00\00\00\00\00\00\08\00\03\00\00\00\00\00\c0\7f\00\9e")
 (data $40.44 (i32.const 8401) "\80\d3@")
 (data $40.45 (i32.const 8423) "\80\f8\07\00\00\03\00\00\00\00\00\00\18\01\00\00\00\c0\1f\1f")
 (data $40.46 (i32.const 8467) "\ff\\\00\00@")
 (data $40.47 (i32.const 8482) "\f8\85\r")
 (data $40.48 (i32.const 8514) "<\b0\01\00\000")
 (data $40.49 (i32.const 8530) "\f8\a7\01")
 (data $40.50 (i32.const 8545) "(\bf")
 (data $40.51 (i32.const 8559) "\e0\bc\0f")
 (data $40.52 (i32.const 8593) "\80\ff\06")
 (data $40.53 (i32.const 8627) "X\08")
 (data $40.54 (i32.const 8646) "\f0\0c\01\00\00\00\fe\07\00\00\00\00\f8y\80\00~\0e\00\00\00\00\00\fc\7f\03")
 (data $40.55 (i32.const 8690) "\7f\bf")
 (data $40.56 (i32.const 8702) "\fc\ff\ff\fcm")
 (data $40.57 (i32.const 8722) "~\b4\bf")
 (data $40.58 (i32.const 8734) "\a3")
 (data $40.59 (i32.const 8778) "\18\00\00\00\00\00\00\00\ff\01")
 (data $40.60 (i32.const 8842) "\1f\00\00\00\00\00\00\00\7f\00\0f")
 (data $40.61 (i32.const 8885) "\80\00\00\00\00\00\00\00\80\ff\ff\00\00\00\00\00\00\00\00\1b")
 (data $40.62 (i32.const 8927) "`\0f")
 (data $40.63 (i32.const 8952) "\80\03\f8\ff\e7\0f\00\00\00<")
 (data $40.64 (i32.const 8980) "\1c")
 (data $40.65 (i32.const 9004) "\ff\ff\ff\ff\ff\ff\7f\f8\ff\ff\ff\ff\ff\1f \00\10\00\00\f8\fe\ff")
 (data $40.66 (i32.const 9036) "\7f\ff\ff\f9\db\07")
 (data $40.67 (i32.const 9074) "\ff?")
 (data $40.68 (i32.const 9129) "\f0")
 (data $40.69 (i32.const 9158) "\7f")
 (data $40.70 (i32.const 9172) "\f0\0f")
 (data $40.71 (i32.const 9227) "\f8")
 (data $41 (i32.const 9228) "\12\13\14\15\16\17\10\10\10\10\10\10\10\10\10\10\18\10\10\19\10\10\10\10\10\10\10\10\1a\1b\11\1c\1d\1e\10\10\1f
 (data $41.1 (i32.const 9772) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\00\00\00\00\00\00\00\fe\ff\ff\07\fe\ff\ff\07\00\00\00\00\00\04 \04\ff\ff\7f\ff\ff\ff\7f\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\f7\f0\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ef\ff\ff\ff\ff\01\03\00\00\00\1f")
 (data $41.2 (i32.const 9908) " \00\00\00\00\00\cf\bc@\d7\ff\ff\fb\ff\ff\ff\ff\ff\ff\ff\ff\ff\bf\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\03\fc\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\fe\ff\ff\ff\7f\00\ff\ff\ff\ff\ff\01")
 (data $41.3 (i32.const 10016) "\ff\ff\ff\ff\bf \ff\ff\ff\ff\ff\e7")
 (data $41.4 (i32.const 10048) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff??")
 (data $41.5 (i32.const 10076) "\ff\01\ff\ff\ff\ff\ff\e7\00\00\00\00\00\00\00\00\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\00\00\00\00\00\00\00\ff\ff??\ff\ff\ff\ff??\ff\aa\ff\ff\ff?\ff\ff\ff\ff\ff\ff\df_\dc\1f\cf\0f\ff\1f\dc\1f")
 (data $41.6 (i32.const 10170) "\02\80\00\00\ff\1f")
 (data $41.7 (i32.const 10188) "\84\fc/>P\bd\1f\f2\e0C\00\00\ff\ff\ff\ff\18")
 (data $41.8 (i32.const 10242) "\c0\ff\ff\ff\ff\ff\ff\03\00\00\ff\ff\ff\ff\ff\7f\ff\ff\ff\ff\ff\7f\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\1fx\0c\00\ff\ff\ff\ff\bf ")
 (data $41.9 (i32.const 10324) "\ff\ff\ff\ff\ff?\00\00\ff\ff\ff?")
 (data $41.10 (i32.const 10352) "\fc\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ffx\ff\ff\ff\ff\ff\ff\fc\07\00\00\00\00`\07\00\00\00\00\00\00\ff\ff\ff\ff\ff\f7\ff\01\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\00\00\00\00\00\00\00\7f\00\f8")
 (data $41.11 (i32.const 10448) "\fe\ff\ff\07\fe\ff\ff\07")
 (data $41.12 (i32.const 10476) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
 (data $41.13 (i32.const 10498) "\ff\ff\ff\ff\0f\ff\ff\ff\ff\0f")
 (data $41.14 (i32.const 10524) "\ff\ff\ff\ff\ff\ff\07\00\ff\ff\ff\ff\ff\ff\07")
 (data $41.15 (i32.const 10560) "\ff\ff\ff\ff\ff\ff\ff\ff")
 (data $41.16 (i32.const 10580) "\ff\ff\ff\ff\ff\ff\ff\ff")
 (data $41.17 (i32.const 10604) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\df\ff\ff\ff\ff\ff\ff\ff\ff\dfd\de\ff\eb\ef\ff\ff\ff\ff\ff\ff\ff\bf\e7\df\df\ff\ff\ff{_\fc\fd\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff?\ff\ff\ff\fd\ff\ff\f7\ff\ff\ff\f7\ff\ff\df\ff\ff\ff\df\ff\ff\7f\ff\ff\ff\7f\ff\ff\ff\fd\ff\ff\ff\fd\ff\ff\f7\0f\00\00\00\00\00\00\ff\ff\ff\ff\ff\ff\ff\ff\0f")
 (data $41.18 (i32.const 10770) "\ff\ff\ff\03\ff\ff\ff\03\ff\ff\ff\03")
 (data $42 (i32.const 10796) "\07\08\t\n\0b\0c\06\06\06\06\06\06\06\06\06\06\r\06\06\0e\06\06\06\06\06\06\06\06\0fa\06\06\06\06\06\06\06\1b\06\06\06\06\06\06\06\06\06\06\06\1c\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\1d\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\1e\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06")
 (data $42.1 (i32.const 11419) "$++++++++\01\00TVVVVVVVV")
 (data $42.2 (i32.const 11458) "\18\00\00\00+++++++\07++[VVVVVVVJVV\051P1P1P1P1P1P1P1P$Py1P1P18P1P1P1P1P1P1P1PN1\02N\r\rN\03N\00$n\00N1&nQN$PN9\14\81\1b\1d\1dS1P1P\r1P1P1P\1bS$P1\02\\{\\{\\{\\{\\{\14y\\{\\{\\-+I\03H\03x\\{\14\00\96\n\01+(\06\06\00*\06**+\07\bb\b5+\1e\00+\07+++\01++++++++++++++++++++++++++++++++\01+++++++++++++++++++++++*+++++++++++++\cdF\cd+\00%+\07\01\06\01UVVVVVUVV\02$\81\81\81\81\81\15\81\81\81\00\00+\00\b2\d1\b2\d1\b2\d1\b2\d1\00\00\cd\cc\01\00\d7\d7\d7\d7\d7\83\81\81\81\81\81\81\81\81\81\81\ac\ac\ac\ac\ac\ac\ac\ac\ac\ac\1c\00\00\00\00\001P1P1P1P1P1\02\00\001P1P1P1P1P1P1P1P1PN1P1PN1P1P1P1P1P1P1P1\02\87\a6\87\a6\87\a6\87\a6\87\a6\87\a6\87\a6\87\a6*++++++++++++\00\00\00TVVVVVVVVVVVV")
 (data $42.3 (i32.const 11967) "TVVVVVVVVVVVV\0c\00\0c*+++++++++++++\07*\01")
 (data $42.4 (i32.const 12053) "*++++++++++++++++++++++++++VVl\81\15\00++++++++++++++++++++++++++++++++++++++++++\07l\03A++VVVVVVVVVVVVVV,V+++++++++++++++++++++\01")
 (data $42.5 (i32.const 12212) "\0cl\00\00\00\00\00\06")
 (data $42.6 (i32.const 12258) "\06%\06%\06%\06%\06%\06%\06%\06%\06%\06%\06%\06%\06%\06%\06%\06%\06%\06%\06%\06%\06%\06%\06%\06%\06%Vz\9e&\06%\06%\06%\06%\06%\06%\06%\06%\06%\06%\06%\06%\06%\06%\06%\06\01++OVV,+\7fVV9++UVV++OVV,+\7fVV\817u[{\\++OVV\02\ac\04\00\009++UVV++OVV,++VV2\13\81W\00o\81~\c9\d7~-\81\81\0e~9\7foW\00\81\81~\15\00~\03++++++++++++\07+$+\97+++++++++*+++++VVVVV\80\81\81\81\819\bb*++++++++++++++++++++++++++++++++++++++++\01\81\81\81\81\81\81\81\81\81\81\81\81\81\81\81\c9\ac\ac\ac\ac\ac\ac\ac\ac\ac\ac\ac\ac\ac\ac\ac\d0\r\00N1\02\b4\c1\c1\d7\d7$P1P1P1P1P1P1P1P1P1P1P1P1P1P1P1P1P\d7\d7S\c1G\d4\d7\d7\d7\05++++++++++++\07\01\00\01")
 (data $42.7 (i32.const 12709) "N1P1P1P1P1P1P1P\r\00\00\00\00\00$P1P1P1P1P")
 (data $42.8 (i32.const 12774) "+++++++++++y\\{\\{O{\\{\\{\\{\\{\\{\\{\\{\\{\\{\\-++y\14\\{\\-y*\\\'\\{\\{\\{\a4\00\n\b4\\{\\{O\03x8+++++++++++++O-++\01")
 (data $42.9 (i32.const 12887) "H")
 (data $42.10 (i32.const 12897) "*++++++++++++++++++++++++++")
 (data $42.11 (i32.const 12957) "++++++++\07\00HVVVVVVVV\02")
 (data $42.12 (i32.const 13032) "+++++++++++++UVVVVVVVVVVVV\0e")
 (data $42.13 (i32.const 13090) "$+++++++++++\07\00VVVVVVVVVVVV")
 (data $42.14 (i32.const 13160) "$++++++++++++++++\07\00\00\00\00VVVVVVVVVVVVVVVVV")
 (data $42.15 (i32.const 13257) "*++++++++++VVVVVVVVVV\0e")
 (data $42.16 (i32.const 13311) "*++++++++++VVVVVVVVVV\0e")
 (data $42.17 (i32.const 13376) "+++++++++++UVVVVVVVVVV\0e")
 (data $43 (i32.const 13465) "\08\00\00V\01\00\009")
 (data $44 (i32.const 13480) "\01 \00\00\00\e0\ff\ff\00\bf\1d\00\00\e7\02\00\00y\00\00\02$\00\00\01\01\00\00\00\ff\ff\ff\00\00\00\00\01\02\00\00\00\fe\ff\ff\019\ff\ff\00\18\ff\ff\01\87\ff\ff\00\d4\fe\ff\00\c3\00\00\01\d2\00\00\01\ce\00\00\01\cd\00\00\01O\00\00\01\ca\00\00\01\cb\00\00\01\cf\00\00\00a\00\00\01\d3\00\00\01\d1\00\00\00\a3\00\00\01\d5\00\00\00\82\00\00\01\d6\00\00\01\da\00\00\01\d9\00\00\01\db\00\00\008\00\00\03\00\00\00\00\b1\ff\ff\01\9f\ff\ff\01\c8\ff\ff\02($\00\00\00\00\00\01\01\00\00\00\ff\ff\ff\003\ff\ff\00&\ff\ff\01~\ff\ff\01+*\00\01]\ff\ff\01(*\00\00?*\00\01=\ff\ff\01E\00\00\01G\00\00\00\1f*\00\00\1c*\00\00\1e*\00\00.\ff\ff\002\ff\ff\006\ff\ff\005\ff\ff\00O\a5\00\00K\a5\00\001\ff\ff\00(\a5\00\00D\a5\00\00/\ff\ff\00-\ff\ff\00\f7)\00\00A\a5\00\00\fd)\00\00+\ff\ff\00*\ff\ff\00\e7)\00\00C\a5\00\00*\a5\00\00\bb\ff\ff\00\'\ff\ff\00\b9\ff\ff\00%\ff\ff\00\15\a5\00\00\12\a5\00\02$L\00\00\00\00\00\01 \00\00\00\e0\ff\ff\01\01\00\00\00\ff\ff\ff\00T\00\00\01t\00\00\01&\00\00\01%\00\00\01@\00\00\01?\00\00\00\da\ff\ff\00\db\ff\ff\00\e1\ff\ff\00\c0\ff\ff\00\c1\ff\ff\01\08\00\00\00\c2\ff\ff\00\c7\ff\ff\00\d1\ff\ff\00\ca\ff\ff\00\f8\ff\ff\00\aa\ff\ff\00\b0\ff\ff\00\07\00\00\00\8c\ff\ff\01\c4\ff\ff\00\a0\ff\ff\01\f9\ff\ff\02\1ap\00\01\01\00\00\00\ff\ff\ff\01 \00\00\00\e0\ff\ff\01P\00\00\01\0f\00\00\00\f1\ff\ff\00\00\00\00\010\00\00\00\d0\ff\ff\01\01\00\00\00\ff\ff\ff\00\00\00\00\00\c0\0b\00\01`\1c\00\00\00\00\00\01\d0\97\00\01\08\00\00\00\f8\ff\ff\02\05\8a\00\00\00\00\00\01@\f4\ff\00\9e\e7\ff\00\c2\89\00\00\db\e7\ff\00\92\e7\ff\00\93\e7\ff\00\9c\e7\ff\00\9d\e7\ff\00\a4\e7\ff\00\00\00\00\008\8a\00\00\04\8a\00\00\e6\0e\00\01\01\00\00\00\ff\ff\ff\00\00\00\00\00\c5\ff\ff\01A\e2\ff\02\1d\8f\00\00\08\00\00\01\f8\ff\ff\00\00\00\00\00V\00\00\01\aa\ff\ff\00J\00\00\00d\00\00\00\80\00\00\00p\00\00\00~\00\00\00\t\00\00\01\b6\ff\ff\01\f7\ff\ff\00\db\e3\ff\01\9c\ff\ff\01\90\ff\ff\01\80\ff\ff\01\82\ff\ff\02\05\ac\00\00\00\00\00\01\10\00\00\00\f0\ff\ff\01\1c\00\00\01\01\00\00\01\a3\e2\ff\01A\df\ff\01\ba\df\ff\00\e4\ff\ff\02\0b\b1\00\01\01\00\00\00\ff\ff\ff\010\00\00\00\d0\ff\ff\00\00\00\00\01\t\d6\ff\01\1a\f1\ff\01\19\d6\ff\00\d5\d5\ff\00\d8\d5\ff\01\e4\d5\ff\01\03\d6\ff\01\e1\d5\ff\01\e2\d5\ff\01\c1\d5\ff\00\00\00\00\00\a0\e3\ff\00\00\00\00\01\01\00\00\00\ff\ff\ff\02\0c\bc\00\00\00\00\00\01\01\00\00\00\ff\ff\ff\01\bcZ\ff\01\a0\03\00\01\fcu\ff\01\d8Z\ff\000\00\00\01\b1Z\ff\01\b5Z\ff\01\bfZ\ff\01\eeZ\ff\01\d6Z\ff\01\ebZ\ff\01\d0\ff\ff\01\bdZ\ff\01\c8u\ff\00\00\00\00\000h\ff\00`\fc\ff\00\00\00\00\01 \00\00\00\e0\ff\ff\00\00\00\00\01(\00\00\00\d8\ff\ff\00\00\00\00\01@\00\00\00\c0\ff\ff\00\00\00\00\01 \00\00\00\e0\ff\ff\00\00\00\00\01 \00\00\00\e0\ff\ff\00\00\00\00\01\"\00\00\00\de\ff\ff")
 (data $45 (i32.const 14437) "\06\'Qow")
 (data $45.1 (i32.const 14452) "|\00\00\7f\00\00\00\00\00\00\00\00\83\8e\92\97\00\aa")
 (data $45.2 (i32.const 14480) "\b4\c4")
 (data $45.3 (i32.const 14602) "\c6\c9\00\00\00\db")
 (data $45.4 (i32.const 14691) "\de\00\00\00\00\e1\00\00\00\00\00\00\00\e4")
 (data $45.5 (i32.const 14716) "\e7")
 (data $45.6 (i32.const 14802) "\ea")
 (data $45.7 (i32.const 14925) "\ed")
 (data $46 (i32.const 14948) "0\0c1\rx\0e\7f\0f\80\10\81\11\86\12\89\13\8a\13\8e\14\8f\15\90\16\93\13\94\17\95\18\96\19\97\1a\9a\1b\9c\19\9d\1c\9e\1d\9f\1e\a6\1f\a9\1f\ae\1f\b1 \b2 \b7!\bf\"\c5#\c8#\cb#\dd$\f2#\f6%\f7& -:.=/>0?1@1C2D3E4P5Q6R7S8T9Y:[;\\<a=c>e?f@hAiBj@kClDoBqErFuG}H\82I\87J\89K\8aL\8bL\8cM\92N\9dO\9ePEW{\1d|\1d}\1d\7fX\86Y\88Z\89Z\8aZ\8c[\8e\\\8f\\\ac]\ad^\ae^\af^\c2_\cc`\cda\cea\cfb\d0c\d1d\d5e\d6f\d7g\f0h\f1i\f2j\f3k\f4l\f5m\f9n\fd-\fe-\ff-PiQiRiSiTiUiViWiXiYiZi[i\\i]i^i_i\82\00\83\00\84\00\85\00\86\00\87\00\88\00\89\00\c0u\cfv\80\89\81\8a\82\8b\85\8c\86\8dp\9dq\9dv\9ew\9ex\9fy\9fz\a0{\a0|\a1}\a1\b3\a2\ba\a3\bb\a3\bc\a4\be\a5\c3\a2\cc\a4\da\a6\db\a6\e5j\ea\a7\eb\a7\ecn\f3\a2\f8\a8\f9\a8\fa\a9\fb\a9\fc\a4&\b0*\b1+\b2N\b3\84\08b\bac\bbd\bce\bdf\bem\bfn\c0o\c1p\c2~\c3\7f\c3}\cf\8d\d0\94\d1\ab\d2\ac\d3\ad\d4\b0\d5\b1\d6\b2\d7\c4\d8\c5\d9\c6\da")
 (data $47 (i32.const 15356) "L\03")
 (data $47.1 (i32.const 15368) "\12\00\00\000\03\00\00\df\00S\00S\00\00\00I\01\bc\02N\00\00\00\f0\01J\00\0c\03\00\00\90\03\99\03\08\03\01\03\b0\03\a5\03\08\03\01\03\87\055\05R\05\00\00\96\1eH\001\03\00\00\97\1eT\00\08\03\00\00\98\1eW\00\n\03\00\00\99\1eY\00\n\03\00\00\9a\1eA\00\be\02\00\00P\1f\a5\03\13\03\00\00R\1f\a5\03\13\03\00\03T\1f\a5\03\13\03\01\03V\1f\a5\03\13\03B\03\80\1f\08\1f\99\03\00\00\81\1f\t\1f\99\03\00\00\82\1f\n\1f\99\03\00\00\83\1f\0b\1f\99\03\00\00\84\1f\0c\1f\99\03\00\00\85\1f\r\1f\99\03\00\00\86\1f\0e\1f\99\03\00\00\87\1f\0f\1f\99\03\00\00\88\1f\08\1f\99\03\00\00\89\1f\t\1f\99\03\00\00\8a\1f\n\1f\99\03\00\00\8b\1f\0b\1f\99\03\00\00\8c\1f\0c\1f\99\03\00\00\8d\1f\r\1f\99\03\00\00\8e\1f\0e\1f\99\03\00\00\8f\1f\0f\1f\99\03\00\00\90\1f(\1f\99\03\00\00\91\1f)\1f\99\03\00\00\92\1f*\1f\99\03\00\00\93\1f+\1f\99\03\00\00\94\1f,\1f\99\03\00\00\95\1f-\1f\99\03\00\00\96\1f.\1f\99\03\00\00\97\1f/\1f\99\03\00\00\98\1f(\1f\99\03\00\00\99\1f)\1f\99\03\00\00\9a\1f*\1f\99\03\00\00\9b\1f+\1f\99\03\00\00\9c\1f,\1f\99\03\00\00\9d\1f-\1f\99\03\00\00\9e\1f.\1f\99\03\00\00\9f\1f/\1f\99\03\00\00\a0\1fh\1f\99\03\00\00\a1\1fi\1f\99\03\00\00\a2\1fj\1f\99\03\00\00\a3\1fk\1f\99\03\00\00\a4\1fl\1f\99\03\00\00\a5\1fm\1f\99\03\00\00\a6\1fn\1f\99\03\00\00\a7\1fo\1f\99\03\00\00\a8\1fh\1f\99\03\00\00\a9\1fi\1f\99\03\00\00\aa\1fj\1f\99\03\00\00\ab\1fk\1f\99\03\00\00\ac\1fl\1f\99\03\00\00\ad\1fm\1f\99\03\00\00\ae\1fn\1f\99\03\00\00\af\1fo\1f\99\03\00\00\b2\1f\ba\1f\99\03\00\00\b3\1f\91\03\99\03\00\00\b4\1f\86\03\99\03\00\00\b6\1f\91\03B\03\00\00\b7\1f\91\03B\03\99\03\bc\1f\91\03\99\03\00\00\c2\1f\ca\1f\99\03\00\00\c3\1f\97\03\99\03\00\00\c4\1f\89\03\99\03\00\00\c6\1f\97\03B\03\00\00\c7\1f\97\03B\03\99\03\cc\1f\97\03\99\03\00\00\d2\1f\99\03\08\03\00\03\d3\1f\99\03\08\03\01\03\d6\1f\99\03B\03\00\00\d7\1f\99\03\08\03B\03\e2\1f\a5\03\08\03\00\03\e3\1f\a5\03\08\03\01\03\e4\1f\a1\03\13\03\00\00\e6\1f\a5\03B\03\00\00\e7\1f\a5\03\08\03B\03\f2\1f\fa\1f\99\03\00\00\f3\1f\a9\03\99\03\00\00\f4\1f\8f\03\99\03\00\00\f6\1f\a9\03B\03\00\00\f7\1f\a9\03B\03\99\03\fc\1f\a9\03\99\03\00\00\00\fbF\00F\00\00\00\01\fbF\00I\00\00\00\02\fbF\00L\00\00\00\03\fbF\00F\00I\00\04\fbF\00F\00L\00\05\fbS\00T\00\00\00\06\fbS\00T\00\00\00\13\fbD\05F\05\00\00\14\fbD\055\05\00\00\15\fbD\05;\05\00\00\16\fbN\05F\05\00\00\17\fbD\05=\05")
 (data $48 (i32.const 16205) "\01\02\03\04\05\06\07\08\t\n\0b\0c\r\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`ABCDEFGHIJKLMNOPQRSTUVWXYZ{|}~\7f")
 (data $49 (i32.const 16332) "|")
 (data $49.1 (i32.const 16344) "\02\00\00\00^\00\00\00E\00l\00e\00m\00e\00n\00t\00 \00t\00y\00p\00e\00 \00m\00u\00s\00t\00 \00b\00e\00 \00n\00u\00l\00l\00a\00b\00l\00e\00 \00i\00f\00 \00a\00r\00r\00a\00y\00 \00i\00s\00 \00h\00o\00l\00e\00y")
 (data $50 (i32.const 16460) "\\")
 (data $50.1 (i32.const 16472) "\02\00\00\00B\00\00\00a\00s\00s\00e\00m\00b\00l\00y\00/\00b\00l\00o\00c\00k\00d\00a\00t\00a\00/\00i\00n\00s\00c\00r\00i\00p\00t\00i\00o\00n\00.\00t\00s")
 (data $51 (i32.const 16556) "\1c")
 (data $51.1 (i32.const 16568) "\'\00\00\00\08\00\00\00\02")
 (data $52 (i32.const 16588) "\1c")
 (data $52.1 (i32.const 16600) ")\00\00\00\08\00\00\00\03")
 (data $53 (i32.const 16620) "\1c")
 (data $53.1 (i32.const 16632) "*\00\00\00\08\00\00\00\04")
 (data $54 (i32.const 16652) "\1c")
 (data $54.1 (i32.const 16664) "\02\00\00\00\n\00\00\00/\00t\00e\00s\00t")
 (data $55 (i32.const 16684) "\1c")
 (data $55.1 (i32.const 16696) "\02\00\00\00\08\00\00\00t\00e\00s\00t")
 (data $56 (i32.const 16716) "\1c")
 (data $56.1 (i32.const 16728) "\02\00\00\00\n\00\00\00/\00m\00a\00s\00k")
 (data $57 (i32.const 16748) "<")
 (data $57.1 (i32.const 16760) "\02\00\00\00$\00\00\00K\00e\00y\00 \00d\00o\00e\00s\00 \00n\00o\00t\00 \00e\00x\00i\00s\00t")
 (data $58 (i32.const 16812) ",")
 (data $58.1 (i32.const 16824) "\02\00\00\00\16\00\00\00~\00l\00i\00b\00/\00m\00a\00p\00.\00t\00s")
 (data $59 (i32.const 16860) "\1c")
 (data $59.1 (i32.const 16872) "\02\00\00\00\02\00\00\00/")
 (data $60 (i32.const 16892) ",")
 (data $60.1 (i32.const 16904) "\02\00\00\00\10\00\00\00o\00u\00t\00p\00o\00i\00n\00t")
 (data $61 (i32.const 16940) "\1c")
 (data $61.1 (i32.const 16952) "\02\00\00\00\n\00\00\00t\00e\00s\00t\003")
 (data $62 (i32.const 16972) "\1c")
 (data $62.1 (i32.const 16984) "\02\00\00\00\n\00\00\00t\00e\00s\00t\002")
 (data $63 (i32.const 17004) "\1c")
 (data $63.1 (i32.const 17016) "1\00\00\00\08\00\00\00\05")
 (data $64 (i32.const 17036) "\1c")
 (data $64.1 (i32.const 17048) "\02\00\00\00\04\00\00\000\00x")
 (data $65 (i32.const 17068) "\1c")
 (data $65.1 (i32.const 17080) "\02\00\00\00\06\00\00\00o\00r\00d")
 (data $66 (i32.const 17100) "<")
 (data $66.1 (i32.const 17112) "\02\00\00\00(\00\00\00i\00n\00s\00c\00r\00i\00p\00t\00i\00o\00n\00 \00f\00r\00o\00m\00 \00t\00x\00 ")
 (data $67 (i32.const 17164) ",")
 (data $67.1 (i32.const 17176) "\02\00\00\00\0e\00\00\00 \00i\00n\00p\00u\00t\00 ")
 (data $68 (i32.const 17212) "<")
 (data $68.1 (i32.const 17224) "\02\00\00\00*\00\00\00I\00n\00s\00c\00r\00i\00p\00t\00i\00o\00n\00 \00b\00o\00d\00y\00 \00i\00s\00:\00 ")
 (data $69 (i32.const 17276) "\bc\04")
 (data $69.1 (i32.const 17288) "\02\00\00\00\a8\04\00\000\002\000\000\000\000\000\000\000\000\000\001\000\001\00a\00a\00b\00e\007\00e\000\00d\005\00a\003\00a\005\006\00b\00b\000\004\009\00a\004\001\007\00b\004\00e\006\00f\009\000\00d\00d\002\00d\006\00a\005\007\008\009\000\00f\00b\00c\006\005\006\008\00f\004\007\006\00b\00a\00a\00a\00e\000\006\001\003\000\000\00a\008\00f\000\003\000\000\000\000\000\000\00f\00f\00f\00f\00f\00f\00f\00d\000\001\002\006\000\001\000\000\000\000\000\000\000\000\000\000\000\000\001\006\000\000\001\004\001\003\00c\008\00d\004\00f\004\00b\00e\007\005\00d\001\001\00b\004\006\003\00a\003\005\00b\001\004\001\00a\001\000\006\007\001\005\005\00c\004\000\007\00a\008\000\003\004\000\00b\002\009\00a\004\001\001\009\005\00e\00e\008\009\002\00d\008\00b\003\00d\00d\00f\000\00b\007\009\001\002\00f\00a\000\00c\009\003\00c\00f\00d\00c\003\00d\00c\007\00b\002\002\00d\00f\00d\00d\006\005\00e\00c\00d\00c\008\008\00c\002\00f\00d\00c\00c\005\002\006\008\004\00b\00c\000\009\00f\007\00f\002\002\000\00e\007\00e\009\002\00b\00e\004\00b\00f\00d\004\004\00c\005\000\00d\000\005\008\005\003\00b\00e\00e\003\008\00c\001\00b\005\008\000\000\00d\000\00c\005\002\00b\007\00a\001\006\00f\009\008\000\00e\009\00e\007\001\002\000\003\00b\003\00e\005\009\00e\00d\00a\008\005\007\00e\009\00f\00c\007\005\000\003\007\006\00b\001\00d\00e\00b\006\001\004\007\00a\00a\004\005\004\001\000\004\001\000\00a\005\006\001\00e\000\006\002\00f\00b\003\006\001\007\002\00b\006\000\000\006\003\004\00e\00a\00c\000\000\006\003\000\003\006\00f\007\002\006\004\000\001\000\001\000\00a\007\004\006\005\007\008\007\004\002\00f\007\000\006\00c\006\001\006\009\006\00e\000\000\003\009\007\00b\002\002\007\000\002\002\003\00a\002\002\006\002\007\002\006\003\002\00d\003\002\003\000\002\002\002\00c\002\002\006\00f\007\000\002\002\003\00a\002\002\006\00d\006\009\006\00e\007\004\002\002\002\00c\002\002\007\004\006\009\006\003\006\00b\002\002\003\00a\002\002\007\003\006\001\007\004\007\003\002\002\002\00c\002\002\006\001\006\00d\007\004\002\002\003\00a\002\002\003\009\003\009\003\009\003\009\003\009\003\009\003\009\003\009\002\002\007\00d\006\008\002\001\00c\000\003\00b\003\00e\005\009\00e\00d\00a\008\005\007\00e\009\00f\00c\007\005\000\003\007\006\00b\001\00d\00e\00b\006\001\004\007\00a\00a\004\005\004\001\000\004\001\000\00a\005\006\001\00e\000\006\002\00f\00b\003\006\001\007\002\00b\006\000\000\006\003\004\00e\000\000\000\000\000\000\000\000")
 (data $70 (i32.const 18492) "|")
 (data $70.1 (i32.const 18504) "\02\00\00\00^\00\00\00U\00n\00e\00x\00p\00e\00c\00t\00e\00d\00 \00\'\00n\00u\00l\00l\00\'\00 \00(\00n\00o\00t\00 \00a\00s\00s\00i\00g\00n\00e\00d\00 \00o\00r\00 \00f\00a\00i\00l\00e\00d\00 \00c\00a\00s\00t\00)")
 (data $71 (i32.const 18620) "<")
 (data $71.1 (i32.const 18632) "\02\00\00\00\"\00\00\00a\00s\00s\00e\00m\00b\00l\00y\00/\00i\00n\00d\00e\00x\00.\00t\00s")
 (data $72 (i32.const 18684) "<D")
 (data $72.1 (i32.const 18696) "\02\00\00\00$D\00\000\001\000\000\000\000\000\000\000\003\005\006\006\002\00e\004\007\006\00c\004\007\00f\00d\003\008\005\008\007\00a\00c\006\00a\005\006\00e\008\006\002\007\00a\001\003\005\001\007\006\003\002\004\00c\00a\003\00a\00b\001\005\008\003\005\003\006\00b\00f\00d\001\006\001\00f\001\002\00f\00c\004\00a\000\000\000\000\000\000\000\000\008\00c\004\009\003\000\004\006\000\002\002\001\000\000\00d\00b\009\00f\000\005\00c\008\00b\007\002\009\00d\000\00a\000\001\002\001\004\00e\00a\003\00c\007\00e\001\00d\000\00b\00a\00f\007\00b\00a\006\00d\00e\00f\00d\00d\007\007\002\00a\00a\000\009\009\008\008\006\00a\005\006\003\008\001\00a\00e\008\00c\00a\00e\000\002\002\001\000\000\008\000\009\003\002\007\008\006\00f\00f\006\006\00d\00d\00c\000\00b\002\00c\000\004\005\000\004\002\001\000\008\00f\00a\00a\00a\00e\00f\00f\004\00d\005\00f\00d\000\00a\00a\009\00a\003\00f\00d\000\005\000\002\007\00d\00c\002\007\004\00e\005\00e\00c\008\00d\000\001\004\001\000\004\00a\00d\003\00e\00f\003\007\00e\004\00d\00a\00f\00f\00c\005\001\006\001\009\009\00f\00e\001\001\007\00f\003\00a\004\00e\00e\00a\008\008\000\006\009\00c\005\00c\000\001\005\004\00a\005\002\00a\00e\00f\003\001\006\007\00f\00c\004\00d\002\009\00b\006\00d\002\00a\006\006\001\000\002\00d\007\004\00d\005\00a\00d\008\007\002\005\004\001\008\007\003\005\00f\006\00c\008\00a\008\00d\005\00e\009\004\00c\00d\00d\001\00c\004\00a\002\00b\002\00e\003\000\008\000\000\005\005\006\003\00d\009\004\003\000\006\006\00e\00d\00c\00f\00f\00f\00f\00f\00f\00f\00f\007\007\006\004\00c\008\000\003\00f\005\005\00c\004\006\003\003\008\00e\00a\004\009\00e\00b\00d\006\002\006\008\004\007\00c\00b\005\00f\002\009\006\004\00e\00a\00f\00a\005\008\005\003\00e\007\00a\00f\00b\002\007\009\002\007\00b\00f\000\00f\003\00d\006\006\000\000\000\000\000\000\000\000\004\009\004\008\003\000\004\005\000\002\002\001\000\000\00c\008\00b\001\004\004\00e\00d\001\004\000\004\007\00b\002\007\00f\002\008\00c\00e\007\006\004\006\006\003\00d\003\004\00d\001\008\007\003\009\001\000\00d\003\00f\002\004\004\00f\002\005\007\001\006\00b\000\00c\005\002\001\000\00f\008\005\001\005\004\002\000\002\002\000\001\002\007\00a\00b\003\004\00b\00a\00c\006\008\007\008\009\00e\00a\00e\000\003\00a\00a\00c\002\00c\003\002\009\006\00b\00b\00b\007\000\00d\008\001\004\000\004\005\007\001\005\00f\007\00c\009\00e\004\005\00a\006\00e\00e\00c\008\00e\008\00d\00e\004\008\00a\000\001\00f\00f\00f\00f\00f\00f\00f\00f\00d\004\005\00f\00e\007\007\00c\00e\00a\005\00c\008\002\008\00c\00b\009\000\008\00c\00f\003\00d\004\00e\001\000\00f\007\009\003\000\003\00d\00f\001\00d\000\004\003\00a\003\003\00d\00a\00f\006\00e\00b\006\00a\004\001\009\004\008\003\00f\00c\002\00c\007\00f\000\002\000\000\000\000\000\000\008\00b\004\008\003\000\004\005\000\002\002\001\000\000\00f\006\008\00d\00a\002\005\004\008\009\007\006\003\000\002\001\005\008\00c\00e\003\003\002\00c\008\005\00b\00d\002\001\006\004\00e\008\004\000\003\009\006\001\006\001\005\008\004\002\003\00f\00b\006\00b\00f\008\002\002\00a\00f\005\000\00a\003\005\006\002\000\002\002\000\001\007\00e\00d\009\006\004\004\00c\00d\00b\000\00b\006\007\007\004\000\007\00b\002\004\00d\003\004\00b\009\002\003\008\00e\005\00d\00e\00a\00e\00c\00b\00d\00c\00c\009\004\002\00b\00b\006\001\006\004\00b\004\00c\000\00e\002\00a\002\000\007\005\00d\002\000\000\001\004\001\000\004\00e\00c\008\00a\006\008\00e\000\00a\009\000\00d\005\00d\003\00e\004\00f\004\005\00e\001\002\006\009\00e\008\008\004\002\009\003\00e\000\005\00a\00c\00f\00d\001\009\007\00a\008\00d\008\003\00c\001\00b\00e\002\001\007\008\003\00a\009\002\009\00c\00a\009\003\008\00e\009\00e\008\002\00f\000\009\00b\00c\000\00f\003\00e\00b\003\009\00f\004\00c\00f\004\00d\006\006\009\00a\002\009\00d\00e\00e\00a\003\00e\003\006\00d\007\00d\007\00f\00e\00e\009\006\006\00a\008\00b\005\002\007\00b\000\007\00d\00b\008\003\009\009\00c\00f\00f\00f\00f\00f\00f\00f\00f\007\002\00b\00c\00f\005\007\003\000\000\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\00b\002\00c\00e\003\005\00f\002\005\00e\00c\007\001\000\004\005\00f\004\001\00c\000\002\000\00e\00d\000\00e\002\00e\00d\00c\008\005\007\00f\006\00a\002\009\00c\008\008\00a\00c\003\00b\009\002\006\008\000\000\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\001\002\00b\00f\00c\008\009\00a\008\00a\006\005\006\009\00e\005\00b\003\009\003\006\003\00e\008\007\00d\002\001\009\00b\003\003\00c\007\00e\00d\007\00e\00b\00e\008\008\00a\00c\006\008\002\004\001\000\000\004\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\00c\002\008\009\00e\00b\009\003\002\005\008\00b\00c\006\00f\003\002\005\00a\001\00e\009\00c\000\001\00b\00b\009\002\00c\005\003\002\002\002\007\004\008\00a\001\008\008\00a\00c\009\000\007\005\004\00b\000\006\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\00f\005\005\000\000\005\001\001\00a\00c\00e\00a\001\009\000\008\007\004\00a\00a\005\002\00f\00a\00c\00d\00a\000\008\007\00b\00d\000\009\006\00f\008\000\006\00b\008\008\00a\00c\00d\002\000\00a\002\00d\000\000\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\00c\000\007\009\00f\003\003\006\00d\009\006\003\002\006\004\00e\007\001\003\00a\00b\000\003\001\004\008\005\003\002\006\002\002\003\005\000\009\008\004\00d\002\008\008\00a\00c\006\008\006\007\005\008\000\002\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\006\005\00d\00c\00e\003\008\000\00a\00a\001\008\009\007\00e\00c\001\00f\00a\003\009\00e\007\009\00d\002\001\004\00c\00b\009\00d\00d\006\00b\001\00a\00b\00e\004\008\008\00a\00c\000\002\00e\000\007\00c\000\007\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\00d\00c\001\00a\004\005\00a\00d\008\005\001\003\000\006\004\005\004\007\00c\004\00a\00f\00b\003\005\006\00b\00b\002\00b\001\009\007\004\006\009\00b\00d\007\008\008\008\00a\00c\002\006\00d\00b\001\006\000\000\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\00a\005\00a\00b\00a\00b\000\006\006\007\005\00a\003\00e\00a\000\000\007\00a\008\000\004\009\00c\00d\009\00b\00b\00c\008\000\000\003\005\000\004\002\00f\003\003\008\008\00a\00c\006\00c\006\005\001\009\000\000\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\00e\001\00c\009\00a\009\004\005\00f\00e\00b\004\003\000\002\006\00b\007\00d\00b\001\007\00c\00b\001\00d\00e\00f\00c\00c\008\00a\005\005\001\008\002\00e\00c\003\008\008\00a\00c\007\005\005\00d\002\008\000\003\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\007\008\007\004\002\00a\000\00c\00c\000\009\004\00f\00c\00f\006\000\00d\007\00c\007\00e\00e\004\005\005\00c\00d\005\00d\001\00e\000\00c\00a\005\009\002\002\008\008\008\00a\00c\001\002\003\003\008\002\000\009\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\00b\005\002\003\00a\008\005\00f\005\00c\007\00d\003\004\001\008\00c\009\007\006\00d\008\00b\002\00d\009\002\009\007\00e\00c\001\002\00c\007\000\008\004\009\00e\008\008\00a\00c\009\003\00f\005\004\005\000\000\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\001\000\00e\00d\00c\00f\003\00f\002\002\004\000\005\00c\008\007\007\004\002\005\007\00c\00e\007\001\001\00b\00c\00b\001\001\00b\00b\000\000\00c\00e\00f\002\00c\008\008\00a\00c\00c\006\004\000\00e\000\000\000\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\00f\00c\000\00b\001\001\001\001\002\00f\00a\009\005\008\00d\003\004\00f\00b\006\008\004\000\004\00e\002\00b\002\00d\009\008\003\00a\002\006\002\002\005\00e\003\008\008\00a\00c\003\005\001\00c\00b\00e\000\001\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\003\008\00d\005\002\00b\00c\00d\007\007\00b\002\00e\00d\008\002\00d\003\001\008\009\005\007\008\008\001\00b\003\001\007\003\006\000\007\004\006\00a\004\00c\003\008\008\00a\00c\007\001\000\00d\002\004\000\003\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\000\00b\008\00e\006\006\004\00b\009\002\004\003\009\00c\00d\001\003\00f\00f\00e\00d\008\000\004\00f\001\00e\007\00d\00c\002\001\002\00f\000\00e\00f\004\009\00d\008\008\00a\00c\00a\006\008\005\005\00b\000\000\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\00b\003\004\001\007\009\00a\009\00d\006\000\008\001\00b\00d\003\00f\00b\00f\00f\00a\004\009\005\00e\009\008\00b\001\00d\009\004\00a\002\008\00e\007\002\00d\009\008\008\00a\00c\002\00e\001\002\007\007\000\002\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\005\00e\002\00c\006\00e\009\00c\000\008\00b\000\00c\000\00f\000\004\001\005\00d\00a\009\001\000\003\002\00e\001\00a\004\007\008\002\00a\003\003\006\003\00f\009\008\008\00a\00c\00d\002\009\00f\00d\004\000\005\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\000\00f\002\000\007\00d\009\00a\00a\000\005\00f\00f\006\00c\004\009\00b\00e\003\006\007\00a\009\005\00d\001\00e\006\00f\00e\006\000\008\002\000\008\006\00b\00e\008\008\00a\00c\00e\009\00a\006\00c\008\000\001\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\002\00d\003\00c\003\007\00d\005\00c\001\00d\00f\006\009\002\007\004\002\004\00c\00a\009\008\001\001\00f\00c\007\00d\00d\003\007\00f\007\007\00f\007\00c\00b\00c\008\008\00a\00c\003\00b\003\00a\007\007\000\001\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\007\00c\001\008\000\00c\000\00d\007\006\00c\000\00c\00c\006\009\00a\00f\00a\00a\00f\009\00b\003\008\00d\00a\009\00b\00a\003\00c\001\001\004\005\00c\000\009\008\008\008\00a\00c\003\007\003\001\006\000\000\001\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\007\00b\001\005\006\00f\001\000\000\009\001\005\00d\00b\000\008\000\00e\001\00b\007\00c\009\003\006\004\003\004\00b\004\005\00a\009\00f\002\008\004\007\005\004\008\008\00a\00c\009\009\00e\006\007\007\000\007\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\00b\00d\001\002\007\007\00f\002\00b\00e\003\00e\005\002\000\00e\003\009\00d\001\00e\00e\00a\003\005\008\008\005\003\002\003\00a\00f\00f\009\009\007\00b\008\003\008\008\00a\00c\005\001\000\000\005\00c\000\000\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\00a\00d\007\003\00e\000\009\003\00b\00f\009\007\005\007\00c\00d\000\009\009\003\007\005\001\00d\001\00f\004\007\007\003\00e\004\00c\001\00a\007\007\000\003\006\008\008\00a\00c\00c\00d\00d\001\000\009\000\002\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\003\00c\000\00a\001\007\00d\00b\002\007\00f\006\00f\00d\005\00e\00b\00e\002\00f\002\00f\003\007\007\007\004\009\00c\001\008\007\001\002\00e\00b\006\00f\00a\00f\008\008\00a\00c\001\005\00c\002\005\00b\000\002\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\00b\00d\00f\00c\006\005\00c\003\00f\00c\002\000\00d\00b\006\004\00f\001\004\006\004\003\007\005\006\004\007\00e\006\00c\005\00f\008\003\008\009\008\002\009\002\008\008\00a\00c\00e\005\00c\000\000\002\000\001\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\009\005\005\003\00e\00f\008\00e\00f\00f\00f\00c\003\00c\00c\00f\00f\003\002\00a\005\007\007\00a\005\002\00f\005\001\00c\009\004\007\003\001\00d\00d\003\004\000\008\008\00a\00c\00a\00e\00f\005\006\00d\000\006\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\00c\007\00d\003\000\00c\00f\00b\001\002\005\002\00d\002\005\00a\003\00a\001\00a\00d\00c\005\00f\007\000\006\006\009\008\002\001\000\009\000\000\007\00b\003\00b\008\008\00a\00c\00d\00f\003\005\009\00c\000\000\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\008\00c\00c\00c\004\000\003\000\000\00c\006\005\001\001\000\005\003\00a\00b\007\00e\00c\00b\001\00f\00a\00f\00e\006\004\00f\00d\00a\00d\008\007\007\007\00e\005\008\008\00a\00c\00c\00a\00c\005\008\003\000\000\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\00f\009\00a\007\00b\006\007\00e\00b\000\00f\00f\009\007\009\009\007\009\008\007\004\007\006\00e\004\003\001\003\00e\002\001\003\002\001\003\00b\005\00a\00d\000\008\008\00a\00c\004\00e\00a\00b\00e\006\001\00e\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\007\009\002\008\007\008\00d\007\00e\008\008\005\008\00a\002\00f\00e\00f\00f\008\007\000\007\00f\002\002\007\000\004\003\00a\008\007\002\002\00c\008\00f\00a\00f\008\008\00a\00c\007\00f\00c\000\008\00f\000\000\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\006\009\009\008\00f\00c\006\004\009\003\001\009\00d\002\00d\008\00a\008\003\009\008\007\001\009\009\006\00e\003\004\008\002\008\007\00d\001\000\005\004\007\00a\008\008\00a\00c\000\009\00f\008\000\00e\000\003\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\006\005\004\001\007\009\000\00d\008\00d\008\000\008\002\008\00f\00f\007\00f\007\00f\007\007\001\00f\00f\00e\004\005\003\004\009\006\00c\000\00a\002\000\004\008\008\008\00a\00c\004\005\00c\001\001\00c\000\006\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\008\000\004\00c\00b\00d\004\004\004\006\003\005\002\00b\009\00f\00d\00c\00f\00e\00a\007\006\001\008\002\003\009\00e\006\00f\00b\003\003\004\000\005\008\00a\003\008\008\00a\00c\004\009\007\00f\001\00c\000\007\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\004\005\00a\007\003\008\000\00a\00a\002\005\002\00c\006\009\004\001\006\005\009\004\005\001\003\000\00e\001\001\007\006\009\005\00f\003\009\002\004\00a\00b\00c\008\008\00a\00c\001\005\002\00c\009\00a\000\001\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\000\00b\00d\00e\00c\00d\003\009\00e\00f\00a\001\004\00f\007\006\009\006\003\002\005\007\00a\002\003\00e\00e\008\006\00f\001\00c\00c\00a\005\003\000\006\005\00b\008\008\00a\00c\00d\005\00a\00b\005\00a\000\007\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\004\00d\00f\000\00b\009\008\002\00e\004\000\006\00c\00a\009\00a\001\00f\00d\009\007\009\006\007\00e\003\003\00c\00e\00b\00c\009\00d\00d\003\001\000\000\00b\00f\008\008\00a\00c\004\00e\008\009\001\000\000\000\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\00b\009\009\00e\002\003\001\004\001\006\008\007\002\00e\00e\000\009\00a\004\001\007\00e\00d\00c\003\00a\00d\008\000\00e\00b\001\005\006\003\00f\005\005\008\00a\008\008\00a\00c\002\006\002\000\002\00b\000\000\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\008\00c\006\00d\008\00b\001\009\00a\000\00e\004\00b\00b\003\00b\009\007\00f\003\00f\003\003\000\00f\009\004\000\00d\007\00c\001\005\006\00a\002\00d\003\009\00d\008\008\00a\00c\007\009\00b\00c\000\00b\000\002\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\001\004\001\001\000\008\00e\000\004\00d\008\002\00a\005\00c\00e\006\008\00f\000\003\00e\00d\007\004\007\009\005\00c\001\00b\00a\002\004\005\005\000\000\003\007\008\008\00a\00c\008\000\00f\00b\00f\001\000\000\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\00d\001\001\00d\00b\00f\008\00f\00b\003\003\007\000\00c\006\00c\002\00c\00d\005\00c\007\00c\00d\00a\00f\00d\000\003\00d\004\002\00b\005\009\00a\00e\00d\008\006\008\008\00a\00c\003\003\00e\001\005\00b\000\001\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\00f\00b\00b\006\000\00c\009\002\007\00b\00c\00c\004\006\008\00c\004\00a\004\004\000\001\009\00d\004\00e\006\000\002\00f\002\003\004\00e\00f\00a\003\007\008\001\008\008\00a\00c\003\000\00a\000\003\006\000\000\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\007\006\005\001\003\001\009\00b\008\00c\00f\00f\00e\006\003\00e\009\00b\006\008\00c\005\00c\006\00b\00f\005\002\001\00a\003\001\000\006\00c\007\009\009\007\00d\008\008\00a\00c\004\008\00f\000\005\001\000\000\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\001\000\000\00a\005\001\008\00d\00d\002\000\00f\002\005\001\009\00a\006\001\005\003\00a\006\00e\00b\000\008\00c\009\006\005\00d\00a\007\001\007\00a\004\00c\00e\008\008\00a\00c\001\000\003\007\00f\005\000\001\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\00f\003\00d\00b\00d\004\00c\003\00c\00c\008\002\001\00d\00b\00f\00b\00d\00c\002\001\004\007\008\001\005\006\006\004\002\009\007\00f\00a\002\00d\009\000\008\005\008\008\00a\00c\006\005\00f\001\009\003\000\001\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\00e\00e\001\008\00b\001\009\00a\004\003\00f\00b\008\00c\008\005\00a\000\002\00c\008\00f\002\009\00d\006\00a\004\001\00f\004\006\00c\003\00c\00c\00b\00c\00b\004\008\008\00a\00c\005\00a\003\00b\00c\00f\000\006\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\007\008\003\009\00c\009\00d\007\008\00a\00a\00f\00e\00d\003\002\00a\00e\005\00b\001\006\000\00c\003\000\006\007\008\00e\008\00d\005\00f\002\00f\005\006\00e\00f\008\008\00a\00c\004\001\009\005\001\008\000\000\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\006\005\001\00e\00b\006\008\00e\00c\007\00b\001\000\000\002\000\00f\00e\003\001\00c\000\000\001\003\00e\002\000\006\00b\009\006\003\00c\000\00a\001\009\00c\000\008\008\00a\00c\002\008\00b\00c\00a\00f\000\001\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\006\004\00c\00d\003\00a\004\00a\00a\00f\00a\007\008\001\00f\002\001\001\00e\001\008\00c\006\002\00b\008\000\00b\007\009\00a\00b\00f\005\00f\000\008\008\00b\006\008\008\00a\00c\00b\008\00f\007\00b\002\000\002\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\005\00d\00d\00e\009\00a\00d\000\009\00c\00e\00c\00f\006\00b\006\000\00b\003\001\00d\002\004\006\002\00c\00b\00a\007\007\005\004\006\002\006\00a\00d\005\00e\005\008\008\00a\00c\001\006\008\00d\00b\00c\000\002\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\00d\00a\00b\00e\008\001\00f\002\003\000\00d\004\00c\00b\006\006\007\00e\00f\00e\00c\00e\006\00a\004\00f\00b\00b\00a\003\001\007\00d\000\00d\009\005\009\000\001\008\008\00a\00c\008\001\005\00c\001\004\000\002\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\009\003\00c\00a\003\008\000\001\000\00a\000\006\000\00d\00b\00d\00d\00c\00d\00c\002\008\00d\00a\006\00e\00b\00a\001\003\005\007\00d\004\004\005\009\009\000\00a\008\008\00a\00c\002\00d\005\005\00d\00b\000\005\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\001\00e\003\00e\007\00a\006\00b\00f\005\003\004\003\008\00a\00c\003\00c\00b\007\003\00f\00f\002\002\004\009\006\00a\003\00c\008\006\001\00f\00c\00b\006\008\00a\008\008\00a\00c\001\009\00c\000\001\00c\000\000\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\009\005\005\005\00e\009\008\006\005\006\00e\00c\00b\003\006\004\00a\006\006\003\000\00a\002\005\00a\007\001\006\002\007\00b\006\006\00d\006\005\00e\005\00e\00c\008\008\00a\00c\007\005\000\00b\00e\005\000\000\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\004\003\005\00b\001\00a\00e\00c\009\00d\00b\009\00b\009\00e\00d\00e\00d\000\006\00b\004\007\004\000\00e\00e\00b\002\00e\004\00b\00c\009\00e\001\002\00b\00a\00e\008\008\00a\00c\002\00d\002\00f\005\005\000\008\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\005\007\00d\002\00c\00e\001\002\00a\008\00b\008\00b\000\002\005\006\004\008\002\002\002\008\009\007\004\005\002\003\002\00b\00e\005\002\001\007\006\00f\00a\001\008\008\00a\00c\003\009\00c\00d\00e\004\000\002\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\00b\00b\000\00f\009\001\00b\005\001\00c\001\00a\000\00e\003\00d\007\002\00a\000\00c\00a\003\004\008\006\00a\00b\004\00b\008\007\006\005\007\003\003\001\004\007\008\008\00a\00c\007\00a\007\004\001\00a\000\00b\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\00d\005\000\008\007\00a\00f\006\007\004\00e\00e\003\002\003\005\00f\007\004\004\00c\00e\00a\003\007\008\00a\006\005\002\006\008\009\005\006\008\009\00f\00b\00a\008\008\00a\00c\005\004\00e\000\005\00e\000\000\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\00a\009\00f\009\002\002\00d\00e\002\00a\00e\007\00b\005\009\000\003\00e\001\003\005\00b\003\009\002\003\00b\002\006\00e\000\004\00a\000\000\00f\002\008\008\00a\008\008\00a\00c\00a\009\003\000\00b\00f\000\000\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\002\009\00a\006\007\009\00a\00c\00c\00c\003\005\006\00e\00d\005\003\000\00c\000\003\00b\000\007\008\00b\00d\003\00d\00d\007\00d\006\00b\00c\009\00a\00c\009\00a\008\008\00a\00c\00b\007\001\00d\007\003\000\003\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\00a\004\009\006\00f\008\003\00c\002\00a\001\007\00d\00c\003\002\00a\008\005\003\004\00c\00e\000\006\003\009\00e\003\004\006\00f\004\00d\00c\00c\005\00b\00f\006\008\008\00a\00c\005\001\008\007\003\00e\000\002\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\002\00b\007\007\005\001\000\005\004\006\006\00a\000\000\006\006\007\004\001\00f\009\00c\008\001\00e\006\005\006\00b\004\00c\00b\007\00b\008\007\003\00c\00b\002\008\008\00a\00c\00a\00f\005\006\009\000\000\007\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\005\006\00f\00e\00d\002\009\005\009\004\002\006\00e\00d\00b\004\005\006\00d\00a\008\005\006\003\00b\00e\00b\001\00d\006\002\002\00b\004\006\00b\00c\007\008\002\008\008\00a\00c\00f\006\009\00c\009\008\000\002\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\00a\004\00e\004\005\000\000\001\00b\003\00e\007\008\006\00a\003\002\00b\006\00e\00a\004\00e\003\00c\006\001\009\006\001\00b\003\008\00b\00b\007\00b\008\00a\00a\008\008\00a\00c\00c\009\004\00c\006\006\000\002\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\00c\008\004\00f\00b\004\00f\005\00f\00b\00b\005\000\006\007\002\004\00d\008\007\008\002\002\007\00b\004\00d\00c\001\009\009\004\004\003\00f\00e\007\008\00d\00c\008\008\00a\00c\001\00b\006\005\001\009\000\000\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\008\00f\005\00b\00c\00e\00c\005\003\006\007\000\002\001\00e\004\00f\00b\007\009\003\004\009\008\006\00e\00a\000\006\004\000\007\001\007\001\004\002\004\00e\00c\008\008\00a\00c\009\00a\00d\008\00b\002\000\003\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\00f\002\009\000\00f\002\003\00a\004\00c\002\00a\00b\007\002\007\005\00a\00f\001\004\00d\00d\002\009\005\004\004\008\00c\003\009\00d\008\00b\00c\00c\002\00d\00e\008\008\00a\00c\003\008\00b\001\00f\007\000\008\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\006\00d\008\008\00d\005\008\007\006\007\00a\00f\00c\00b\00f\00b\00f\007\000\007\00f\009\009\00b\002\00c\00a\00d\00f\00e\007\00d\006\006\000\006\008\00c\00d\008\008\008\00a\00c\002\005\001\001\004\00c\000\001\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\001\00c\003\000\004\000\000\004\00d\00b\009\00f\00d\006\008\00a\00b\001\005\006\00a\003\001\004\008\008\00f\00d\00c\00a\00c\00b\009\000\008\000\00c\004\004\00c\008\008\00a\00c\00b\008\00e\009\001\004\000\000\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\008\000\00b\007\00c\006\007\005\001\00a\007\00d\006\00c\00a\009\00f\00a\008\00f\000\004\009\004\009\00f\003\00f\006\00f\00a\000\002\001\009\001\00d\008\00a\000\008\008\00a\00c\002\004\00a\001\004\00a\000\001\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\00b\001\00e\00a\00e\002\00e\00a\005\003\009\00c\006\002\00e\00d\003\00b\001\005\00e\004\004\003\008\000\002\003\009\00b\007\00e\00c\00d\002\007\000\00c\00e\00b\008\008\00a\00c\001\001\00a\007\00f\006\000\001\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\004\004\007\00c\004\005\00c\000\001\004\001\009\003\009\005\002\004\004\004\00e\003\001\001\007\008\00c\003\006\004\00e\005\003\00e\002\00f\00c\00f\00f\009\00e\008\008\00a\00c\003\000\00c\00f\001\000\000\000\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\004\00c\00c\004\003\008\00d\000\00a\00d\00f\00e\007\006\007\00e\001\00a\00b\008\004\005\009\003\00f\006\003\007\000\005\009\006\00f\005\003\007\00f\005\006\00b\008\008\00a\00c\00c\000\004\005\007\008\000\000\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\00e\00a\005\000\004\008\009\004\00b\007\00e\004\003\00a\00b\006\000\001\002\003\00f\00b\00a\00b\003\003\001\00b\004\008\005\00b\008\00c\00d\002\004\000\004\005\008\008\00a\00c\00c\00c\009\006\00a\007\000\001\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\00e\003\005\00c\00b\007\00d\001\005\00f\001\008\00a\007\006\003\006\000\00d\002\004\007\005\003\00c\00e\006\002\004\00d\006\00e\00d\001\00a\000\005\009\00e\00d\008\008\00a\00c\00b\00a\007\006\009\003\000\001\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\004\00c\004\00d\004\006\008\002\00c\00b\00e\009\002\00c\003\003\008\002\003\00c\007\007\00d\006\006\00f\008\002\00c\00d\00e\009\002\007\003\009\00a\001\009\007\008\008\00a\00c\00a\006\000\00c\003\00e\000\002\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\007\00f\007\005\00d\00a\002\002\00e\00b\004\00f\008\009\005\00c\00d\00d\003\000\00d\00a\00d\00a\001\006\000\008\004\005\006\005\004\006\000\003\00b\001\007\003\008\008\00a\00c\00a\00b\006\002\000\005\000\003\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\006\00a\008\00a\00c\004\000\003\006\00d\000\001\00e\005\00e\00d\00d\005\006\009\003\007\004\008\003\00d\004\003\006\00b\000\00e\003\00c\001\006\007\006\003\00f\008\008\00a\00c\006\001\003\007\005\001\000\002\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\00d\00c\006\00c\00c\00e\004\008\007\003\00b\004\001\003\00b\00f\00a\00a\00d\00d\002\009\003\009\003\001\00d\000\009\007\00f\007\003\00a\007\00d\008\000\00f\006\008\008\00a\00c\000\00e\00d\000\000\00f\000\000\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\00f\003\009\00e\00c\000\00c\001\007\009\002\00e\006\005\004\00c\007\007\008\008\002\00f\005\000\006\000\005\006\001\001\00f\009\004\00e\004\006\007\008\00c\004\008\008\00a\00c\000\009\00a\006\00c\00b\000\000\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\00a\005\00a\00f\00f\00e\002\001\00f\009\004\00a\007\005\009\00a\00a\00f\008\00d\000\00e\000\009\007\00c\00b\00d\005\002\00c\002\006\00d\009\005\006\004\005\009\008\008\00a\00c\008\008\00d\005\004\002\000\006\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\006\00a\00e\004\003\004\005\008\00a\005\00a\00f\007\002\001\002\002\004\007\00a\001\005\00d\000\001\009\00b\00a\00e\009\007\00f\003\004\00b\000\005\001\00c\000\008\008\00a\00c\009\002\003\005\001\009\000\000\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\008\00a\00b\00c\001\003\002\001\004\00f\00a\000\00c\004\002\003\00a\006\00f\007\000\006\009\00e\005\00f\009\006\00f\004\00a\005\005\00f\005\00f\008\009\008\007\008\008\00a\00c\00d\004\007\00a\002\00e\000\000\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\00b\007\009\00e\004\001\004\005\000\00b\00e\000\007\004\00e\00f\00e\00a\005\00c\00b\006\001\001\003\00a\004\000\003\005\00b\00d\00f\001\009\00a\00e\006\00c\009\008\008\00a\00c\008\004\003\00c\001\007\000\002\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\00a\00d\008\000\00d\002\004\00e\000\00e\007\001\000\00b\00b\006\00e\00a\000\009\004\000\003\00d\002\009\004\000\00f\00a\00d\00e\009\00b\00d\00b\001\006\006\003\008\008\00a\00c\00b\000\000\005\006\007\000\000\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\00d\00d\00c\00c\00e\007\008\00d\00e\003\009\00a\005\006\008\005\00d\008\008\00e\002\007\00d\00f\00b\003\000\000\001\000\00c\008\003\008\005\00b\00e\005\00a\001\008\008\00a\00c\00c\00c\00f\007\00c\009\000\002\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\000\00b\001\003\00c\004\009\00a\001\00b\00c\00f\00e\00a\003\000\007\002\006\00f\00f\00d\00c\00c\007\001\00e\00e\003\00b\00d\007\002\000\00a\006\00f\001\001\00f\008\008\00a\00c\008\008\00e\003\000\007\000\00a\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\00e\004\000\006\00f\000\00b\00f\005\003\009\005\00f\009\00b\004\00a\00b\00b\004\002\000\001\008\008\006\002\00e\00c\00f\00e\003\001\004\002\008\004\002\005\000\008\008\00a\00c\00b\00f\000\006\003\000\000\000\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\00f\00a\007\002\006\00e\002\009\002\000\004\004\008\000\00f\003\004\005\002\008\00f\002\001\003\001\003\008\00a\00b\000\006\009\000\00c\003\002\00d\006\005\000\008\008\00a\00c\00c\004\00c\001\00f\00f\000\001\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\00b\000\002\004\004\000\008\000\006\00e\009\002\002\00c\00b\007\00b\005\004\006\00a\00d\007\00d\00b\00c\00c\003\001\00f\004\001\002\00e\000\00d\003\00f\009\00e\008\008\00a\00c\000\00d\002\00b\006\00f\000\000\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\004\002\00b\002\000\009\000\00f\000\006\008\001\00f\00c\007\003\003\002\00f\006\002\008\005\002\00b\00d\00c\005\00e\00f\00d\000\00b\00b\004\00b\003\006\001\003\008\008\00a\00c\00c\001\002\001\001\008\000\001\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\000\00f\00a\001\006\007\008\009\009\000\004\006\00b\000\002\000\004\007\000\005\004\008\002\003\009\007\00f\00b\003\001\009\00e\000\00a\009\004\00b\002\00c\002\008\008\00a\00c\00b\003\00e\005\006\009\000\000\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\005\008\002\00f\006\001\00f\004\001\004\00b\00f\000\001\00a\002\001\007\00c\00b\002\00f\003\001\003\002\005\006\008\005\001\00b\008\006\002\00e\00a\007\009\009\008\008\00a\00c\003\00a\00d\00c\00c\003\000\001\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\00e\002\009\005\00e\00c\00e\007\00f\007\00d\00e\005\001\00b\008\00f\000\00b\007\002\006\006\002\00e\001\004\009\00e\00f\00c\00d\002\00d\003\006\007\007\001\004\008\008\00a\00c\009\004\006\005\004\007\000\000\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\008\00c\00e\006\003\00c\004\006\007\003\008\00c\002\002\00e\00a\005\004\001\005\00e\006\008\006\007\00a\00a\003\00f\00e\003\00a\00e\002\00f\003\00e\00a\002\006\008\008\00a\00c\00c\007\00f\003\004\005\000\004\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\002\00f\00b\00e\002\00c\00a\006\00f\007\006\008\001\00d\002\00c\00a\006\002\00e\000\004\006\008\009\004\004\009\009\007\006\004\009\002\004\007\00b\00a\003\000\008\008\00a\00c\008\002\00a\000\009\002\000\000\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\005\002\002\007\00c\008\00a\00c\000\006\002\003\00c\000\006\005\008\00f\002\000\007\007\005\00c\00a\007\005\00f\003\006\00c\00e\003\005\007\00f\008\00c\00f\00a\008\008\00a\00c\00f\007\00b\00a\005\006\000\000\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\003\00c\004\00a\00e\002\003\00f\001\001\002\00e\006\00a\00c\00b\00d\005\007\00a\003\003\00b\00f\009\000\009\00e\007\003\003\002\001\009\005\001\007\00b\005\004\008\008\00a\00c\008\00c\00f\000\00a\007\000\006\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\007\001\006\002\006\00f\002\001\001\000\003\004\001\008\001\00a\003\008\001\000\009\003\00e\005\007\003\003\00a\008\003\002\001\00c\007\002\00a\00c\002\001\00e\008\008\00a\00c\002\00c\000\00c\00b\004\000\001\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\00b\00c\00b\00f\007\001\009\00b\007\00e\001\00f\00f\00d\00b\002\004\00c\00c\00e\00c\00b\008\00c\008\003\001\007\005\008\003\002\001\002\000\004\007\004\00f\004\008\008\00a\00c\00d\008\00c\00a\003\002\000\000\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\006\00a\00d\00e\00d\003\00c\00e\003\009\004\005\009\009\006\008\005\007\002\00e\006\00e\00d\00c\006\001\004\007\008\003\000\004\00b\006\003\001\00f\008\00a\008\008\008\00a\00c\00b\008\00a\005\006\00f\000\000\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\005\005\003\002\00e\004\00c\005\009\000\00a\009\00a\003\005\00c\002\00d\002\00a\003\005\007\002\00b\007\005\00a\00b\001\005\001\005\003\004\00d\009\001\003\004\008\008\00a\00c\002\003\00c\007\000\00a\000\002\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\00f\00a\008\00d\00e\006\008\006\00b\00c\006\009\00b\009\00e\00b\003\00c\00e\001\008\00e\00f\002\009\000\00e\00d\00f\00c\00a\006\002\00b\00b\00d\003\00f\007\00d\008\008\00a\00c\006\007\00e\00d\00b\00f\000\000\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\009\007\007\006\00a\00d\00a\009\00d\00a\004\004\001\006\00c\009\005\006\007\004\000\002\005\003\006\00f\003\00f\007\006\00c\00e\002\002\00a\005\001\00c\00d\00c\008\008\00a\00c\00c\000\007\001\00f\00b\000\001\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\00d\00a\00a\00c\001\00f\001\00e\00d\007\000\00c\00e\005\004\001\002\006\004\002\00b\002\009\00e\008\005\006\002\002\002\00f\00b\007\007\009\008\003\006\00d\00f\008\008\00a\00c\00c\00d\004\00a\002\007\000\000\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\003\001\00d\00b\000\00c\005\007\00b\007\008\007\00f\001\00e\007\00c\001\00c\005\006\005\00a\00e\002\009\00d\006\000\00d\006\003\004\003\004\00f\001\00a\00a\00a\008\008\00a\00c\009\00a\002\005\004\00d\000\000\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\00c\002\00e\00c\00a\00c\00c\009\004\000\005\003\007\008\008\007\00a\00b\005\009\000\002\00e\000\004\001\008\00d\00c\005\000\00d\00e\006\002\008\006\00b\00a\00a\008\008\00a\00c\007\008\00c\005\002\007\000\000\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\004\007\006\008\005\00a\00a\00d\006\009\007\00e\00d\001\00c\00b\000\00c\00b\00b\008\003\004\00d\008\008\005\005\002\00c\00f\00c\003\00f\009\00c\001\005\006\00d\008\008\00a\00c\000\00f\003\001\003\002\000\001\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\009\002\000\00d\00b\00d\004\005\007\00e\006\009\00f\00c\009\00e\00d\005\006\00a\002\006\002\00a\00d\003\008\00b\006\002\00a\002\00f\006\000\002\00d\00b\002\00c\008\008\00a\00c\008\003\002\00d\003\008\000\003\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\001\00d\00c\004\007\000\007\00f\00a\00d\008\00a\001\007\00f\00b\002\006\000\007\009\008\00c\009\007\00e\00e\002\00a\001\003\001\000\009\007\005\00a\007\008\00a\008\008\00a\00c\003\009\00c\00d\00e\004\000\002\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\007\005\00d\006\006\000\009\00e\00d\00c\005\006\003\00f\00b\005\000\001\00a\004\007\00a\002\004\00f\005\00e\00b\008\00e\002\00b\00a\00d\009\000\009\000\005\000\008\008\00a\00c\00d\002\00f\00b\004\00d\000\001\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\00f\00c\007\002\000\00e\005\008\00c\009\00c\001\004\004\00b\005\002\009\00a\007\009\00e\007\003\000\007\008\00b\002\00d\008\00e\00f\008\000\004\009\002\002\005\008\008\00a\00c\00f\00c\006\00b\007\00d\000\001\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\00d\00b\001\005\003\008\00c\00e\00e\007\00b\009\003\00f\006\00c\00e\002\000\002\009\00a\008\00f\002\00d\000\00c\002\001\005\004\003\00f\001\004\00d\008\004\005\008\008\00a\00c\003\007\006\00b\00a\008\000\006\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\007\00e\009\005\003\004\007\00a\000\001\008\003\008\007\00d\00b\00a\000\002\00e\00c\009\004\00b\00d\006\002\000\00d\007\009\00c\000\003\00d\00a\004\007\00b\006\008\008\00a\00c\00a\005\001\005\005\00a\000\000\000\000\000\000\000\000\000\000\001\009\007\006\00a\009\001\004\004\009\00a\001\002\00b\002\008\00c\001\009\00d\000\003\005\001\00f\00e\004\00f\00f\001\001\00b\00c\00d\003\009\003\00e\008\008\009\002\00b\00a\00f\002\009\002\008\008\00a\00c\000\000\000\000\000\000\000\000")
 (table $0 6 6 funcref)
 (elem $0 (i32.const 1) $assembly/index/logArrayBuffer~anonymous|0 $assembly/utils/utils/concat~anonymous|0 $assembly/utils/box/Box.concat~anonymous|0 $assembly/utils/box/Box.concat~anonymous|1 $assembly/indexer/index/_flush~anonymous|0)
 (export "logArrayBuffer" (func $assembly/index/logArrayBuffer))
 (export "test_b32decode" (func $assembly/index/test_b32decode))
 (export "test_parseBlock" (func $assembly/index/test_parseBlock))
 (export "test_parseWitness" (func $assembly/index/test_parseWitness))
 (export "test_BSTU128" (func $assembly/index/test_BSTU128))
 (export "test_seekLower" (func $assembly/index/test_seekLower))
 (export "test_asmmath" (func $assembly/index/test_asmmath))
 (export "test_unmarkPath" (func $assembly/index/test_unmarkPath))
 (export "test_seekLower2" (func $assembly/index/test_seekLower))
 (export "test_isOrdTag" (func $assembly/index/test_isOrdTag))
 (export "test_seekGreater" (func $assembly/index/test_seekGreater))
 (export "test_maskLowerThan" (func $assembly/index/test_maskLowerThan))
 (export "test_maskGreaterThan" (func $assembly/index/test_maskGreaterThan))
 (export "test_maskLowerThan2" (func $assembly/index/test_maskLowerThan2))
 (export "test_binarySearch" (func $assembly/index/test_binarySearch))
 (export "test_binarySearch2" (func $assembly/index/test_binarySearch2))
 (export "test_binarySearch3" (func $assembly/index/test_binarySearch3))
 (export "test_inscription" (func $assembly/index/test_inscription))
 (export "decodeHex" (func $assembly/index/decodeHex))
 (export "test_indexBrc20" (func $assembly/index/test_indexBrc20))
 (export "test_txid" (func $assembly/index/test_txid))
 (export "test_complement" (func $assembly/index/test_complement))
 (export "memory" (memory $0))
 (start $~start)
 (func $~lib/rt/stub/__alloc (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  local.get $0
  i32.const 1073741820
  i32.gt_u
  if
   i32.const 1600
   i32.const 1664
   i32.const 33
   i32.const 29
   call $~lib/builtins/abort
   unreachable
  end
  global.get $~lib/rt/stub/offset
  local.set $1
  global.get $~lib/rt/stub/offset
  i32.const 4
  i32.add
  local.tee $2
  local.get $0
  i32.const 19
  i32.add
  i32.const -16
  i32.and
  i32.const 4
  i32.sub
  local.tee $0
  i32.add
  local.tee $3
  memory.size
  local.tee $4
  i32.const 16
  i32.shl
  i32.const 15
  i32.add
  i32.const -16
  i32.and
  local.tee $5
  i32.gt_u
  if
   local.get $4
   local.get $3
   local.get $5
   i32.sub
   i32.const 65535
   i32.add
   i32.const -65536
   i32.and
   i32.const 16
   i32.shr_u
   local.tee $5
   local.get $4
   local.get $5
   i32.gt_s
   select
   memory.grow
   i32.const 0
   i32.lt_s
   if
    local.get $5
    memory.grow
    i32.const 0
    i32.lt_s
    if
     unreachable
    end
   end
  end
  local.get $3
  global.set $~lib/rt/stub/offset
  local.get $1
  local.get $0
  i32.store
  local.get $2
 )
 (func $~lib/rt/stub/__new (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (local $3 i32)
  local.get $0
  i32.const 1073741804
  i32.gt_u
  if
   i32.const 1600
   i32.const 1664
   i32.const 86
   i32.const 30
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  i32.const 16
  i32.add
  call $~lib/rt/stub/__alloc
  local.tee $3
  i32.const 4
  i32.sub
  local.tee $2
  i32.const 0
  i32.store offset=4
  local.get $2
  i32.const 0
  i32.store offset=8
  local.get $2
  local.get $1
  i32.store offset=12
  local.get $2
  local.get $0
  i32.store offset=16
  local.get $3
  i32.const 16
  i32.add
 )
 (func $~lib/arraybuffer/ArrayBuffer#constructor (param $0 i32) (result i32)
  (local $1 i32)
  local.get $0
  i32.const 1073741820
  i32.gt_u
  if
   i32.const 2608
   i32.const 2656
   i32.const 52
   i32.const 43
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  i32.const 1
  call $~lib/rt/stub/__new
  local.tee $1
  i32.const 0
  local.get $0
  memory.fill
  local.get $1
 )
 (func $"~lib/map/Map<~lib/string/String,~lib/arraybuffer/ArrayBuffer>#constructor" (result i32)
  (local $0 i32)
  i32.const 24
  i32.const 7
  call $~lib/rt/stub/__new
  local.tee $0
  i32.const 16
  call $~lib/arraybuffer/ArrayBuffer#constructor
  i32.store
  local.get $0
  i32.const 3
  i32.store offset=4
  local.get $0
  i32.const 48
  call $~lib/arraybuffer/ArrayBuffer#constructor
  i32.store offset=8
  local.get $0
  i32.const 4
  i32.store offset=12
  local.get $0
  i32.const 0
  i32.store offset=16
  local.get $0
  i32.const 0
  i32.store offset=20
  local.get $0
 )
 (func $~lib/string/String.UTF8.encode@varargs (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  block $2of2
   block $0of2
    block $outOfRange
     global.get $~argumentsLength
     i32.const 1
     i32.sub
     br_table $0of2 $2of2 $2of2 $outOfRange
    end
    unreachable
   end
   i32.const 0
   local.set $1
  end
  local.get $0
  local.set $3
  local.get $0
  i32.const 20
  i32.sub
  i32.load offset=16
  local.get $0
  i32.add
  local.set $4
  local.get $1
  i32.const 0
  i32.ne
  local.set $2
  loop $while-continue|0
   local.get $3
   local.get $4
   i32.lt_u
   if
    block $while-break|0
     local.get $3
     i32.load16_u
     local.tee $5
     i32.const 128
     i32.lt_u
     if (result i32)
      local.get $1
      local.get $5
      i32.eqz
      i32.and
      br_if $while-break|0
      local.get $2
      i32.const 1
      i32.add
     else
      local.get $5
      i32.const 2048
      i32.lt_u
      if (result i32)
       local.get $2
       i32.const 2
       i32.add
      else
       local.get $5
       i32.const 64512
       i32.and
       i32.const 55296
       i32.eq
       local.get $3
       i32.const 2
       i32.add
       local.get $4
       i32.lt_u
       i32.and
       if
        local.get $3
        i32.load16_u offset=2
        i32.const 64512
        i32.and
        i32.const 56320
        i32.eq
        if
         local.get $2
         i32.const 4
         i32.add
         local.set $2
         local.get $3
         i32.const 4
         i32.add
         local.set $3
         br $while-continue|0
        end
       end
       local.get $2
       i32.const 3
       i32.add
      end
     end
     local.set $2
     local.get $3
     i32.const 2
     i32.add
     local.set $3
     br $while-continue|0
    end
   end
  end
  local.get $2
  i32.const 1
  call $~lib/rt/stub/__new
  local.set $3
  local.get $0
  local.tee $2
  local.get $0
  i32.const 20
  i32.sub
  i32.load offset=16
  i32.const -2
  i32.and
  i32.add
  local.set $5
  local.get $3
  local.set $0
  block $__inlined_func$~lib/string/String.UTF8.encodeUnsafe
   loop $while-continue|00
    local.get $2
    local.get $5
    i32.lt_u
    if
     local.get $2
     i32.load16_u
     local.tee $4
     i32.const 128
     i32.lt_u
     if
      local.get $0
      local.get $4
      i32.store8
      local.get $0
      i32.const 1
      i32.add
      local.set $0
      local.get $1
      local.get $4
      i32.eqz
      i32.and
      br_if $__inlined_func$~lib/string/String.UTF8.encodeUnsafe
     else
      local.get $4
      i32.const 2048
      i32.lt_u
      if (result i32)
       local.get $0
       local.get $4
       i32.const 6
       i32.shr_u
       i32.const 192
       i32.or
       local.get $4
       i32.const 63
       i32.and
       i32.const 128
       i32.or
       i32.const 8
       i32.shl
       i32.or
       i32.store16
       local.get $0
       i32.const 2
       i32.add
      else
       local.get $4
       i32.const 63488
       i32.and
       i32.const 55296
       i32.eq
       if
        local.get $4
        i32.const 56320
        i32.lt_u
        local.get $2
        i32.const 2
        i32.add
        local.get $5
        i32.lt_u
        i32.and
        if
         local.get $2
         i32.load16_u offset=2
         local.tee $6
         i32.const 64512
         i32.and
         i32.const 56320
         i32.eq
         if
          local.get $0
          local.get $4
          i32.const 1023
          i32.and
          i32.const 10
          i32.shl
          i32.const 65536
          i32.add
          local.get $6
          i32.const 1023
          i32.and
          i32.or
          local.tee $4
          i32.const 63
          i32.and
          i32.const 128
          i32.or
          i32.const 24
          i32.shl
          local.get $4
          i32.const 6
          i32.shr_u
          i32.const 63
          i32.and
          i32.const 128
          i32.or
          i32.const 16
          i32.shl
          i32.or
          local.get $4
          i32.const 12
          i32.shr_u
          i32.const 63
          i32.and
          i32.const 128
          i32.or
          i32.const 8
          i32.shl
          i32.or
          local.get $4
          i32.const 18
          i32.shr_u
          i32.const 240
          i32.or
          i32.or
          i32.store
          local.get $0
          i32.const 4
          i32.add
          local.set $0
          local.get $2
          i32.const 4
          i32.add
          local.set $2
          br $while-continue|00
         end
        end
       end
       local.get $0
       local.get $4
       i32.const 12
       i32.shr_u
       i32.const 224
       i32.or
       local.get $4
       i32.const 6
       i32.shr_u
       i32.const 63
       i32.and
       i32.const 128
       i32.or
       i32.const 8
       i32.shl
       i32.or
       i32.store16
       local.get $0
       local.get $4
       i32.const 63
       i32.and
       i32.const 128
       i32.or
       i32.store8 offset=2
       local.get $0
       i32.const 3
       i32.add
      end
      local.set $0
     end
     local.get $2
     i32.const 2
     i32.add
     local.set $2
     br $while-continue|00
    end
   end
   local.get $1
   if
    local.get $0
    i32.const 0
    i32.store8
   end
  end
  local.get $3
 )
 (func $~lib/typedarray/Uint8Array.wrap@varargs (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  block $2of2
   block $1of2
    block $outOfRange
     global.get $~argumentsLength
     i32.const 1
     i32.sub
     br_table $1of2 $1of2 $2of2 $outOfRange
    end
    unreachable
   end
   i32.const -1
   local.set $1
  end
  local.get $0
  i32.const 20
  i32.sub
  i32.load offset=16
  local.set $2
  local.get $1
  i32.const 0
  i32.lt_s
  if
   local.get $1
   i32.const -1
   i32.eq
   if (result i32)
    local.get $2
   else
    i32.const 2608
    i32.const 3472
    i32.const 1869
    i32.const 7
    call $~lib/builtins/abort
    unreachable
   end
   local.set $1
  else
   local.get $1
   local.get $2
   i32.gt_s
   if
    i32.const 2608
    i32.const 3472
    i32.const 1874
    i32.const 7
    call $~lib/builtins/abort
    unreachable
   end
  end
  i32.const 12
  i32.const 10
  call $~lib/rt/stub/__new
  local.tee $2
  local.get $0
  i32.store
  local.get $2
  local.get $1
  i32.store offset=8
  local.get $2
  local.get $0
  i32.store offset=4
  local.get $2
 )
 (func $~lib/util/number/utoa32_dec_lut (param $0 i32) (param $1 i32) (param $2 i32)
  (local $3 i32)
  loop $while-continue|0
   local.get $1
   i32.const 10000
   i32.ge_u
   if
    local.get $1
    i32.const 10000
    i32.rem_u
    local.set $3
    local.get $1
    i32.const 10000
    i32.div_u
    local.set $1
    local.get $0
    local.get $2
    i32.const 4
    i32.sub
    local.tee $2
    i32.const 1
    i32.shl
    i32.add
    local.get $3
    i32.const 100
    i32.div_u
    i32.const 2
    i32.shl
    i32.const 3820
    i32.add
    i64.load32_u
    local.get $3
    i32.const 100
    i32.rem_u
    i32.const 2
    i32.shl
    i32.const 3820
    i32.add
    i64.load32_u
    i64.const 32
    i64.shl
    i64.or
    i64.store
    br $while-continue|0
   end
  end
  local.get $1
  i32.const 100
  i32.ge_u
  if
   local.get $0
   local.get $2
   i32.const 2
   i32.sub
   local.tee $2
   i32.const 1
   i32.shl
   i32.add
   local.get $1
   i32.const 100
   i32.rem_u
   i32.const 2
   i32.shl
   i32.const 3820
   i32.add
   i32.load
   i32.store
   local.get $1
   i32.const 100
   i32.div_u
   local.set $1
  end
  local.get $1
  i32.const 10
  i32.ge_u
  if
   local.get $0
   local.get $2
   i32.const 2
   i32.sub
   i32.const 1
   i32.shl
   i32.add
   local.get $1
   i32.const 2
   i32.shl
   i32.const 3820
   i32.add
   i32.load
   i32.store
  else
   local.get $0
   local.get $2
   i32.const 1
   i32.sub
   i32.const 1
   i32.shl
   i32.add
   local.get $1
   i32.const 48
   i32.add
   i32.store16
  end
 )
 (func $~lib/util/number/utoa64_any_core (param $0 i32) (param $1 i64) (param $2 i32) (param $3 i32)
  (local $4 i64)
  (local $5 i64)
  local.get $3
  i64.extend_i32_s
  local.set $5
  local.get $3
  local.get $3
  i32.const 1
  i32.sub
  i32.and
  if
   loop $do-loop|1
    local.get $0
    local.get $2
    i32.const 1
    i32.sub
    local.tee $2
    i32.const 1
    i32.shl
    i32.add
    local.get $1
    local.get $1
    local.get $5
    i64.div_u
    local.tee $1
    local.get $5
    i64.mul
    i64.sub
    i32.wrap_i64
    i32.const 1
    i32.shl
    i32.const 5296
    i32.add
    i32.load16_u
    i32.store16
    local.get $1
    i64.const 0
    i64.ne
    br_if $do-loop|1
   end
  else
   local.get $3
   i32.ctz
   i32.const 7
   i32.and
   i64.extend_i32_s
   local.set $4
   local.get $5
   i64.const 1
   i64.sub
   local.set $5
   loop $do-loop|0
    local.get $0
    local.get $2
    i32.const 1
    i32.sub
    local.tee $2
    i32.const 1
    i32.shl
    i32.add
    local.get $1
    local.get $5
    i64.and
    i32.wrap_i64
    i32.const 1
    i32.shl
    i32.const 5296
    i32.add
    i32.load16_u
    i32.store16
    local.get $1
    local.get $4
    i64.shr_u
    local.tee $1
    i64.const 0
    i64.ne
    br_if $do-loop|0
   end
  end
 )
 (func $~lib/util/number/itoa32 (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  local.get $0
  i32.eqz
  if
   i32.const 3808
   return
  end
  i32.const 0
  local.get $0
  i32.sub
  local.get $0
  local.get $0
  i32.const 31
  i32.shr_u
  i32.const 1
  i32.shl
  local.tee $0
  select
  local.tee $3
  i32.const 100000
  i32.lt_u
  if (result i32)
   local.get $3
   i32.const 100
   i32.lt_u
   if (result i32)
    local.get $3
    i32.const 10
    i32.ge_u
    i32.const 1
    i32.add
   else
    local.get $3
    i32.const 10000
    i32.ge_u
    i32.const 3
    i32.add
    local.get $3
    i32.const 1000
    i32.ge_u
    i32.add
   end
  else
   local.get $3
   i32.const 10000000
   i32.lt_u
   if (result i32)
    local.get $3
    i32.const 1000000
    i32.ge_u
    i32.const 6
    i32.add
   else
    local.get $3
    i32.const 1000000000
    i32.ge_u
    i32.const 8
    i32.add
    local.get $3
    i32.const 100000000
    i32.ge_u
    i32.add
   end
  end
  local.tee $2
  i32.const 1
  i32.shl
  local.get $0
  i32.add
  i32.const 2
  call $~lib/rt/stub/__new
  local.tee $1
  local.get $0
  i32.add
  local.get $3
  local.get $2
  call $~lib/util/number/utoa32_dec_lut
  local.get $0
  if
   local.get $1
   i32.const 45
   i32.store16
  end
  local.get $1
 )
 (func $~lib/string/String.__concat (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  i32.const 5392
  local.set $2
  local.get $0
  i32.const 20
  i32.sub
  i32.load offset=16
  i32.const -2
  i32.and
  local.tee $3
  local.get $1
  i32.const 20
  i32.sub
  i32.load offset=16
  i32.const -2
  i32.and
  local.tee $4
  i32.add
  local.tee $5
  if
   local.get $5
   i32.const 2
   call $~lib/rt/stub/__new
   local.tee $2
   local.get $0
   local.get $3
   memory.copy
   local.get $2
   local.get $3
   i32.add
   local.get $1
   local.get $4
   memory.copy
  end
  local.get $2
 )
 (func $~lib/util/number/utoa32 (param $0 i32) (param $1 i32) (result i32)
  (local $2 i64)
  (local $3 i64)
  (local $4 i32)
  (local $5 i64)
  (local $6 i32)
  local.get $1
  i32.const 2
  i32.lt_s
  local.get $1
  i32.const 36
  i32.gt_s
  i32.or
  if
   i32.const 3616
   i32.const 3744
   i32.const 350
   i32.const 5
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  i32.eqz
  if
   i32.const 3808
   return
  end
  local.get $1
  i32.const 10
  i32.eq
  if
   local.get $0
   i32.const 100000
   i32.lt_u
   if (result i32)
    local.get $0
    i32.const 100
    i32.lt_u
    if (result i32)
     local.get $0
     i32.const 10
     i32.ge_u
     i32.const 1
     i32.add
    else
     local.get $0
     i32.const 10000
     i32.ge_u
     i32.const 3
     i32.add
     local.get $0
     i32.const 1000
     i32.ge_u
     i32.add
    end
   else
    local.get $0
    i32.const 10000000
    i32.lt_u
    if (result i32)
     local.get $0
     i32.const 1000000
     i32.ge_u
     i32.const 6
     i32.add
    else
     local.get $0
     i32.const 1000000000
     i32.ge_u
     i32.const 8
     i32.add
     local.get $0
     i32.const 100000000
     i32.ge_u
     i32.add
    end
   end
   local.tee $1
   i32.const 1
   i32.shl
   i32.const 2
   call $~lib/rt/stub/__new
   local.tee $4
   local.get $0
   local.get $1
   call $~lib/util/number/utoa32_dec_lut
  else
   local.get $1
   i32.const 16
   i32.eq
   if
    i32.const 31
    local.get $0
    i32.clz
    i32.sub
    i32.const 2
    i32.shr_s
    i32.const 1
    i32.add
    local.tee $1
    i32.const 1
    i32.shl
    i32.const 2
    call $~lib/rt/stub/__new
    local.set $4
    local.get $0
    i64.extend_i32_u
    local.set $2
    local.get $1
    local.set $0
    loop $while-continue|0
     local.get $0
     i32.const 2
     i32.ge_u
     if
      local.get $4
      local.get $0
      i32.const 2
      i32.sub
      local.tee $0
      i32.const 1
      i32.shl
      i32.add
      local.get $2
      i32.wrap_i64
      i32.const 255
      i32.and
      i32.const 2
      i32.shl
      i32.const 4240
      i32.add
      i32.load
      i32.store
      local.get $2
      i64.const 8
      i64.shr_u
      local.set $2
      br $while-continue|0
     end
    end
    local.get $0
    i32.const 1
    i32.and
    if
     local.get $4
     local.get $2
     i32.wrap_i64
     i32.const 6
     i32.shl
     i32.const 4240
     i32.add
     i32.load16_u
     i32.store16
    end
   else
    block $__inlined_func$~lib/util/number/ulog_base$33 (result i32)
     local.get $0
     i64.extend_i32_u
     local.set $3
     local.get $1
     i32.popcnt
     i32.const 1
     i32.eq
     if
      i32.const 63
      local.get $3
      i64.clz
      i32.wrap_i64
      i32.sub
      i32.const 31
      local.get $1
      i32.clz
      i32.sub
      i32.div_u
      i32.const 1
      i32.add
      br $__inlined_func$~lib/util/number/ulog_base$33
     end
     local.get $1
     i64.extend_i32_s
     local.tee $5
     local.set $2
     i32.const 1
     local.set $4
     loop $while-continue|01
      local.get $2
      local.get $3
      i64.le_u
      if
       local.get $3
       local.get $2
       i64.div_u
       local.set $3
       local.get $2
       local.get $2
       i64.mul
       local.set $2
       local.get $4
       i32.const 1
       i32.shl
       local.set $4
       br $while-continue|01
      end
     end
     loop $while-continue|1
      local.get $3
      i64.const 0
      i64.ne
      if
       local.get $3
       local.get $5
       i64.div_u
       local.set $3
       local.get $4
       i32.const 1
       i32.add
       local.set $4
       br $while-continue|1
      end
     end
     local.get $4
     i32.const 1
     i32.sub
    end
    local.tee $6
    i32.const 1
    i32.shl
    i32.const 2
    call $~lib/rt/stub/__new
    local.tee $4
    local.get $0
    i64.extend_i32_u
    local.get $6
    local.get $1
    call $~lib/util/number/utoa64_any_core
   end
  end
  local.get $4
 )
 (func $assembly/index/logArrayBuffer~anonymous|0 (param $0 i32) (param $1 i32) (param $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  local.get $1
  call $~lib/util/number/itoa32
  local.set $7
  local.get $0
  i32.const 255
  i32.and
  i32.const 16
  call $~lib/util/number/utoa32
  local.tee $1
  i32.const 20
  i32.sub
  i32.load offset=16
  i32.const -2
  i32.and
  local.set $9
  i32.const 3804
  i32.load
  i32.const -2
  i32.and
  local.tee $10
  i32.eqz
  local.get $9
  i32.const 4
  i32.gt_u
  i32.or
  i32.eqz
  if
   i32.const 4
   i32.const 2
   call $~lib/rt/stub/__new
   local.set $2
   i32.const 4
   local.get $9
   i32.sub
   local.tee $11
   local.get $10
   i32.gt_u
   if
    local.get $11
    local.get $11
    i32.const 2
    i32.sub
    local.get $10
    i32.div_u
    local.get $10
    i32.mul
    local.tee $12
    i32.sub
    local.set $8
    loop $while-continue|0
     local.get $6
     local.get $12
     i32.lt_u
     if
      local.get $2
      local.get $6
      i32.add
      i32.const 3808
      local.get $10
      memory.copy
      local.get $6
      local.get $10
      i32.add
      local.set $6
      br $while-continue|0
     end
    end
    local.get $2
    local.get $12
    i32.add
    i32.const 3808
    local.get $8
    memory.copy
   else
    local.get $2
    i32.const 3808
    local.get $11
    memory.copy
   end
   local.get $2
   local.get $11
   i32.add
   local.get $1
   local.get $9
   memory.copy
   local.get $2
   local.set $1
  end
  i32.const 1
  global.set $~argumentsLength
  i32.const 2
  i32.const 2
  call $~lib/rt/stub/__new
  local.tee $2
  local.get $0
  i32.const 255
  i32.and
  i32.store16
  i32.const 5556
  local.get $7
  i32.store
  i32.const 5564
  local.get $1
  i32.store
  i32.const 5572
  local.get $2
  i32.store
  i32.const 0
  local.set $0
  i32.const 5392
  local.set $2
  block $__inlined_func$~lib/util/string/joinStringArray$38
   i32.const 5548
   i32.load
   i32.const 2
   i32.shr_u
   local.tee $1
   i32.const 1
   i32.sub
   local.tee $6
   i32.const 0
   i32.lt_s
   br_if $__inlined_func$~lib/util/string/joinStringArray$38
   local.get $6
   i32.eqz
   if
    i32.const 5552
    i32.load
    local.tee $2
    i32.eqz
    if
     i32.const 5392
     local.set $2
    end
    br $__inlined_func$~lib/util/string/joinStringArray$38
   end
   loop $for-loop|0
    local.get $1
    local.get $4
    i32.gt_s
    if
     local.get $4
     i32.const 2
     i32.shl
     i32.const 5552
     i32.add
     i32.load
     local.tee $2
     if
      local.get $0
      local.get $2
      i32.const 20
      i32.sub
      i32.load offset=16
      i32.const 1
      i32.shr_u
      i32.add
      local.set $0
     end
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $for-loop|0
    end
   end
   local.get $0
   i32.const 5388
   i32.load
   i32.const 1
   i32.shr_u
   local.tee $0
   local.get $6
   i32.mul
   i32.add
   i32.const 1
   i32.shl
   i32.const 2
   call $~lib/rt/stub/__new
   local.set $2
   loop $for-loop|1
    local.get $5
    local.get $6
    i32.lt_s
    if
     local.get $5
     i32.const 2
     i32.shl
     i32.const 5552
     i32.add
     i32.load
     local.tee $1
     if
      local.get $2
      local.get $3
      i32.const 1
      i32.shl
      i32.add
      local.get $1
      local.get $1
      i32.const 20
      i32.sub
      i32.load offset=16
      i32.const 1
      i32.shr_u
      local.tee $1
      i32.const 1
      i32.shl
      memory.copy
      local.get $1
      local.get $3
      i32.add
      local.set $3
     end
     local.get $0
     if
      local.get $2
      local.get $3
      i32.const 1
      i32.shl
      i32.add
      i32.const 5392
      local.get $0
      i32.const 1
      i32.shl
      memory.copy
      local.get $0
      local.get $3
      i32.add
      local.set $3
     end
     local.get $5
     i32.const 1
     i32.add
     local.set $5
     br $for-loop|1
    end
   end
   local.get $6
   i32.const 2
   i32.shl
   i32.const 5552
   i32.add
   i32.load
   local.tee $0
   if
    local.get $2
    local.get $3
    i32.const 1
    i32.shl
    i32.add
    local.get $0
    local.get $0
    i32.const 20
    i32.sub
    i32.load offset=16
    i32.const -2
    i32.and
    memory.copy
   end
  end
  i32.const 2
  global.set $~argumentsLength
  local.get $2
  i32.const 1
  call $~lib/string/String.UTF8.encode@varargs
  call $assembly/utils/logging/__log
 )
 (func $assembly/index/logArrayBuffer (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  i32.const 1
  global.set $~argumentsLength
  i32.const 3536
  local.get $0
  call $~lib/typedarray/Uint8Array.wrap@varargs
  local.tee $2
  i32.load offset=8
  call $~lib/util/number/itoa32
  call $~lib/string/String.__concat
  local.set $0
  i32.const 2
  global.set $~argumentsLength
  local.get $0
  i32.const 1
  call $~lib/string/String.UTF8.encode@varargs
  call $assembly/utils/logging/__log
  local.get $2
  i32.load offset=4
  local.set $3
  local.get $2
  i32.load offset=8
  local.set $4
  loop $for-loop|0
   local.get $1
   local.get $4
   i32.lt_s
   if
    local.get $1
    local.get $3
    i32.add
    i32.load8_u
    local.set $0
    i32.const 3
    global.set $~argumentsLength
    local.get $0
    local.get $1
    local.get $2
    i32.const 5600
    i32.load
    call_indirect (type $3)
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|0
   end
  end
 )
 (func $~lib/arraybuffer/ArrayBufferView#constructor (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  local.get $0
  i32.eqz
  if
   i32.const 12
   i32.const 3
   call $~lib/rt/stub/__new
   local.set $0
  end
  local.get $0
  i32.const 0
  i32.store
  local.get $0
  i32.const 0
  i32.store offset=4
  local.get $0
  i32.const 0
  i32.store offset=8
  local.get $1
  i32.const 1073741820
  local.get $2
  i32.shr_u
  i32.gt_u
  if
   i32.const 2608
   i32.const 2656
   i32.const 19
   i32.const 57
   call $~lib/builtins/abort
   unreachable
  end
  local.get $1
  local.get $2
  i32.shl
  local.tee $1
  i32.const 1
  call $~lib/rt/stub/__new
  local.tee $2
  i32.const 0
  local.get $1
  memory.fill
  local.get $0
  local.get $2
  i32.store
  local.get $0
  local.get $2
  i32.store offset=4
  local.get $0
  local.get $1
  i32.store offset=8
  local.get $0
 )
 (func $~lib/typedarray/Int32Array#__set (param $0 i32) (param $1 i32) (param $2 i32)
  local.get $1
  local.get $0
  i32.load offset=8
  i32.const 2
  i32.shr_u
  i32.ge_u
  if
   i32.const 3344
   i32.const 3472
   i32.const 747
   i32.const 64
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  i32.load offset=4
  local.get $1
  i32.const 2
  i32.shl
  i32.add
  local.get $2
  i32.store
 )
 (func $~lib/fast-sha256-as/assembly/sha256/Hash#reset (param $0 i32)
  local.get $0
  i32.load offset=8
  i32.const 0
  i32.const 1779033703
  call $~lib/typedarray/Int32Array#__set
  local.get $0
  i32.load offset=8
  i32.const 1
  i32.const -1150833019
  call $~lib/typedarray/Int32Array#__set
  local.get $0
  i32.load offset=8
  i32.const 2
  i32.const 1013904242
  call $~lib/typedarray/Int32Array#__set
  local.get $0
  i32.load offset=8
  i32.const 3
  i32.const -1521486534
  call $~lib/typedarray/Int32Array#__set
  local.get $0
  i32.load offset=8
  i32.const 4
  i32.const 1359893119
  call $~lib/typedarray/Int32Array#__set
  local.get $0
  i32.load offset=8
  i32.const 5
  i32.const -1694144372
  call $~lib/typedarray/Int32Array#__set
  local.get $0
  i32.load offset=8
  i32.const 6
  i32.const 528734635
  call $~lib/typedarray/Int32Array#__set
  local.get $0
  i32.load offset=8
  i32.const 7
  i32.const 1541459225
  call $~lib/typedarray/Int32Array#__set
  local.get $0
  i32.const 0
  i32.store offset=20
  local.get $0
  i32.const 0
  i32.store offset=24
  local.get $0
  i32.const 0
  i32.store8 offset=28
 )
 (func $~lib/typedarray/Uint8Array#__get (param $0 i32) (param $1 i32) (result i32)
  local.get $1
  local.get $0
  i32.load offset=8
  i32.ge_u
  if
   i32.const 3344
   i32.const 3472
   i32.const 167
   i32.const 45
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  i32.load offset=4
  local.get $1
  i32.add
  i32.load8_u
 )
 (func $~lib/typedarray/Uint8Array#__set (param $0 i32) (param $1 i32) (param $2 i32)
  local.get $1
  local.get $0
  i32.load offset=8
  i32.ge_u
  if
   i32.const 3344
   i32.const 3472
   i32.const 178
   i32.const 45
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  i32.load offset=4
  local.get $1
  i32.add
  local.get $2
  i32.store8
 )
 (func $~lib/typedarray/Int32Array#__get (param $0 i32) (param $1 i32) (result i32)
  local.get $1
  local.get $0
  i32.load offset=8
  i32.const 2
  i32.shr_u
  i32.ge_u
  if
   i32.const 3344
   i32.const 3472
   i32.const 736
   i32.const 64
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  i32.load offset=4
  local.get $1
  i32.const 2
  i32.shl
  i32.add
  i32.load
 )
 (func $~lib/fast-sha256-as/assembly/sha256/hashBlocks (param $0 i32) (param $1 i32) (param $2 i32) (param $3 i32) (param $4 i32) (result i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  (local $13 i32)
  (local $14 i32)
  (local $15 i32)
  loop $while-continue|0
   local.get $4
   i32.const 64
   i32.ge_s
   if
    local.get $1
    i32.const 0
    call $~lib/typedarray/Int32Array#__get
    local.set $9
    local.get $1
    i32.const 1
    call $~lib/typedarray/Int32Array#__get
    local.set $5
    local.get $1
    i32.const 2
    call $~lib/typedarray/Int32Array#__get
    local.set $6
    local.get $1
    i32.const 3
    call $~lib/typedarray/Int32Array#__get
    local.set $11
    local.get $1
    i32.const 4
    call $~lib/typedarray/Int32Array#__get
    local.set $10
    local.get $1
    i32.const 5
    call $~lib/typedarray/Int32Array#__get
    local.set $7
    local.get $1
    i32.const 6
    call $~lib/typedarray/Int32Array#__get
    local.set $8
    local.get $1
    i32.const 7
    call $~lib/typedarray/Int32Array#__get
    local.set $12
    i32.const 0
    local.set $13
    loop $for-loop|1
     local.get $13
     i32.const 16
     i32.lt_s
     if
      local.get $0
      local.get $13
      local.get $2
      local.get $3
      local.get $13
      i32.const 2
      i32.shl
      i32.add
      local.tee $14
      call $~lib/typedarray/Uint8Array#__get
      i32.const 255
      i32.and
      i32.const 24
      i32.shl
      local.get $2
      local.get $14
      i32.const 1
      i32.add
      call $~lib/typedarray/Uint8Array#__get
      i32.const 255
      i32.and
      i32.const 16
      i32.shl
      i32.or
      local.get $2
      local.get $14
      i32.const 2
      i32.add
      call $~lib/typedarray/Uint8Array#__get
      i32.const 255
      i32.and
      i32.const 8
      i32.shl
      i32.or
      local.get $2
      local.get $14
      i32.const 3
      i32.add
      call $~lib/typedarray/Uint8Array#__get
      i32.const 255
      i32.and
      i32.or
      call $~lib/typedarray/Int32Array#__set
      local.get $13
      i32.const 1
      i32.add
      local.set $13
      br $for-loop|1
     end
    end
    i32.const 16
    local.set $13
    loop $for-loop|2
     local.get $13
     i32.const 64
     i32.lt_s
     if
      local.get $0
      local.get $13
      i32.const 2
      i32.sub
      call $~lib/typedarray/Int32Array#__get
      local.set $14
      local.get $0
      local.get $13
      i32.const 15
      i32.sub
      call $~lib/typedarray/Int32Array#__get
      local.set $15
      local.get $0
      local.get $13
      local.get $0
      local.get $13
      i32.const 7
      i32.sub
      call $~lib/typedarray/Int32Array#__get
      local.get $14
      i32.const 15
      i32.shl
      local.get $14
      i32.const 17
      i32.shr_u
      i32.or
      local.get $14
      i32.const 13
      i32.shl
      local.get $14
      i32.const 19
      i32.shr_u
      i32.or
      i32.xor
      local.get $14
      i32.const 10
      i32.shr_u
      i32.xor
      i32.add
      local.get $0
      local.get $13
      i32.const 16
      i32.sub
      call $~lib/typedarray/Int32Array#__get
      local.get $15
      i32.const 25
      i32.shl
      local.get $15
      i32.const 7
      i32.shr_u
      i32.or
      local.get $15
      i32.const 14
      i32.shl
      local.get $15
      i32.const 18
      i32.shr_u
      i32.or
      i32.xor
      local.get $15
      i32.const 3
      i32.shr_u
      i32.xor
      i32.add
      i32.add
      call $~lib/typedarray/Int32Array#__set
      local.get $13
      i32.const 1
      i32.add
      local.set $13
      br $for-loop|2
     end
    end
    i32.const 0
    local.set $13
    loop $for-loop|3
     local.get $13
     i32.const 64
     i32.lt_s
     if
      local.get $13
      i32.const 2572
      i32.load
      i32.ge_u
      if
       i32.const 3344
       i32.const 5856
       i32.const 114
       i32.const 42
       call $~lib/builtins/abort
       unreachable
      end
      local.get $10
      i32.const 7
      i32.shl
      local.get $10
      i32.const 25
      i32.shr_u
      i32.or
      local.get $10
      i32.const 26
      i32.shl
      local.get $10
      i32.const 6
      i32.shr_u
      i32.or
      local.get $10
      i32.const 21
      i32.shl
      local.get $10
      i32.const 11
      i32.shr_u
      i32.or
      i32.xor
      i32.xor
      local.get $7
      local.get $10
      i32.and
      local.get $10
      i32.const -1
      i32.xor
      local.get $8
      i32.and
      i32.xor
      i32.add
      local.get $12
      i32.const 2564
      i32.load
      local.get $13
      i32.const 2
      i32.shl
      i32.add
      i32.load
      local.get $0
      local.get $13
      call $~lib/typedarray/Int32Array#__get
      i32.add
      i32.add
      i32.add
      local.set $14
      local.get $9
      i32.const 10
      i32.shl
      local.get $9
      i32.const 22
      i32.shr_u
      i32.or
      local.get $9
      i32.const 30
      i32.shl
      local.get $9
      i32.const 2
      i32.shr_u
      i32.or
      local.get $9
      i32.const 19
      i32.shl
      local.get $9
      i32.const 13
      i32.shr_u
      i32.or
      i32.xor
      i32.xor
      local.get $5
      local.get $6
      i32.and
      local.get $5
      local.get $9
      i32.and
      local.get $6
      local.get $9
      i32.and
      i32.xor
      i32.xor
      i32.add
      local.set $15
      local.get $8
      local.set $12
      local.get $7
      local.set $8
      local.get $10
      local.set $7
      local.get $11
      local.get $14
      i32.add
      local.set $10
      local.get $6
      local.set $11
      local.get $5
      local.set $6
      local.get $9
      local.set $5
      local.get $14
      local.get $15
      i32.add
      local.set $9
      local.get $13
      i32.const 1
      i32.add
      local.set $13
      br $for-loop|3
     end
    end
    local.get $1
    i32.const 0
    local.get $1
    i32.const 0
    call $~lib/typedarray/Int32Array#__get
    local.get $9
    i32.add
    call $~lib/typedarray/Int32Array#__set
    local.get $1
    i32.const 1
    local.get $1
    i32.const 1
    call $~lib/typedarray/Int32Array#__get
    local.get $5
    i32.add
    call $~lib/typedarray/Int32Array#__set
    local.get $1
    i32.const 2
    local.get $1
    i32.const 2
    call $~lib/typedarray/Int32Array#__get
    local.get $6
    i32.add
    call $~lib/typedarray/Int32Array#__set
    local.get $1
    i32.const 3
    local.get $1
    i32.const 3
    call $~lib/typedarray/Int32Array#__get
    local.get $11
    i32.add
    call $~lib/typedarray/Int32Array#__set
    local.get $1
    i32.const 4
    local.get $1
    i32.const 4
    call $~lib/typedarray/Int32Array#__get
    local.get $10
    i32.add
    call $~lib/typedarray/Int32Array#__set
    local.get $1
    i32.const 5
    local.get $1
    i32.const 5
    call $~lib/typedarray/Int32Array#__get
    local.get $7
    i32.add
    call $~lib/typedarray/Int32Array#__set
    local.get $1
    i32.const 6
    local.get $1
    i32.const 6
    call $~lib/typedarray/Int32Array#__get
    local.get $8
    i32.add
    call $~lib/typedarray/Int32Array#__set
    local.get $1
    i32.const 7
    local.get $1
    i32.const 7
    call $~lib/typedarray/Int32Array#__get
    local.get $12
    i32.add
    call $~lib/typedarray/Int32Array#__set
    local.get $3
    i32.const -64
    i32.sub
    local.set $3
    local.get $4
    i32.const -64
    i32.add
    local.set $4
    br $while-continue|0
   end
  end
  local.get $3
 )
 (func $~lib/fast-sha256-as/assembly/sha256/Hash#finish (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  local.get $0
  i32.load8_u offset=28
  i32.eqz
  if
   local.get $0
   i32.load offset=24
   local.tee $3
   i32.const 536870912
   i32.div_s
   local.set $4
   local.get $3
   i32.const 3
   i32.shl
   local.set $5
   i32.const 64
   i32.const 128
   local.get $3
   i32.const 64
   i32.rem_s
   i32.const 56
   i32.lt_s
   select
   local.set $6
   local.get $0
   i32.load offset=16
   local.get $0
   i32.load offset=20
   local.tee $3
   i32.const 128
   call $~lib/typedarray/Uint8Array#__set
   local.get $3
   i32.const 1
   i32.add
   local.set $3
   loop $for-loop|0
    local.get $3
    local.get $6
    i32.const 8
    i32.sub
    i32.lt_s
    if
     local.get $0
     i32.load offset=16
     local.get $3
     i32.const 0
     call $~lib/typedarray/Uint8Array#__set
     local.get $3
     i32.const 1
     i32.add
     local.set $3
     br $for-loop|0
    end
   end
   local.get $0
   i32.load offset=16
   local.get $6
   i32.const 8
   i32.sub
   local.get $4
   i32.const 24
   i32.shr_u
   call $~lib/typedarray/Uint8Array#__set
   local.get $0
   i32.load offset=16
   local.get $6
   i32.const 7
   i32.sub
   local.get $4
   i32.const 16
   i32.shr_u
   i32.const 255
   i32.and
   call $~lib/typedarray/Uint8Array#__set
   local.get $0
   i32.load offset=16
   local.get $6
   i32.const 6
   i32.sub
   local.get $4
   i32.const 8
   i32.shr_u
   i32.const 255
   i32.and
   call $~lib/typedarray/Uint8Array#__set
   local.get $0
   i32.load offset=16
   local.get $6
   i32.const 5
   i32.sub
   local.get $4
   i32.const 255
   i32.and
   call $~lib/typedarray/Uint8Array#__set
   local.get $0
   i32.load offset=16
   local.get $6
   i32.const 4
   i32.sub
   local.get $5
   i32.const 24
   i32.shr_u
   call $~lib/typedarray/Uint8Array#__set
   local.get $0
   i32.load offset=16
   local.get $6
   i32.const 3
   i32.sub
   local.get $5
   i32.const 16
   i32.shr_u
   i32.const 255
   i32.and
   call $~lib/typedarray/Uint8Array#__set
   local.get $0
   i32.load offset=16
   local.get $6
   i32.const 2
   i32.sub
   local.get $5
   i32.const 8
   i32.shr_u
   i32.const 255
   i32.and
   call $~lib/typedarray/Uint8Array#__set
   local.get $0
   i32.load offset=16
   local.get $6
   i32.const 1
   i32.sub
   local.get $5
   i32.const 255
   i32.and
   call $~lib/typedarray/Uint8Array#__set
   local.get $0
   i32.load offset=12
   local.get $0
   i32.load offset=8
   local.get $0
   i32.load offset=16
   i32.const 0
   local.get $6
   call $~lib/fast-sha256-as/assembly/sha256/hashBlocks
   drop
   local.get $0
   i32.const 1
   i32.store8 offset=28
  end
  loop $for-loop|1
   local.get $2
   i32.const 8
   i32.lt_s
   if
    local.get $1
    local.get $2
    i32.const 2
    i32.shl
    local.tee $3
    local.get $0
    i32.load offset=8
    local.get $2
    call $~lib/typedarray/Int32Array#__get
    i32.const 24
    i32.shr_u
    call $~lib/typedarray/Uint8Array#__set
    local.get $1
    local.get $3
    i32.const 1
    i32.add
    local.get $0
    i32.load offset=8
    local.get $2
    call $~lib/typedarray/Int32Array#__get
    i32.const 16
    i32.shr_u
    i32.const 255
    i32.and
    call $~lib/typedarray/Uint8Array#__set
    local.get $1
    local.get $3
    i32.const 2
    i32.add
    local.get $0
    i32.load offset=8
    local.get $2
    call $~lib/typedarray/Int32Array#__get
    i32.const 8
    i32.shr_u
    i32.const 255
    i32.and
    call $~lib/typedarray/Uint8Array#__set
    local.get $1
    local.get $3
    i32.const 3
    i32.add
    local.get $0
    i32.load offset=8
    local.get $2
    call $~lib/typedarray/Int32Array#__get
    i32.const 255
    i32.and
    call $~lib/typedarray/Uint8Array#__set
    local.get $2
    i32.const 1
    i32.add
    local.set $2
    br $for-loop|1
   end
  end
 )
 (func $assembly/utils/box/Box#constructor (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  i32.const 8
  i32.const 15
  call $~lib/rt/stub/__new
  local.tee $2
  i32.const 0
  i32.store
  local.get $2
  i32.const 0
  i32.store offset=4
  local.get $2
  local.get $0
  i32.store
  local.get $2
  local.get $1
  i32.store offset=4
  local.get $2
 )
 (func $~lib/rt/stub/__renew (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  local.get $1
  i32.const 1073741804
  i32.gt_u
  if
   i32.const 1600
   i32.const 1664
   i32.const 99
   i32.const 30
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  i32.const 16
  i32.sub
  local.tee $0
  i32.const 15
  i32.and
  i32.const 1
  local.get $0
  select
  if
   i32.const 0
   i32.const 1664
   i32.const 45
   i32.const 3
   call $~lib/builtins/abort
   unreachable
  end
  global.get $~lib/rt/stub/offset
  local.get $0
  i32.const 4
  i32.sub
  local.tee $3
  i32.load
  local.tee $4
  local.get $0
  i32.add
  i32.eq
  local.set $5
  local.get $1
  i32.const 16
  i32.add
  local.tee $6
  i32.const 19
  i32.add
  i32.const -16
  i32.and
  i32.const 4
  i32.sub
  local.set $2
  local.get $4
  local.get $6
  i32.lt_u
  if
   local.get $5
   if
    local.get $6
    i32.const 1073741820
    i32.gt_u
    if
     i32.const 1600
     i32.const 1664
     i32.const 52
     i32.const 33
     call $~lib/builtins/abort
     unreachable
    end
    local.get $0
    local.get $2
    i32.add
    local.tee $4
    memory.size
    local.tee $5
    i32.const 16
    i32.shl
    i32.const 15
    i32.add
    i32.const -16
    i32.and
    local.tee $6
    i32.gt_u
    if
     local.get $5
     local.get $4
     local.get $6
     i32.sub
     i32.const 65535
     i32.add
     i32.const -65536
     i32.and
     i32.const 16
     i32.shr_u
     local.tee $6
     local.get $5
     local.get $6
     i32.gt_s
     select
     memory.grow
     i32.const 0
     i32.lt_s
     if
      local.get $6
      memory.grow
      i32.const 0
      i32.lt_s
      if
       unreachable
      end
     end
    end
    local.get $4
    global.set $~lib/rt/stub/offset
    local.get $3
    local.get $2
    i32.store
   else
    local.get $2
    local.get $4
    i32.const 1
    i32.shl
    local.tee $3
    local.get $2
    local.get $3
    i32.gt_u
    select
    call $~lib/rt/stub/__alloc
    local.tee $2
    local.get $0
    local.get $4
    memory.copy
    local.get $2
    local.set $0
   end
  else
   local.get $5
   if
    local.get $0
    local.get $2
    i32.add
    global.set $~lib/rt/stub/offset
    local.get $3
    local.get $2
    i32.store
   end
  end
  local.get $0
  i32.const 4
  i32.sub
  local.get $1
  i32.store offset=16
  local.get $0
  i32.const 16
  i32.add
 )
 (func $~lib/string/String.UTF8.decode (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  local.get $0
  i32.const 20
  i32.sub
  i32.load offset=16
  local.tee $1
  local.get $0
  i32.add
  local.tee $3
  local.get $0
  i32.lt_u
  if
   i32.const 0
   i32.const 2864
   i32.const 770
   i32.const 7
   call $~lib/builtins/abort
   unreachable
  end
  local.get $1
  i32.const 1
  i32.shl
  i32.const 2
  call $~lib/rt/stub/__new
  local.tee $4
  local.set $2
  loop $while-continue|0
   local.get $0
   local.get $3
   i32.lt_u
   if
    block $while-break|0
     local.get $0
     i32.load8_u
     local.set $5
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     local.get $5
     i32.const 128
     i32.and
     if
      local.get $0
      local.get $3
      i32.eq
      br_if $while-break|0
      local.get $0
      i32.load8_u
      i32.const 63
      i32.and
      local.set $6
      local.get $0
      i32.const 1
      i32.add
      local.set $0
      local.get $5
      i32.const 224
      i32.and
      i32.const 192
      i32.eq
      if
       local.get $2
       local.get $5
       i32.const 31
       i32.and
       i32.const 6
       i32.shl
       local.get $6
       i32.or
       i32.store16
      else
       local.get $0
       local.get $3
       i32.eq
       br_if $while-break|0
       local.get $0
       i32.load8_u
       i32.const 63
       i32.and
       local.set $1
       local.get $0
       i32.const 1
       i32.add
       local.set $0
       local.get $5
       i32.const 240
       i32.and
       i32.const 224
       i32.eq
       if
        local.get $5
        i32.const 15
        i32.and
        i32.const 12
        i32.shl
        local.get $6
        i32.const 6
        i32.shl
        i32.or
        local.get $1
        i32.or
        local.set $1
       else
        local.get $0
        local.get $3
        i32.eq
        br_if $while-break|0
        local.get $0
        i32.load8_u
        i32.const 63
        i32.and
        local.get $5
        i32.const 7
        i32.and
        i32.const 18
        i32.shl
        local.get $6
        i32.const 12
        i32.shl
        i32.or
        local.get $1
        i32.const 6
        i32.shl
        i32.or
        i32.or
        local.set $1
        local.get $0
        i32.const 1
        i32.add
        local.set $0
       end
       local.get $1
       i32.const 65536
       i32.lt_u
       if
        local.get $2
        local.get $1
        i32.store16
       else
        local.get $2
        local.get $1
        i32.const 65536
        i32.sub
        local.tee $1
        i32.const 10
        i32.shr_u
        i32.const 55296
        i32.or
        local.get $1
        i32.const 1023
        i32.and
        i32.const 56320
        i32.or
        i32.const 16
        i32.shl
        i32.or
        i32.store
        local.get $2
        i32.const 2
        i32.add
        local.set $2
       end
      end
     else
      local.get $2
      local.get $5
      i32.store16
     end
     local.get $2
     i32.const 2
     i32.add
     local.set $2
     br $while-continue|0
    end
   end
  end
  local.get $4
  local.get $2
  local.get $4
  i32.sub
  call $~lib/rt/stub/__renew
 )
 (func $assembly/utils/box/Box#toHexString (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  local.get $0
  i32.load
  local.set $2
  local.get $0
  i32.load offset=4
  local.tee $3
  i32.const 1
  i32.shl
  i32.const 2
  i32.add
  call $~lib/arraybuffer/ArrayBuffer#constructor
  local.tee $1
  i32.const 30768
  i32.store16
  i32.const 0
  local.set $0
  loop $for-loop|0
   local.get $0
   local.get $3
   i32.lt_u
   if
    local.get $1
    i32.const 2
    i32.add
    local.get $0
    i32.const 1
    i32.shl
    i32.add
    local.get $0
    local.get $2
    i32.add
    i32.load8_u
    i32.const 1
    i32.shl
    i32.const 1056
    i32.add
    i32.load16_u
    i32.store16
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|0
   end
  end
  local.get $1
  call $~lib/string/String.UTF8.decode
 )
 (func $~lib/array/Array<u8>#constructor (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  i32.const 16
  i32.const 16
  call $~lib/rt/stub/__new
  local.tee $1
  i32.const 0
  i32.store
  local.get $1
  i32.const 0
  i32.store offset=4
  local.get $1
  i32.const 0
  i32.store offset=8
  local.get $1
  i32.const 0
  i32.store offset=12
  local.get $0
  i32.const 1073741820
  i32.gt_u
  if
   i32.const 2608
   i32.const 5856
   i32.const 70
   i32.const 60
   call $~lib/builtins/abort
   unreachable
  end
  i32.const 8
  local.get $0
  local.get $0
  i32.const 8
  i32.le_u
  select
  local.tee $2
  i32.const 1
  call $~lib/rt/stub/__new
  local.tee $3
  i32.const 0
  local.get $2
  memory.fill
  local.get $1
  local.get $3
  i32.store
  local.get $1
  local.get $3
  i32.store offset=4
  local.get $1
  local.get $2
  i32.store offset=8
  local.get $1
  local.get $0
  i32.store offset=12
  local.get $1
 )
 (func $~lib/array/ensureCapacity (param $0 i32) (param $1 i32) (param $2 i32) (param $3 i32)
  (local $4 i32)
  (local $5 i32)
  local.get $1
  local.get $0
  i32.load offset=8
  local.tee $4
  local.get $2
  i32.shr_u
  i32.gt_u
  if
   local.get $1
   i32.const 1073741820
   local.get $2
   i32.shr_u
   i32.gt_u
   if
    i32.const 2608
    i32.const 5856
    i32.const 19
    i32.const 48
    call $~lib/builtins/abort
    unreachable
   end
   i32.const 8
   local.get $1
   local.get $1
   i32.const 8
   i32.le_u
   select
   local.get $2
   i32.shl
   local.set $1
   local.get $3
   if
    i32.const 1073741820
    local.get $4
    i32.const 1
    i32.shl
    local.tee $2
    local.get $2
    i32.const 1073741820
    i32.ge_u
    select
    local.tee $2
    local.get $1
    local.get $1
    local.get $2
    i32.lt_u
    select
    local.set $1
   end
   local.get $0
   i32.load
   local.tee $5
   local.get $1
   call $~lib/rt/stub/__renew
   local.tee $2
   local.get $4
   i32.add
   i32.const 0
   local.get $1
   local.get $4
   i32.sub
   memory.fill
   local.get $2
   local.get $5
   i32.ne
   if
    local.get $0
    local.get $2
    i32.store
    local.get $0
    local.get $2
    i32.store offset=4
   end
   local.get $0
   local.get $1
   i32.store offset=8
  end
 )
 (func $~lib/array/Array<u8>#push (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  local.get $0
  local.get $0
  i32.load offset=12
  local.tee $2
  i32.const 1
  i32.add
  local.tee $3
  i32.const 0
  i32.const 1
  call $~lib/array/ensureCapacity
  local.get $0
  i32.load offset=4
  local.get $2
  i32.add
  local.get $1
  i32.store8
  local.get $0
  local.get $3
  i32.store offset=12
 )
 (func $assembly/utils/b32/convert (param $0 i32) (param $1 i32) (param $2 i32) (param $3 i32) (result i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  i32.const 1
  local.get $2
  i32.shl
  i32.const 1
  i32.sub
  local.set $6
  i32.const 0
  call $~lib/array/Array<u8>#constructor
  local.set $7
  loop $for-loop|0
   local.get $8
   local.get $0
   i32.load offset=8
   i32.lt_s
   if
    local.get $0
    local.get $8
    call $~lib/typedarray/Uint8Array#__get
    local.get $5
    local.get $1
    i32.shl
    i32.or
    local.set $5
    local.get $1
    local.get $4
    i32.add
    local.set $4
    loop $while-continue|1
     local.get $2
     local.get $4
     i32.le_u
     if
      local.get $7
      local.get $5
      local.get $4
      local.get $2
      i32.sub
      local.tee $4
      i32.shr_s
      local.get $6
      i32.and
      call $~lib/array/Array<u8>#push
      br $while-continue|1
     end
    end
    local.get $8
    i32.const 1
    i32.add
    local.set $8
    br $for-loop|0
   end
  end
  local.get $3
  if
   local.get $4
   if
    local.get $7
    local.get $5
    local.get $2
    local.get $4
    i32.sub
    i32.shl
    local.get $6
    i32.and
    call $~lib/array/Array<u8>#push
   end
  else
   local.get $1
   local.get $4
   i32.le_u
   if
    i32.const 0
    i32.const 5904
    i32.const 101
    i32.const 25
    call $~lib/builtins/abort
    unreachable
   end
   local.get $5
   local.get $2
   local.get $4
   i32.sub
   i32.shl
   local.get $6
   i32.and
   if
    i32.const 0
    i32.const 5904
    i32.const 102
    i32.const 45
    call $~lib/builtins/abort
    unreachable
   end
  end
  local.get $7
 )
 (func $assembly/utils/b32/fromDataStart<~lib/array/Array<u8>> (param $0 i32) (result i32)
  (local $1 i32)
  local.get $0
  i32.load offset=4
  local.tee $1
  local.get $1
  i32.const 20
  i32.sub
  i32.load offset=16
  call $assembly/utils/box/Box#constructor
  local.tee $1
  local.get $0
  i32.load offset=12
  i32.store offset=4
  local.get $1
  i32.load offset=4
  call $~lib/arraybuffer/ArrayBuffer#constructor
  local.tee $0
  local.get $1
  i32.load
  local.get $1
  i32.load offset=4
  memory.copy
  local.get $0
 )
 (func $assembly/indexer/index/arrayBufferToArray (param $0 i32) (result i32)
  (local $1 i32)
  local.get $0
  i32.const 20
  i32.sub
  i32.load offset=16
  call $~lib/array/Array<u8>#constructor
  local.tee $1
  local.get $0
  i32.store
  local.get $1
  local.get $0
  i32.store offset=4
  local.get $1
 )
 (func $assembly/utils/b32/prefixChk (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  i32.const 1
  local.set $1
  loop $for-loop|0
   local.get $2
   local.get $0
   i32.const 20
   i32.sub
   i32.load offset=16
   i32.lt_s
   if
    local.get $0
    local.get $2
    i32.add
    i32.load8_u
    local.tee $4
    i32.const 33
    i32.lt_u
    local.get $4
    i32.const 126
    i32.gt_u
    i32.or
    if
     i32.const 0
     i32.const 5904
     i32.const 60
     i32.const 7
     call $~lib/builtins/abort
     unreachable
    end
    i32.const 0
    local.get $1
    i32.const 25
    i32.shr_u
    local.tee $5
    i32.const 4
    i32.shr_u
    i32.sub
    i32.const 705979059
    i32.and
    i32.const 0
    local.get $5
    i32.const 3
    i32.shr_u
    i32.const 1
    i32.and
    i32.sub
    i32.const 1027748829
    i32.and
    i32.const 0
    local.get $5
    i32.const 2
    i32.shr_u
    i32.const 1
    i32.and
    i32.sub
    i32.const 513874426
    i32.and
    i32.const 0
    local.get $5
    i32.const 1
    i32.shr_u
    i32.const 1
    i32.and
    i32.sub
    i32.const 642813549
    i32.and
    i32.const 0
    local.get $5
    i32.const 1
    i32.and
    i32.sub
    i32.const 996825010
    i32.and
    local.get $1
    i32.const 33554431
    i32.and
    i32.const 5
    i32.shl
    i32.xor
    i32.xor
    i32.xor
    i32.xor
    i32.xor
    local.get $4
    i32.const 5
    i32.shr_u
    i32.xor
    local.set $1
    local.get $2
    i32.const 1
    i32.add
    local.set $2
    br $for-loop|0
   end
  end
  i32.const 0
  local.get $1
  i32.const 25
  i32.shr_u
  local.tee $2
  i32.const 4
  i32.shr_u
  i32.sub
  i32.const 705979059
  i32.and
  i32.const 0
  local.get $2
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.and
  i32.sub
  i32.const 1027748829
  i32.and
  i32.const 0
  local.get $2
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.and
  i32.sub
  i32.const 513874426
  i32.and
  i32.const 0
  local.get $2
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.and
  i32.sub
  i32.const 642813549
  i32.and
  i32.const 0
  local.get $2
  i32.const 1
  i32.and
  i32.sub
  i32.const 996825010
  i32.and
  local.get $1
  i32.const 33554431
  i32.and
  i32.const 5
  i32.shl
  i32.xor
  i32.xor
  i32.xor
  i32.xor
  i32.xor
  local.set $1
  loop $for-loop|1
   local.get $3
   local.get $0
   i32.const 20
   i32.sub
   i32.load offset=16
   i32.lt_s
   if
    local.get $0
    local.get $3
    i32.add
    i32.load8_u
    i32.const 31
    i32.and
    i32.const 0
    local.get $1
    i32.const 25
    i32.shr_u
    local.tee $2
    i32.const 4
    i32.shr_u
    i32.sub
    i32.const 705979059
    i32.and
    i32.const 0
    local.get $2
    i32.const 3
    i32.shr_u
    i32.const 1
    i32.and
    i32.sub
    i32.const 1027748829
    i32.and
    i32.const 0
    local.get $2
    i32.const 2
    i32.shr_u
    i32.const 1
    i32.and
    i32.sub
    i32.const 513874426
    i32.and
    i32.const 0
    local.get $2
    i32.const 1
    i32.shr_u
    i32.const 1
    i32.and
    i32.sub
    i32.const 642813549
    i32.and
    i32.const 0
    local.get $2
    i32.const 1
    i32.and
    i32.sub
    i32.const 996825010
    i32.and
    local.get $1
    i32.const 33554431
    i32.and
    i32.const 5
    i32.shl
    i32.xor
    i32.xor
    i32.xor
    i32.xor
    i32.xor
    i32.xor
    local.set $1
    local.get $3
    i32.const 1
    i32.add
    local.set $3
    br $for-loop|1
   end
  end
  local.get $1
 )
 (func $~lib/array/Array<u8>#__get (param $0 i32) (param $1 i32) (result i32)
  local.get $1
  local.get $0
  i32.load offset=12
  i32.ge_u
  if
   i32.const 3344
   i32.const 5856
   i32.const 114
   i32.const 42
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  i32.load offset=4
  local.get $1
  i32.add
  i32.load8_u
 )
 (func $assembly/utils/b32/encode (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  local.get $1
  i32.load offset=12
  local.get $0
  i32.const 20
  i32.sub
  i32.load offset=16
  i32.const 7
  i32.add
  i32.add
  i32.const 90
  i32.gt_s
  if
   i32.const 6000
   i32.const 5904
   i32.const 120
   i32.const 5
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  call $assembly/utils/b32/prefixChk
  local.set $3
  local.get $1
  i32.load offset=12
  local.get $0
  i32.const 20
  i32.sub
  i32.load offset=16
  i32.const 7
  i32.add
  i32.add
  call $~lib/arraybuffer/ArrayBuffer#constructor
  local.tee $4
  local.get $0
  local.get $0
  i32.const 20
  i32.sub
  i32.load offset=16
  memory.copy
  local.get $4
  local.get $0
  i32.const 20
  i32.sub
  i32.load offset=16
  i32.add
  local.tee $0
  global.get $assembly/utils/b32/ONE
  i32.load8_u
  i32.store8
  local.get $0
  i32.const 1
  i32.add
  local.set $0
  loop $for-loop|0
   local.get $2
   local.get $1
   i32.load offset=12
   i32.lt_s
   if
    local.get $1
    local.get $2
    call $~lib/array/Array<u8>#__get
    local.tee $6
    i32.const 5
    i32.shr_u
    if
     i32.const 6064
     i32.const 5904
     i32.const 135
     i32.const 23
     call $~lib/builtins/abort
     unreachable
    end
    local.get $6
    i32.const 0
    local.get $3
    i32.const 25
    i32.shr_u
    local.tee $5
    i32.const 4
    i32.shr_u
    i32.const 1
    i32.and
    i32.sub
    i32.const 705979059
    i32.and
    i32.const 0
    local.get $5
    i32.const 3
    i32.shr_u
    i32.const 1
    i32.and
    i32.sub
    i32.const 1027748829
    i32.and
    i32.const 0
    local.get $5
    i32.const 2
    i32.shr_u
    i32.const 1
    i32.and
    i32.sub
    i32.const 513874426
    i32.and
    i32.const 0
    local.get $5
    i32.const 1
    i32.shr_u
    i32.const 1
    i32.and
    i32.sub
    i32.const 642813549
    i32.and
    i32.const 0
    local.get $5
    i32.const 1
    i32.and
    i32.sub
    i32.const 996825010
    i32.and
    local.get $3
    i32.const 33554431
    i32.and
    i32.const 5
    i32.shl
    i32.xor
    i32.xor
    i32.xor
    i32.xor
    i32.xor
    i32.xor
    local.set $3
    local.get $0
    local.get $2
    i32.add
    local.get $6
    i32.const 3200
    i32.add
    i32.load8_u
    i32.store8
    local.get $2
    i32.const 1
    i32.add
    local.set $2
    br $for-loop|0
   end
  end
  local.get $0
  local.get $1
  i32.load offset=12
  i32.add
  local.set $0
  i32.const 0
  local.set $2
  loop $for-loop|1
   local.get $2
   i32.const 6
   i32.lt_u
   if
    i32.const 0
    local.get $3
    i32.const 25
    i32.shr_u
    local.tee $1
    i32.const 4
    i32.shr_u
    i32.const 1
    i32.and
    i32.sub
    i32.const 705979059
    i32.and
    i32.const 0
    local.get $1
    i32.const 3
    i32.shr_u
    i32.const 1
    i32.and
    i32.sub
    i32.const 1027748829
    i32.and
    i32.const 0
    local.get $1
    i32.const 2
    i32.shr_u
    i32.const 1
    i32.and
    i32.sub
    i32.const 513874426
    i32.and
    i32.const 0
    local.get $1
    i32.const 1
    i32.shr_u
    i32.const 1
    i32.and
    i32.sub
    i32.const 642813549
    i32.and
    i32.const 0
    local.get $1
    i32.const 1
    i32.and
    i32.sub
    i32.const 996825010
    i32.and
    local.get $3
    i32.const 33554431
    i32.and
    i32.const 5
    i32.shl
    i32.xor
    i32.xor
    i32.xor
    i32.xor
    i32.xor
    local.set $3
    local.get $2
    i32.const 1
    i32.add
    local.set $2
    br $for-loop|1
   end
  end
  local.get $3
  i32.const 1
  i32.xor
  local.set $2
  i32.const 0
  local.set $1
  loop $for-loop|2
   local.get $1
   i32.const 6
   i32.lt_s
   if
    local.get $0
    local.get $1
    i32.add
    local.get $2
    i32.const 5
    local.get $1
    i32.sub
    i32.const 5
    i32.mul
    i32.shr_u
    i32.const 31
    i32.and
    i32.const 3200
    i32.add
    i32.load8_u
    i32.store8
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|2
   end
  end
  local.get $4
 )
 (func $~lib/util/casemap/casemap (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  local.get $0
  i32.const 8
  i32.shr_u
  local.tee $2
  i32.const 14436
  i32.add
  i32.load8_u
  local.get $2
  i32.const 10796
  i32.add
  i32.load8_u
  i32.const 86
  i32.mul
  i32.const 10796
  i32.add
  local.get $0
  i32.const 255
  i32.and
  local.tee $4
  i32.const 3
  i32.div_u
  i32.add
  i32.load8_u
  local.get $4
  i32.const 3
  i32.rem_u
  i32.const 2
  i32.shl
  i32.const 13464
  i32.add
  i32.load
  i32.mul
  i32.const 11
  i32.shr_u
  i32.const 6
  i32.rem_u
  i32.add
  i32.const 2
  i32.shl
  i32.const 13476
  i32.add
  i32.load
  local.tee $2
  i32.const 255
  i32.and
  local.set $3
  local.get $2
  i32.const 8
  i32.shr_s
  local.set $2
  block $folding-inner0
   local.get $3
   i32.const 2
   i32.lt_u
   br_if $folding-inner0
   local.get $2
   i32.const 255
   i32.and
   local.set $3
   local.get $2
   i32.const 8
   i32.shr_u
   local.set $2
   loop $while-continue|0
    local.get $3
    if
     local.get $2
     local.get $3
     i32.const 1
     i32.shr_u
     local.tee $7
     i32.add
     i32.const 1
     i32.shl
     i32.const 14948
     i32.add
     local.tee $5
     i32.load8_u
     local.tee $6
     local.get $4
     i32.eq
     if (result i32)
      local.get $5
      i32.load8_u offset=1
      i32.const 2
      i32.shl
      i32.const 13476
      i32.add
      i32.load
      local.tee $2
      i32.const 255
      i32.and
      local.set $3
      local.get $2
      i32.const 8
      i32.shr_s
      local.set $2
      local.get $3
      i32.const 2
      i32.lt_u
      br_if $folding-inner0
      local.get $0
      i32.const 1
      i32.add
      local.get $1
      i32.const 1
      i32.shl
      i32.sub
      return
     else
      local.get $4
      local.get $6
      i32.lt_u
      if (result i32)
       local.get $7
      else
       local.get $2
       local.get $7
       i32.add
       local.set $2
       local.get $3
       local.get $7
       i32.sub
      end
     end
     local.set $3
     br $while-continue|0
    end
   end
   local.get $0
   return
  end
  local.get $0
  local.get $2
  i32.const 0
  local.get $1
  local.get $3
  i32.xor
  i32.sub
  i32.and
  i32.add
 )
 (func $~lib/string/String#toLowerCase (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  local.get $0
  i32.const 20
  i32.sub
  i32.load offset=16
  i32.const 1
  i32.shr_u
  local.tee $7
  i32.eqz
  if
   local.get $0
   return
  end
  local.get $7
  i32.const 2
  i32.shl
  i32.const 2
  call $~lib/rt/stub/__new
  local.set $6
  loop $for-loop|0
   local.get $3
   local.get $7
   i32.lt_u
   if
    local.get $0
    local.get $3
    i32.const 1
    i32.shl
    i32.add
    local.tee $1
    i32.load16_u
    local.tee $2
    i32.const 7
    i32.shr_u
    if
     block $for-continue|0
      local.get $2
      i32.const 55295
      i32.sub
      i32.const 1025
      i32.lt_u
      local.get $3
      local.get $7
      i32.const 1
      i32.sub
      i32.lt_u
      i32.and
      if
       local.get $1
       i32.load16_u offset=2
       local.tee $4
       i32.const 56319
       i32.sub
       i32.const 1025
       i32.lt_u
       if
        local.get $3
        i32.const 1
        i32.add
        local.set $3
        local.get $4
        i32.const 1023
        i32.and
        local.get $2
        local.tee $1
        i32.const 1023
        i32.and
        i32.const 10
        i32.shl
        i32.or
        i32.const 65536
        i32.add
        local.tee $2
        i32.const 131072
        i32.ge_u
        if
         local.get $6
         local.get $5
         i32.const 1
         i32.shl
         i32.add
         local.get $1
         local.get $4
         i32.const 16
         i32.shl
         i32.or
         i32.store
         local.get $5
         i32.const 1
         i32.add
         local.set $5
         br $for-continue|0
        end
       end
      end
      local.get $2
      i32.const 304
      i32.eq
      if
       local.get $6
       local.get $5
       i32.const 1
       i32.shl
       i32.add
       i32.const 50790505
       i32.store
       local.get $5
       i32.const 1
       i32.add
       local.set $5
      else
       local.get $2
       i32.const 931
       i32.eq
       if
        local.get $6
        local.get $5
        i32.const 1
        i32.shl
        i32.add
        i32.const 962
        i32.const 963
        local.get $7
        i32.const 1
        i32.gt_u
        if (result i32)
         block $~lib/util/string/isFinalSigma|inlined.0 (result i32)
          i32.const 0
          local.set $1
          local.get $3
          local.tee $2
          i32.const 30
          i32.sub
          local.tee $4
          i32.const 0
          local.get $4
          i32.const 0
          i32.ge_s
          select
          local.set $10
          loop $while-continue|1
           local.get $2
           local.get $10
           i32.gt_s
           if
            i32.const -1
            local.set $4
            block $~lib/util/string/codePointBefore|inlined.0
             local.get $2
             i32.const 0
             i32.le_s
             br_if $~lib/util/string/codePointBefore|inlined.0
             local.get $0
             local.get $2
             i32.const 1
             i32.sub
             i32.const 1
             i32.shl
             i32.add
             i32.load16_u
             local.tee $9
             i32.const 64512
             i32.and
             i32.const 56320
             i32.eq
             local.get $2
             i32.const 2
             i32.sub
             local.tee $4
             i32.const 0
             i32.ge_s
             i32.and
             if
              local.get $9
              i32.const 1023
              i32.and
              local.get $0
              local.get $4
              i32.const 1
              i32.shl
              i32.add
              i32.load16_u
              local.tee $8
              i32.const 1023
              i32.and
              i32.const 10
              i32.shl
              i32.add
              i32.const 65536
              i32.add
              local.set $4
              local.get $8
              i32.const 64512
              i32.and
              i32.const 55296
              i32.eq
              br_if $~lib/util/string/codePointBefore|inlined.0
             end
             i32.const 65533
             local.get $9
             local.get $9
             i32.const 63488
             i32.and
             i32.const 55296
             i32.eq
             select
             local.set $4
            end
            local.get $4
            i32.const 918000
            i32.lt_u
            if (result i32)
             local.get $4
             i32.const 8
             i32.shr_u
             i32.const 6220
             i32.add
             i32.load8_u
             i32.const 5
             i32.shl
             i32.const 6220
             i32.add
             local.get $4
             i32.const 255
             i32.and
             i32.const 3
             i32.shr_u
             i32.add
             i32.load8_u
             local.get $4
             i32.const 7
             i32.and
             i32.shr_u
             i32.const 1
             i32.and
            else
             i32.const 0
            end
            i32.eqz
            if
             local.get $4
             i32.const 127370
             i32.lt_u
             if (result i32)
              local.get $4
              i32.const 8
              i32.shr_u
              i32.const 9228
              i32.add
              i32.load8_u
              i32.const 5
              i32.shl
              i32.const 9228
              i32.add
              local.get $4
              i32.const 255
              i32.and
              i32.const 3
              i32.shr_u
              i32.add
              i32.load8_u
              local.get $4
              i32.const 7
              i32.and
              i32.shr_u
              i32.const 1
              i32.and
             else
              i32.const 0
             end
             if (result i32)
              i32.const 1
             else
              i32.const 0
              br $~lib/util/string/isFinalSigma|inlined.0
             end
             local.set $1
            end
            local.get $2
            local.get $4
            i32.const 65536
            i32.ge_s
            i32.const 1
            i32.add
            i32.sub
            local.set $2
            br $while-continue|1
           end
          end
          i32.const 0
          local.get $1
          i32.eqz
          br_if $~lib/util/string/isFinalSigma|inlined.0
          drop
          local.get $3
          i32.const 1
          i32.add
          local.tee $2
          i32.const 30
          i32.add
          local.tee $1
          local.get $7
          local.get $1
          local.get $7
          i32.lt_s
          select
          local.set $4
          loop $while-continue|2
           local.get $2
           local.get $4
           i32.lt_s
           if
            local.get $0
            local.get $2
            i32.const 1
            i32.shl
            i32.add
            local.tee $8
            i32.load16_u
            local.tee $1
            i32.const 64512
            i32.and
            i32.const 55296
            i32.eq
            local.get $2
            i32.const 1
            i32.add
            local.get $7
            i32.ne
            i32.and
            if
             local.get $8
             i32.load16_u offset=2
             local.tee $8
             i32.const 64512
             i32.and
             i32.const 56320
             i32.eq
             if
              local.get $1
              i32.const 10
              i32.shl
              local.get $8
              i32.add
              i32.const 56613888
              i32.sub
              local.set $1
             end
            end
            local.get $1
            i32.const 918000
            i32.lt_u
            if (result i32)
             local.get $1
             i32.const 8
             i32.shr_u
             i32.const 6220
             i32.add
             i32.load8_u
             i32.const 5
             i32.shl
             i32.const 6220
             i32.add
             local.get $1
             i32.const 255
             i32.and
             i32.const 3
             i32.shr_u
             i32.add
             i32.load8_u
             local.get $1
             i32.const 7
             i32.and
             i32.shr_u
             i32.const 1
             i32.and
            else
             i32.const 0
            end
            i32.eqz
            if
             local.get $1
             i32.const 127370
             i32.lt_u
             if (result i32)
              local.get $1
              i32.const 8
              i32.shr_u
              i32.const 9228
              i32.add
              i32.load8_u
              i32.const 5
              i32.shl
              i32.const 9228
              i32.add
              local.get $1
              i32.const 255
              i32.and
              i32.const 3
              i32.shr_u
              i32.add
              i32.load8_u
              local.get $1
              i32.const 7
              i32.and
              i32.shr_u
              i32.const 1
              i32.and
             else
              i32.const 0
             end
             i32.eqz
             br $~lib/util/string/isFinalSigma|inlined.0
            end
            local.get $2
            local.get $1
            i32.const 65536
            i32.ge_u
            i32.const 1
            i32.add
            i32.add
            local.set $2
            br $while-continue|2
           end
          end
          i32.const 1
         end
        else
         i32.const 0
        end
        select
        i32.store16
       else
        local.get $2
        i32.const 9398
        i32.sub
        i32.const 25
        i32.le_u
        if
         local.get $6
         local.get $5
         i32.const 1
         i32.shl
         i32.add
         local.get $2
         i32.const 26
         i32.add
         i32.store16
        else
         local.get $2
         i32.const 0
         call $~lib/util/casemap/casemap
         i32.const 2097151
         i32.and
         local.tee $1
         i32.const 65536
         i32.lt_u
         if
          local.get $6
          local.get $5
          i32.const 1
          i32.shl
          i32.add
          local.get $1
          i32.store16
         else
          local.get $6
          local.get $5
          i32.const 1
          i32.shl
          i32.add
          local.get $1
          i32.const 65536
          i32.sub
          local.tee $1
          i32.const 10
          i32.shr_u
          i32.const 55296
          i32.or
          local.get $1
          i32.const 1023
          i32.and
          i32.const 56320
          i32.or
          i32.const 16
          i32.shl
          i32.or
          i32.store
          local.get $5
          i32.const 1
          i32.add
          local.set $5
         end
        end
       end
      end
     end
    else
     local.get $6
     local.get $5
     i32.const 1
     i32.shl
     i32.add
     local.get $2
     i32.const 6092
     i32.add
     i32.load8_u
     i32.store16
    end
    local.get $3
    i32.const 1
    i32.add
    local.set $3
    local.get $5
    i32.const 1
    i32.add
    local.set $5
    br $for-loop|0
   end
  end
  local.get $6
  local.get $5
  i32.const 1
  i32.shl
  call $~lib/rt/stub/__renew
 )
 (func $~lib/string/String#toUpperCase (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  local.get $0
  i32.const 20
  i32.sub
  i32.load offset=16
  i32.const 1
  i32.shr_u
  local.tee $8
  i32.eqz
  if
   local.get $0
   return
  end
  local.get $8
  i32.const 6
  i32.mul
  i32.const 2
  call $~lib/rt/stub/__new
  local.set $6
  i32.const 15372
  i32.load
  i32.const 1
  i32.shr_u
  local.set $3
  loop $for-loop|0
   local.get $7
   local.get $8
   i32.lt_u
   if
    local.get $0
    local.get $7
    i32.const 1
    i32.shl
    i32.add
    local.tee $1
    i32.load16_u
    local.tee $2
    i32.const 7
    i32.shr_u
    if
     block $for-continue|0
      local.get $2
      i32.const 55295
      i32.sub
      i32.const 1025
      i32.lt_u
      local.get $7
      local.get $8
      i32.const 1
      i32.sub
      i32.lt_u
      i32.and
      if
       local.get $1
       i32.load16_u offset=2
       local.tee $4
       i32.const 56319
       i32.sub
       i32.const 1025
       i32.lt_u
       if
        local.get $7
        i32.const 1
        i32.add
        local.set $7
        local.get $4
        i32.const 1023
        i32.and
        local.get $2
        local.tee $1
        i32.const 1023
        i32.and
        i32.const 10
        i32.shl
        i32.or
        i32.const 65536
        i32.add
        local.tee $2
        i32.const 131072
        i32.ge_u
        if
         local.get $6
         local.get $5
         i32.const 1
         i32.shl
         i32.add
         local.get $1
         local.get $4
         i32.const 16
         i32.shl
         i32.or
         i32.store
         local.get $5
         i32.const 1
         i32.add
         local.set $5
         br $for-continue|0
        end
       end
      end
      local.get $2
      i32.const 9424
      i32.sub
      i32.const 25
      i32.le_u
      if
       local.get $6
       local.get $5
       i32.const 1
       i32.shl
       i32.add
       local.get $2
       i32.const 26
       i32.sub
       i32.store16
      else
       local.get $2
       i32.const 223
       i32.sub
       i32.const 64056
       i32.le_u
       if (result i32)
        local.get $3
        local.set $1
        i32.const 0
        local.set $9
        block $~lib/util/casemap/bsearch|inlined.0
         loop $while-continue|1
          local.get $1
          local.get $9
          i32.ge_s
          if
           local.get $1
           local.get $9
           i32.add
           i32.const 3
           i32.shr_u
           i32.const 2
           i32.shl
           local.tee $4
           i32.const 1
           i32.shl
           i32.const 15376
           i32.add
           i32.load16_u
           local.get $2
           i32.sub
           local.tee $10
           i32.eqz
           br_if $~lib/util/casemap/bsearch|inlined.0
           local.get $10
           i32.const 31
           i32.shr_u
           if
            local.get $4
            i32.const 4
            i32.add
            local.set $9
           else
            local.get $4
            i32.const 4
            i32.sub
            local.set $1
           end
           br $while-continue|1
          end
         end
         i32.const -1
         local.set $4
        end
        local.get $4
       else
        i32.const -1
       end
       local.tee $1
       i32.const -1
       i32.xor
       if
        local.get $1
        i32.const 1
        i32.shl
        i32.const 15376
        i32.add
        local.tee $1
        i32.load16_u offset=6
        local.set $2
        local.get $6
        local.get $5
        i32.const 1
        i32.shl
        i32.add
        local.tee $4
        local.get $1
        i32.load offset=2
        i32.store
        local.get $4
        local.get $2
        i32.store16 offset=4
        local.get $5
        local.get $2
        i32.const 0
        i32.ne
        i32.const 1
        i32.add
        i32.add
        local.set $5
       else
        local.get $2
        i32.const 1
        call $~lib/util/casemap/casemap
        i32.const 2097151
        i32.and
        local.tee $1
        i32.const 65536
        i32.lt_u
        if
         local.get $6
         local.get $5
         i32.const 1
         i32.shl
         i32.add
         local.get $1
         i32.store16
        else
         local.get $6
         local.get $5
         i32.const 1
         i32.shl
         i32.add
         local.get $1
         i32.const 65536
         i32.sub
         local.tee $1
         i32.const 10
         i32.shr_u
         i32.const 55296
         i32.or
         local.get $1
         i32.const 1023
         i32.and
         i32.const 56320
         i32.or
         i32.const 16
         i32.shl
         i32.or
         i32.store
         local.get $5
         i32.const 1
         i32.add
         local.set $5
        end
       end
      end
     end
    else
     local.get $6
     local.get $5
     i32.const 1
     i32.shl
     i32.add
     local.get $2
     i32.const 16204
     i32.add
     i32.load8_u
     i32.store16
    end
    local.get $7
    i32.const 1
    i32.add
    local.set $7
    local.get $5
    i32.const 1
    i32.add
    local.set $5
    br $for-loop|0
   end
  end
  local.get $6
  local.get $5
  i32.const 1
  i32.shl
  call $~lib/rt/stub/__renew
 )
 (func $~lib/util/string/compareImpl (param $0 i32) (param $1 i32) (param $2 i32) (param $3 i32) (result i32)
  (local $4 i32)
  local.get $0
  local.get $1
  i32.const 1
  i32.shl
  i32.add
  local.set $1
  local.get $3
  i32.const 4
  i32.ge_u
  if (result i32)
   local.get $1
   i32.const 7
   i32.and
   local.get $2
   i32.const 7
   i32.and
   i32.or
  else
   i32.const 1
  end
  i32.eqz
  if
   loop $do-loop|0
    local.get $1
    i64.load
    local.get $2
    i64.load
    i64.eq
    if
     local.get $1
     i32.const 8
     i32.add
     local.set $1
     local.get $2
     i32.const 8
     i32.add
     local.set $2
     local.get $3
     i32.const 4
     i32.sub
     local.tee $3
     i32.const 4
     i32.ge_u
     br_if $do-loop|0
    end
   end
  end
  loop $while-continue|1
   local.get $3
   local.tee $0
   i32.const 1
   i32.sub
   local.set $3
   local.get $0
   if
    local.get $1
    i32.load16_u
    local.tee $0
    local.get $2
    i32.load16_u
    local.tee $4
    i32.ne
    if
     local.get $0
     local.get $4
     i32.sub
     return
    end
    local.get $1
    i32.const 2
    i32.add
    local.set $1
    local.get $2
    i32.const 2
    i32.add
    local.set $2
    br $while-continue|1
   end
  end
  i32.const 0
 )
 (func $~lib/string/String.__eq (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  local.get $0
  local.get $1
  i32.eq
  if
   i32.const 1
   return
  end
  local.get $1
  i32.eqz
  local.get $0
  i32.eqz
  i32.or
  if
   i32.const 0
   return
  end
  local.get $0
  i32.const 20
  i32.sub
  i32.load offset=16
  i32.const 1
  i32.shr_u
  local.tee $2
  local.get $1
  i32.const 20
  i32.sub
  i32.load offset=16
  i32.const 1
  i32.shr_u
  i32.ne
  if
   i32.const 0
   return
  end
  local.get $0
  i32.const 0
  local.get $1
  local.get $2
  call $~lib/util/string/compareImpl
  i32.eqz
 )
 (func $assembly/utils/b32/__decode (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  block $folding-inner0
   local.get $0
   i32.const 20
   i32.sub
   i32.load offset=16
   i32.const 1
   i32.shr_u
   local.tee $1
   i32.const 8
   i32.lt_u
   br_if $folding-inner0
   local.get $1
   i32.const 90
   i32.gt_u
   br_if $folding-inner0
   local.get $0
   call $~lib/string/String#toLowerCase
   local.set $1
   local.get $0
   call $~lib/string/String#toUpperCase
   local.set $2
   local.get $0
   local.get $1
   call $~lib/string/String.__eq
   if (result i32)
    i32.const 1
   else
    local.get $0
    local.get $2
    call $~lib/string/String.__eq
   end
   i32.eqz
   br_if $folding-inner0
   i32.const 1
   global.set $~argumentsLength
   block $__inlined_func$~lib/string/String#lastIndexOf$168
    i32.const 2764
    i32.load
    i32.const 1
    i32.shr_u
    local.tee $2
    i32.eqz
    if
     local.get $1
     i32.const 20
     i32.sub
     i32.load offset=16
     i32.const 1
     i32.shr_u
     local.set $0
     br $__inlined_func$~lib/string/String#lastIndexOf$168
    end
    i32.const -1
    local.set $0
    local.get $1
    i32.const 20
    i32.sub
    i32.load offset=16
    i32.const 1
    i32.shr_u
    local.tee $3
    i32.eqz
    br_if $__inlined_func$~lib/string/String#lastIndexOf$168
    local.get $3
    local.get $2
    i32.sub
    local.set $0
    loop $for-loop|0
     local.get $0
     i32.const 0
     i32.ge_s
     if
      local.get $1
      local.get $0
      i32.const 2768
      local.get $2
      call $~lib/util/string/compareImpl
      i32.eqz
      br_if $__inlined_func$~lib/string/String#lastIndexOf$168
      local.get $0
      i32.const 1
      i32.sub
      local.set $0
      br $for-loop|0
     end
    end
    i32.const -1
    local.set $0
   end
   local.get $0
   i32.const -1
   i32.eq
   br_if $folding-inner0
   local.get $0
   i32.eqz
   br_if $folding-inner0
   i32.const 1
   global.set $~argumentsLength
   local.get $1
   i32.const 0
   call $~lib/string/String.UTF8.encode@varargs
   local.tee $1
   local.get $1
   i32.const 20
   i32.sub
   i32.load offset=16
   call $assembly/utils/box/Box#constructor
   local.tee $2
   local.get $0
   i32.store offset=4
   local.get $2
   i32.load offset=4
   call $~lib/arraybuffer/ArrayBuffer#constructor
   local.tee $3
   local.get $2
   i32.load
   local.get $2
   i32.load offset=4
   memory.copy
   local.get $1
   local.get $1
   i32.const 20
   i32.sub
   i32.load offset=16
   call $assembly/utils/box/Box#constructor
   local.tee $1
   local.get $0
   i32.const 1
   i32.add
   local.tee $0
   local.get $1
   i32.load
   i32.add
   i32.store
   local.get $1
   local.get $1
   i32.load offset=4
   local.get $0
   i32.sub
   i32.store offset=4
   local.get $1
   i32.load offset=4
   call $~lib/arraybuffer/ArrayBuffer#constructor
   local.tee $4
   local.get $1
   i32.load
   local.get $1
   i32.load offset=4
   memory.copy
   local.get $4
   i32.const 20
   i32.sub
   i32.load offset=16
   i32.const 6
   i32.lt_s
   br_if $folding-inner0
   local.get $3
   call $assembly/utils/b32/prefixChk
   local.set $1
   i32.const 0
   call $~lib/array/Array<u8>#constructor
   local.set $6
   i32.const 0
   local.set $0
   loop $for-loop|04
    local.get $4
    i32.const 20
    i32.sub
    i32.load offset=16
    local.tee $7
    local.get $0
    i32.gt_s
    if
     local.get $0
     local.get $4
     i32.add
     i32.load8_u
     i32.const 2912
     i32.add
     i32.load8_u
     local.tee $2
     i32.const 0
     local.get $1
     i32.const 25
     i32.shr_u
     local.tee $5
     i32.const 4
     i32.shr_u
     i32.const 1
     i32.and
     i32.sub
     i32.const 705979059
     i32.and
     i32.const 0
     local.get $5
     i32.const 3
     i32.shr_u
     i32.const 1
     i32.and
     i32.sub
     i32.const 1027748829
     i32.and
     i32.const 0
     local.get $5
     i32.const 2
     i32.shr_u
     i32.const 1
     i32.and
     i32.sub
     i32.const 513874426
     i32.and
     i32.const 0
     local.get $5
     i32.const 1
     i32.shr_u
     i32.const 1
     i32.and
     i32.sub
     i32.const 642813549
     i32.and
     i32.const 0
     local.get $5
     i32.const 1
     i32.and
     i32.sub
     i32.const 996825010
     i32.and
     local.get $1
     i32.const 33554431
     i32.and
     i32.const 5
     i32.shl
     i32.xor
     i32.xor
     i32.xor
     i32.xor
     i32.xor
     i32.xor
     local.set $1
     local.get $7
     local.get $0
     i32.const 6
     i32.add
     i32.gt_s
     if
      local.get $6
      local.get $2
      call $~lib/array/Array<u8>#push
     end
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $for-loop|04
    end
   end
   local.get $6
   call $assembly/utils/b32/fromDataStart<~lib/array/Array<u8>>
   local.set $0
   i32.const 8
   i32.const 17
   call $~lib/rt/stub/__new
   local.tee $1
   i32.const 0
   i32.store
   local.get $1
   i32.const 0
   i32.store offset=4
   local.get $1
   local.get $3
   i32.store
   local.get $1
   local.get $0
   i32.store offset=4
   local.get $1
   return
  end
  i32.const 0
 )
 (func $assembly/index/test_b32decode
  (local $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  i32.const 2
  call $~lib/arraybuffer/ArrayBuffer#constructor
  local.set $1
  i32.const 29
  i32.const 13
  call $~lib/rt/stub/__new
  local.tee $5
  i32.const 0
  i32.store
  local.get $5
  i32.const 0
  i32.store offset=4
  local.get $5
  i32.const 0
  i32.store offset=8
  local.get $5
  i32.const 0
  i32.store offset=12
  local.get $5
  i32.const 0
  i32.store offset=16
  local.get $5
  i32.const 0
  i32.store offset=20
  local.get $5
  i32.const 0
  i32.store offset=24
  local.get $5
  i32.const 0
  i32.store8 offset=28
  local.get $5
  i32.const 32
  i32.store
  local.get $5
  i32.const 64
  i32.store offset=4
  local.get $5
  i32.const 12
  i32.const 14
  call $~lib/rt/stub/__new
  i32.const 8
  i32.const 2
  call $~lib/arraybuffer/ArrayBufferView#constructor
  i32.store offset=8
  local.get $5
  i32.const 12
  i32.const 14
  call $~lib/rt/stub/__new
  i32.const 64
  i32.const 2
  call $~lib/arraybuffer/ArrayBufferView#constructor
  i32.store offset=12
  local.get $5
  i32.const 12
  i32.const 10
  call $~lib/rt/stub/__new
  i32.const 128
  i32.const 0
  call $~lib/arraybuffer/ArrayBufferView#constructor
  i32.store offset=16
  local.get $5
  i32.const 0
  i32.store offset=20
  local.get $5
  i32.const 0
  i32.store offset=24
  local.get $5
  call $~lib/fast-sha256-as/assembly/sha256/Hash#reset
  i32.const 1
  global.set $~argumentsLength
  local.get $1
  call $~lib/typedarray/Uint8Array.wrap@varargs
  local.set $4
  i32.const 1
  global.set $~argumentsLength
  local.get $4
  i32.load offset=8
  local.set $1
  local.get $5
  i32.load8_u offset=28
  if
   i32.const 5632
   i32.const 5760
   i32.const 196
   i32.const 7
   call $~lib/builtins/abort
   unreachable
  end
  local.get $5
  local.get $5
  i32.load offset=24
  local.get $1
  i32.add
  i32.store offset=24
  local.get $5
  i32.load offset=20
  i32.const 0
  i32.gt_s
  if
   loop $while-continue|0
    local.get $5
    i32.load offset=20
    local.tee $6
    i32.const 64
    i32.lt_s
    local.get $1
    i32.const 0
    i32.gt_s
    i32.and
    if
     local.get $0
     local.tee $2
     i32.const 1
     i32.add
     local.set $0
     local.get $5
     i32.load offset=16
     local.set $7
     local.get $5
     local.get $6
     i32.const 1
     i32.add
     i32.store offset=20
     local.get $7
     local.get $6
     local.get $4
     local.get $2
     call $~lib/typedarray/Uint8Array#__get
     call $~lib/typedarray/Uint8Array#__set
     local.get $1
     i32.const 1
     i32.sub
     local.set $1
     br $while-continue|0
    end
   end
   local.get $5
   i32.load offset=20
   i32.const 64
   i32.eq
   if
    local.get $5
    i32.load offset=12
    local.get $5
    i32.load offset=8
    local.get $5
    i32.load offset=16
    i32.const 0
    i32.const 64
    call $~lib/fast-sha256-as/assembly/sha256/hashBlocks
    drop
    local.get $5
    i32.const 0
    i32.store offset=20
   end
  end
  local.get $1
  i32.const 64
  i32.ge_s
  if
   local.get $5
   i32.load offset=12
   local.get $5
   i32.load offset=8
   local.get $4
   local.get $0
   local.get $1
   call $~lib/fast-sha256-as/assembly/sha256/hashBlocks
   local.set $0
   local.get $1
   i32.const 64
   i32.rem_s
   local.set $1
  end
  loop $while-continue|1
   local.get $1
   i32.const 0
   i32.gt_s
   if
    local.get $0
    local.tee $2
    i32.const 1
    i32.add
    local.set $0
    local.get $5
    i32.load offset=16
    local.set $6
    local.get $5
    local.get $5
    i32.load offset=20
    local.tee $7
    i32.const 1
    i32.add
    i32.store offset=20
    local.get $6
    local.get $7
    local.get $4
    local.get $2
    call $~lib/typedarray/Uint8Array#__get
    call $~lib/typedarray/Uint8Array#__set
    local.get $1
    i32.const 1
    i32.sub
    local.set $1
    br $while-continue|1
   end
  end
  local.get $5
  i32.load
  local.set $0
  local.get $5
  i32.const 12
  i32.const 10
  call $~lib/rt/stub/__new
  local.get $0
  i32.const 0
  call $~lib/arraybuffer/ArrayBufferView#constructor
  local.tee $0
  call $~lib/fast-sha256-as/assembly/sha256/Hash#finish
  loop $for-loop|0
   local.get $3
   local.get $5
   i32.load offset=16
   local.tee $1
   i32.load offset=8
   i32.lt_s
   if
    local.get $1
    local.get $3
    i32.const 0
    call $~lib/typedarray/Uint8Array#__set
    local.get $3
    i32.const 1
    i32.add
    local.set $3
    br $for-loop|0
   end
  end
  i32.const 0
  local.set $3
  loop $for-loop|1
   local.get $3
   local.get $5
   i32.load offset=12
   local.tee $1
   i32.load offset=8
   i32.const 2
   i32.shr_u
   i32.lt_s
   if
    local.get $1
    local.get $3
    i32.const 0
    call $~lib/typedarray/Int32Array#__set
    local.get $3
    i32.const 1
    i32.add
    local.set $3
    br $for-loop|1
   end
  end
  local.get $5
  call $~lib/fast-sha256-as/assembly/sha256/Hash#reset
  local.get $0
  i32.load
  local.tee $0
  local.get $0
  i32.const 20
  i32.sub
  i32.load offset=16
  call $assembly/utils/box/Box#constructor
  call $assembly/utils/box/Box#toHexString
  local.set $1
  i32.const 2
  global.set $~argumentsLength
  local.get $1
  i32.const 1
  call $~lib/string/String.UTF8.encode@varargs
  call $assembly/utils/logging/__log
  i32.const 1
  global.set $~argumentsLength
  local.get $0
  call $~lib/typedarray/Uint8Array.wrap@varargs
  i32.const 8
  i32.const 5
  i32.const 1
  call $assembly/utils/b32/convert
  call $assembly/utils/b32/fromDataStart<~lib/array/Array<u8>>
  local.set $0
  i32.const 1
  global.set $~argumentsLength
  i32.const 5968
  i32.const 0
  call $~lib/string/String.UTF8.encode@varargs
  local.get $0
  call $assembly/indexer/index/arrayBufferToArray
  call $assembly/utils/b32/encode
  local.tee $0
  call $~lib/string/String.UTF8.decode
  local.set $1
  i32.const 2
  global.set $~argumentsLength
  local.get $1
  i32.const 1
  call $~lib/string/String.UTF8.encode@varargs
  call $assembly/utils/logging/__log
  local.get $0
  call $~lib/string/String.UTF8.decode
  call $assembly/utils/b32/__decode
  i32.load offset=4
  local.set $0
  i32.const 1
  global.set $~argumentsLength
  local.get $0
  call $~lib/typedarray/Uint8Array.wrap@varargs
  i32.const 5
  i32.const 8
  i32.const 0
  call $assembly/utils/b32/convert
  i32.load
  local.tee $0
  local.get $0
  i32.const 20
  i32.sub
  i32.load offset=16
  call $assembly/utils/box/Box#constructor
  call $assembly/utils/box/Box#toHexString
  local.set $0
  i32.const 2
  global.set $~argumentsLength
  local.get $0
  i32.const 1
  call $~lib/string/String.UTF8.encode@varargs
  call $assembly/utils/logging/__log
 )
 (func $assembly/utils/utils/parseBytes (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  local.get $0
  i32.load
  local.get $0
  i32.load offset=4
  call $assembly/utils/box/Box#constructor
  local.tee $2
  local.get $1
  i32.store offset=4
  local.get $0
  local.get $0
  i32.load
  local.get $1
  i32.add
  i32.store
  local.get $0
  local.get $0
  i32.load offset=4
  local.get $1
  i32.sub
  i32.store offset=4
  local.get $2
 )
 (func $assembly/utils/utils/parseVarInt (param $0 i32) (result i64)
  (local $1 i64)
  (local $2 i32)
  (local $3 i32)
  local.get $0
  i32.load
  local.tee $2
  i32.load8_u
  local.set $3
  local.get $0
  local.get $2
  i32.const 1
  i32.add
  i32.store
  local.get $0
  local.get $0
  i32.load offset=4
  i32.const 1
  i32.sub
  i32.store offset=4
  block $case3|0
   block $case2|0
    block $case1|0
     block $case0|0
      local.get $3
      i32.const 253
      i32.sub
      br_table $case2|0 $case1|0 $case0|0 $case3|0
     end
     local.get $0
     i32.load
     local.tee $2
     i64.load
     local.set $1
     local.get $0
     local.get $2
     i32.const 8
     i32.add
     i32.store
     local.get $0
     local.get $0
     i32.load offset=4
     i32.const 8
     i32.sub
     i32.store offset=4
     local.get $1
     return
    end
    local.get $0
    i32.load
    local.tee $2
    i32.load
    local.set $3
    local.get $0
    local.get $2
    i32.const 4
    i32.add
    i32.store
    local.get $0
    local.get $0
    i32.load offset=4
    i32.const 4
    i32.sub
    i32.store offset=4
    local.get $3
    i64.extend_i32_u
    return
   end
   local.get $0
   i32.load
   local.tee $2
   i32.load16_u
   local.set $3
   local.get $0
   local.get $2
   i32.const 2
   i32.add
   i32.store
   local.get $0
   local.get $0
   i32.load offset=4
   i32.const 2
   i32.sub
   i32.store offset=4
   local.get $3
   i64.extend_i32_u
   return
  end
  local.get $3
  i64.extend_i32_u
 )
 (func $~lib/array/Array<assembly/blockdata/transaction/Input>#__set (param $0 i32) (param $1 i32) (param $2 i32)
  (local $3 i32)
  local.get $1
  local.get $0
  i32.load offset=12
  i32.ge_u
  if
   local.get $1
   i32.const 0
   i32.lt_s
   if
    i32.const 3344
    i32.const 5856
    i32.const 130
    i32.const 22
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i32.const 1
   i32.add
   local.tee $3
   i32.const 2
   i32.const 1
   call $~lib/array/ensureCapacity
   local.get $0
   local.get $3
   i32.store offset=12
  end
  local.get $0
  i32.load offset=4
  local.get $1
  i32.const 2
  i32.shl
  i32.add
  local.get $2
  i32.store
 )
 (func $assembly/blockdata/transaction/Output#constructor (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i64)
  i32.const 21
  i32.const 30
  call $~lib/rt/stub/__new
  local.tee $2
  i32.const 0
  i32.store
  local.get $2
  i64.const 0
  i64.store offset=8
  local.get $2
  i32.const 0
  i32.store offset=16
  local.get $2
  i32.const 0
  i32.store8 offset=20
  local.get $0
  i32.load
  local.tee $3
  i64.load
  local.set $4
  local.get $0
  local.get $3
  i32.const 8
  i32.add
  i32.store
  local.get $0
  local.get $0
  i32.load offset=4
  i32.const 8
  i32.sub
  i32.store offset=4
  local.get $2
  local.get $4
  i64.store offset=8
  local.get $2
  local.get $0
  local.get $0
  call $assembly/utils/utils/parseVarInt
  i32.wrap_i64
  call $assembly/utils/utils/parseBytes
  i32.store offset=16
  local.get $2
  local.get $3
  local.get $0
  i32.load
  local.get $3
  i32.sub
  call $assembly/utils/box/Box#constructor
  i32.store
  local.get $2
  local.get $1
  i32.store8 offset=20
  local.get $2
 )
 (func $~lib/array/Array<assembly/blockdata/transaction/Output>#push (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (local $3 i32)
  local.get $0
  local.get $0
  i32.load offset=12
  local.tee $3
  i32.const 1
  i32.add
  local.tee $2
  i32.const 2
  i32.const 1
  call $~lib/array/ensureCapacity
  local.get $0
  i32.load offset=4
  local.get $3
  i32.const 2
  i32.shl
  i32.add
  local.get $1
  i32.store
  local.get $0
  local.get $2
  i32.store offset=12
  local.get $2
 )
 (func $~lib/array/Array<assembly/blockdata/transaction/Input>#__get (param $0 i32) (param $1 i32) (result i32)
  local.get $1
  local.get $0
  i32.load offset=12
  i32.ge_u
  if
   i32.const 3344
   i32.const 5856
   i32.const 114
   i32.const 42
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  i32.load offset=4
  local.get $1
  i32.const 2
  i32.shl
  i32.add
  i32.load
  local.tee $0
  i32.eqz
  if
   i32.const 16352
   i32.const 5856
   i32.const 118
   i32.const 40
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
 )
 (func $assembly/blockdata/transaction/Transaction#constructor (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  (local $13 i32)
  local.get $0
  i32.eqz
  if
   i32.const 36
   i32.const 24
   call $~lib/rt/stub/__new
   local.set $0
  end
  local.get $0
  i32.const 0
  i32.store
  local.get $0
  i32.const 0
  i32.store offset=4
  local.get $0
  i32.const 0
  i32.store8 offset=8
  local.get $0
  i32.const 0
  i32.store offset=12
  local.get $0
  i32.const 0
  i32.store offset=16
  local.get $0
  i32.const 0
  i32.store offset=20
  local.get $0
  i32.const 0
  i32.store offset=24
  local.get $0
  i32.const 0
  i32.store offset=28
  local.get $0
  i32.const 0
  i32.store offset=32
  local.get $0
  i32.const 0
  i32.store
  i32.const 16
  i32.const 29
  call $~lib/rt/stub/__new
  local.tee $3
  i32.const 0
  i32.store
  local.get $3
  i32.const 0
  i32.store offset=4
  local.get $3
  i32.const 0
  i32.store offset=8
  local.get $3
  i32.const 0
  i32.store offset=12
  i32.const 32
  i32.const 1
  call $~lib/rt/stub/__new
  local.tee $4
  i32.const 0
  i32.const 32
  memory.fill
  local.get $3
  local.get $4
  i32.store
  local.get $3
  local.get $4
  i32.store offset=4
  local.get $3
  i32.const 32
  i32.store offset=8
  local.get $3
  i32.const 0
  i32.store offset=12
  local.get $0
  local.get $3
  i32.store offset=12
  i32.const 16
  i32.const 31
  call $~lib/rt/stub/__new
  local.tee $3
  i32.const 0
  i32.store
  local.get $3
  i32.const 0
  i32.store offset=4
  local.get $3
  i32.const 0
  i32.store offset=8
  local.get $3
  i32.const 0
  i32.store offset=12
  i32.const 32
  i32.const 1
  call $~lib/rt/stub/__new
  local.tee $4
  i32.const 0
  i32.const 32
  memory.fill
  local.get $3
  local.get $4
  i32.store
  local.get $3
  local.get $4
  i32.store offset=4
  local.get $3
  i32.const 32
  i32.store offset=8
  local.get $3
  i32.const 0
  i32.store offset=12
  local.get $0
  local.get $3
  i32.store offset=16
  local.get $0
  i32.const 0
  i32.store offset=24
  local.get $0
  i32.const 0
  i32.store offset=28
  local.get $0
  i32.const 0
  i32.store8 offset=8
  local.get $0
  i32.const 0
  call $~lib/arraybuffer/ArrayBuffer#constructor
  i32.store offset=32
  local.get $1
  i32.load
  local.tee $4
  i32.load
  local.set $3
  local.get $1
  local.get $4
  i32.const 4
  i32.add
  i32.store
  local.get $1
  local.get $1
  i32.load offset=4
  i32.const 4
  i32.sub
  i32.store offset=4
  local.get $0
  local.get $3
  i32.store offset=4
  local.get $1
  i32.load
  local.get $1
  i32.load offset=4
  call $assembly/utils/box/Box#constructor
  local.set $3
  local.get $1
  i32.load
  i32.load8_u
  local.set $5
  local.get $1
  local.get $1
  i32.load
  i32.const 1
  i32.add
  i32.store
  local.get $1
  local.get $1
  i32.load offset=4
  i32.const 1
  i32.sub
  i32.store offset=4
  local.get $1
  i32.load
  i32.load8_u
  local.set $6
  local.get $1
  local.get $1
  i32.load
  i32.const 1
  i32.add
  i32.store
  local.get $1
  local.get $1
  i32.load offset=4
  i32.const 1
  i32.sub
  i32.store offset=4
  local.get $5
  i32.eqz
  local.get $6
  i32.const 1
  i32.eq
  i32.and
  if
   local.get $0
   i32.const 1
   i32.store8 offset=8
  else
   local.get $1
   local.get $3
   i32.load
   i32.store
   local.get $1
   local.get $3
   i32.load offset=4
   i32.store offset=4
  end
  local.get $1
  i32.load
  local.set $3
  local.get $1
  call $assembly/utils/utils/parseVarInt
  i32.wrap_i64
  local.set $8
  loop $for-loop|0
   local.get $2
   local.get $8
   i32.lt_s
   if
    local.get $0
    i32.load offset=12
    local.get $2
    i32.const 24
    i32.const 25
    call $~lib/rt/stub/__new
    local.tee $5
    i32.const 0
    i32.store
    local.get $5
    i32.const 0
    i32.store offset=4
    local.get $5
    i32.const 0
    i32.store offset=8
    local.get $5
    i32.const 0
    i32.store offset=12
    local.get $5
    i32.const 0
    i32.store offset=16
    local.get $5
    i32.const 0
    i32.store offset=20
    local.get $1
    i32.load
    local.set $6
    local.get $5
    local.get $1
    i32.const 32
    call $assembly/utils/utils/parseBytes
    i32.store offset=4
    local.get $1
    i32.load
    i32.load
    local.set $7
    local.get $1
    local.get $1
    i32.load
    i32.const 4
    i32.add
    i32.store
    local.get $1
    local.get $1
    i32.load offset=4
    i32.const 4
    i32.sub
    i32.store offset=4
    local.get $5
    local.get $7
    i32.store offset=8
    local.get $5
    local.get $1
    local.get $1
    call $assembly/utils/utils/parseVarInt
    i32.wrap_i64
    call $assembly/utils/utils/parseBytes
    i32.store offset=12
    local.get $1
    i32.load
    i32.load
    local.set $7
    local.get $1
    local.get $1
    i32.load
    i32.const 4
    i32.add
    i32.store
    local.get $1
    local.get $1
    i32.load offset=4
    i32.const 4
    i32.sub
    i32.store offset=4
    local.get $5
    local.get $7
    i32.store offset=16
    local.get $5
    i32.const 0
    i32.store offset=20
    local.get $5
    local.get $6
    local.get $1
    i32.load
    local.get $6
    i32.sub
    call $assembly/utils/box/Box#constructor
    i32.store
    local.get $5
    call $~lib/array/Array<assembly/blockdata/transaction/Input>#__set
    local.get $2
    i32.const 1
    i32.add
    local.set $2
    br $for-loop|0
   end
  end
  local.get $1
  call $assembly/utils/utils/parseVarInt
  i32.wrap_i64
  local.set $5
  i32.const 0
  local.set $2
  loop $for-loop|1
   local.get $2
   local.get $5
   i32.lt_s
   if
    local.get $0
    i32.load8_u offset=8
    if (result i32)
     local.get $0
     i32.load offset=16
     local.get $1
     i32.const 1
     call $assembly/blockdata/transaction/Output#constructor
     call $~lib/array/Array<assembly/blockdata/transaction/Output>#push
    else
     local.get $0
     i32.load offset=16
     local.get $1
     i32.const 0
     call $assembly/blockdata/transaction/Output#constructor
     call $~lib/array/Array<assembly/blockdata/transaction/Output>#push
    end
    drop
    local.get $2
    i32.const 1
    i32.add
    local.set $2
    br $for-loop|1
   end
  end
  local.get $0
  local.get $3
  local.get $1
  i32.load
  local.get $3
  i32.sub
  call $assembly/utils/box/Box#constructor
  i32.store offset=28
  local.get $0
  i32.load8_u offset=8
  if
   local.get $1
   i32.load
   local.set $9
   i32.const 0
   local.set $2
   loop $for-loop|2
    local.get $2
    local.get $8
    i32.lt_s
    if
     local.get $0
     i32.load offset=12
     local.get $2
     call $~lib/array/Array<assembly/blockdata/transaction/Input>#__get
     i32.const 8
     i32.const 26
     call $~lib/rt/stub/__new
     local.tee $5
     i32.const 0
     i32.store
     local.get $5
     i32.const 0
     i32.store offset=4
     local.get $5
     i32.const 0
     i32.store
     local.get $1
     i32.load
     local.set $10
     local.get $1
     call $assembly/utils/utils/parseVarInt
     i32.wrap_i64
     local.set $11
     i32.const 16
     i32.const 28
     call $~lib/rt/stub/__new
     local.tee $3
     i32.const 0
     i32.store
     local.get $3
     i32.const 0
     i32.store offset=4
     local.get $3
     i32.const 0
     i32.store offset=8
     local.get $3
     i32.const 0
     i32.store offset=12
     local.get $11
     i32.const 268435455
     i32.gt_u
     if
      i32.const 2608
      i32.const 5856
      i32.const 70
      i32.const 60
      call $~lib/builtins/abort
      unreachable
     end
     i32.const 8
     local.get $11
     local.get $11
     i32.const 8
     i32.le_u
     select
     i32.const 2
     i32.shl
     local.tee $6
     i32.const 1
     call $~lib/rt/stub/__new
     local.tee $7
     i32.const 0
     local.get $6
     memory.fill
     local.get $3
     local.get $7
     i32.store
     local.get $3
     local.get $7
     i32.store offset=4
     local.get $3
     local.get $6
     i32.store offset=8
     local.get $3
     local.get $11
     i32.store offset=12
     local.get $5
     local.get $3
     i32.store offset=4
     i32.const 0
     local.set $3
     loop $for-loop|00
      local.get $3
      local.get $11
      i32.lt_s
      if
       local.get $5
       i32.load offset=4
       local.get $3
       i32.const 7
       i32.const 27
       call $~lib/rt/stub/__new
       local.tee $6
       i32.const 0
       i32.store
       local.get $6
       i32.const 0
       i32.store8 offset=4
       local.get $6
       i32.const 0
       i32.store8 offset=5
       local.get $6
       i32.const 0
       i32.store8 offset=6
       local.get $6
       local.get $1
       local.get $1
       call $assembly/utils/utils/parseVarInt
       i32.wrap_i64
       call $assembly/utils/utils/parseBytes
       i32.store
       local.get $6
       i32.load
       local.tee $7
       i32.load
       local.get $7
       i32.load offset=4
       call $assembly/utils/box/Box#constructor
       local.tee $7
       i32.load
       local.tee $12
       i32.load8_u
       local.set $13
       local.get $7
       local.get $12
       i32.const 1
       i32.add
       i32.store
       local.get $7
       local.get $7
       i32.load offset=4
       i32.const 1
       i32.sub
       i32.store offset=4
       local.get $6
       local.get $13
       i32.store8 offset=4
       block $break|0
        block $case2|0
         block $case1|0
          local.get $6
          i32.load8_u offset=4
          local.tee $7
          i32.const 80
          i32.ne
          if
           local.get $7
           i32.const 48
           i32.eq
           br_if $case1|0
           br $case2|0
          end
          local.get $6
          i32.const 1
          i32.store8 offset=6
          local.get $6
          i32.const 0
          i32.store8 offset=5
          br $break|0
         end
         local.get $6
         i32.const 0
         i32.store8 offset=5
         local.get $6
         i32.const 0
         i32.store8 offset=6
         br $break|0
        end
        local.get $6
        i32.const 0
        i32.store8 offset=6
        local.get $6
        i32.const 1
        i32.store8 offset=5
       end
       local.get $6
       i32.load
       i32.load offset=4
       i32.const 1
       i32.le_u
       if
        local.get $6
        i32.const 0
        i32.store8 offset=5
       end
       local.get $6
       call $~lib/array/Array<assembly/blockdata/transaction/Input>#__set
       local.get $3
       i32.const 1
       i32.add
       local.set $3
       br $for-loop|00
      end
     end
     local.get $5
     local.get $10
     local.get $1
     i32.load
     local.get $10
     i32.sub
     call $assembly/utils/box/Box#constructor
     i32.store
     local.get $5
     i32.store offset=20
     local.get $2
     i32.const 1
     i32.add
     local.set $2
     br $for-loop|2
    end
   end
   local.get $0
   local.get $9
   local.get $1
   i32.load
   local.get $9
   i32.sub
   call $assembly/utils/box/Box#constructor
   i32.store offset=24
  end
  local.get $1
  i32.load
  local.tee $2
  i32.load
  local.set $3
  local.get $1
  local.get $2
  i32.const 4
  i32.add
  i32.store
  local.get $1
  local.get $1
  i32.load offset=4
  i32.const 4
  i32.sub
  i32.store offset=4
  local.get $0
  local.get $3
  i32.store offset=20
  local.get $0
  local.get $4
  local.get $1
  i32.load
  local.get $4
  i32.sub
  call $assembly/utils/box/Box#constructor
  i32.store
  local.get $0
 )
 (func $~lib/array/Array<assembly/utils/box/Box>#constructor (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  i32.const 16
  i32.const 32
  call $~lib/rt/stub/__new
  local.tee $1
  i32.const 0
  i32.store
  local.get $1
  i32.const 0
  i32.store offset=4
  local.get $1
  i32.const 0
  i32.store offset=8
  local.get $1
  i32.const 0
  i32.store offset=12
  local.get $0
  i32.const 268435455
  i32.gt_u
  if
   i32.const 2608
   i32.const 5856
   i32.const 70
   i32.const 60
   call $~lib/builtins/abort
   unreachable
  end
  i32.const 8
  local.get $0
  local.get $0
  i32.const 8
  i32.le_u
  select
  i32.const 2
  i32.shl
  local.tee $2
  i32.const 1
  call $~lib/rt/stub/__new
  local.tee $3
  i32.const 0
  local.get $2
  memory.fill
  local.get $1
  local.get $3
  i32.store
  local.get $1
  local.get $3
  i32.store offset=4
  local.get $1
  local.get $2
  i32.store offset=8
  local.get $1
  local.get $0
  i32.store offset=12
  local.get $1
 )
 (func $assembly/blockdata/block/Header#constructor (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  i32.const 32
  i32.const 20
  call $~lib/rt/stub/__new
  local.tee $2
  i32.const 0
  i32.store
  local.get $2
  i32.const 0
  i32.store offset=4
  local.get $2
  i32.const 0
  i32.store offset=8
  local.get $2
  i32.const 0
  i32.store offset=12
  local.get $2
  i32.const 0
  i32.store offset=16
  local.get $2
  i32.const 0
  i32.store offset=20
  local.get $2
  i32.const 0
  i32.store offset=24
  local.get $2
  i32.const 0
  i32.store offset=28
  local.get $0
  i32.load
  local.set $1
  local.get $2
  i32.const 0
  i32.store offset=28
  local.get $0
  i32.load
  i32.load
  local.set $5
  local.get $0
  local.get $0
  i32.load
  i32.const 4
  i32.add
  i32.store
  local.get $0
  local.get $0
  i32.load offset=4
  i32.const 4
  i32.sub
  i32.store offset=4
  i32.const 4
  i32.const 21
  call $~lib/rt/stub/__new
  local.tee $6
  i32.const 0
  i32.store
  local.get $6
  local.get $5
  i32.store
  local.get $2
  local.get $6
  i32.store
  local.get $2
  local.get $0
  i32.const 32
  call $assembly/utils/utils/parseBytes
  i32.store offset=4
  local.get $2
  local.get $0
  i32.const 32
  call $assembly/utils/utils/parseBytes
  i32.store offset=8
  local.get $0
  i32.load
  local.tee $5
  i32.load
  local.set $6
  local.get $0
  local.get $5
  i32.const 4
  i32.add
  i32.store
  local.get $0
  local.get $0
  i32.load offset=4
  i32.const 4
  i32.sub
  i32.store offset=4
  local.get $2
  local.get $6
  i32.store offset=12
  local.get $0
  i32.load
  i32.load
  local.set $5
  local.get $0
  local.get $0
  i32.load
  i32.const 4
  i32.add
  i32.store
  local.get $0
  local.get $0
  i32.load offset=4
  i32.const 4
  i32.sub
  i32.store offset=4
  local.get $2
  local.get $5
  i32.store offset=16
  local.get $0
  i32.load
  i32.load
  local.set $5
  local.get $0
  local.get $0
  i32.load
  i32.const 4
  i32.add
  i32.store
  local.get $0
  local.get $0
  i32.load offset=4
  i32.const 4
  i32.sub
  i32.store offset=4
  local.get $2
  local.get $5
  i32.store offset=20
  local.get $2
  local.get $1
  local.get $0
  i32.load
  local.get $1
  i32.sub
  call $assembly/utils/box/Box#constructor
  i32.store offset=24
  local.get $2
  i32.load
  i32.load
  i32.const 256
  i32.and
  if (result i32)
   local.get $0
   i32.load offset=4
  else
   i32.const 0
  end
  if
   i32.const 60
   i32.const 22
   call $~lib/rt/stub/__new
   local.tee $1
   i32.const 0
   i32.store offset=48
   local.get $1
   i32.const 0
   i32.store offset=52
   local.get $1
   i32.const 0
   i32.store offset=56
   local.get $1
   i32.eqz
   if
    i32.const 48
    i32.const 23
    call $~lib/rt/stub/__new
    local.set $1
   end
   local.get $1
   i32.const 0
   i32.store offset=36
   local.get $1
   i32.const 0
   i32.store offset=40
   local.get $1
   i32.const 0
   i32.store offset=44
   local.get $1
   local.get $0
   call $assembly/blockdata/transaction/Transaction#constructor
   local.tee $1
   local.get $0
   i32.const 32
   call $assembly/utils/utils/parseBytes
   i32.store offset=36
   local.get $1
   local.get $0
   call $assembly/utils/utils/parseVarInt
   i32.wrap_i64
   call $~lib/array/Array<assembly/utils/box/Box>#constructor
   i32.store offset=40
   loop $for-loop|0
    local.get $3
    local.get $1
    i32.load offset=40
    local.tee $5
    i32.load offset=12
    i32.lt_s
    if
     local.get $5
     local.get $3
     local.get $0
     i32.const 32
     call $assembly/utils/utils/parseBytes
     call $~lib/array/Array<assembly/blockdata/transaction/Input>#__set
     local.get $3
     i32.const 1
     i32.add
     local.set $3
     br $for-loop|0
    end
   end
   local.get $0
   i32.load
   local.tee $3
   i32.load
   local.set $5
   local.get $0
   local.get $3
   i32.const 4
   i32.add
   i32.store
   local.get $0
   local.get $0
   i32.load offset=4
   i32.const 4
   i32.sub
   i32.store offset=4
   local.get $1
   local.get $5
   i32.store offset=44
   local.get $1
   i32.const 0
   i32.store offset=56
   local.get $1
   local.get $0
   call $assembly/utils/utils/parseVarInt
   i32.wrap_i64
   call $~lib/array/Array<assembly/utils/box/Box>#constructor
   i32.store offset=48
   loop $for-loop|00
    local.get $4
    local.get $1
    i32.load offset=48
    local.tee $3
    i32.load offset=12
    i32.lt_s
    if
     local.get $3
     local.get $4
     local.get $0
     i32.const 32
     call $assembly/utils/utils/parseBytes
     call $~lib/array/Array<assembly/blockdata/transaction/Input>#__set
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $for-loop|00
    end
   end
   local.get $0
   i32.load
   local.tee $3
   i32.load
   local.set $4
   local.get $0
   local.get $3
   i32.const 4
   i32.add
   i32.store
   local.get $0
   local.get $0
   i32.load offset=4
   i32.const 4
   i32.sub
   i32.store offset=4
   local.get $1
   local.get $4
   i32.store offset=52
   local.get $0
   i32.load
   local.get $0
   i32.load offset=4
   call $assembly/utils/box/Box#constructor
   local.tee $3
   i32.const 80
   i32.store offset=4
   local.get $1
   local.get $3
   call $assembly/blockdata/block/Header#constructor
   i32.store offset=56
   local.get $0
   local.get $0
   i32.load
   i32.const 80
   i32.add
   i32.store
   local.get $0
   local.get $0
   i32.load offset=4
   i32.const 80
   i32.sub
   i32.store offset=4
   local.get $2
   local.get $1
   i32.store offset=28
  end
  local.get $2
 )
 (func $assembly/blockdata/block/Block#constructor (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i64)
  (local $8 i32)
  i32.const 20
  i32.const 19
  call $~lib/rt/stub/__new
  local.tee $1
  i32.const 0
  i32.store
  local.get $1
  i32.const 0
  i32.store offset=4
  local.get $1
  i32.const 0
  i32.store offset=8
  local.get $1
  i32.const 0
  i32.store offset=12
  local.get $1
  i32.const 0
  i32.store offset=16
  local.get $1
  i32.const 0
  i32.store offset=8
  local.get $1
  i32.const 0
  i32.store offset=12
  local.get $1
  i32.const 0
  i32.store offset=16
  local.get $0
  i32.load
  local.set $4
  local.get $1
  local.get $0
  call $assembly/blockdata/block/Header#constructor
  i32.store offset=4
  local.get $0
  call $assembly/utils/utils/parseVarInt
  local.tee $7
  i32.wrap_i64
  local.set $8
  i32.const 16
  i32.const 33
  call $~lib/rt/stub/__new
  local.tee $3
  i32.const 0
  i32.store
  local.get $3
  i32.const 0
  i32.store offset=4
  local.get $3
  i32.const 0
  i32.store offset=8
  local.get $3
  i32.const 0
  i32.store offset=12
  local.get $8
  i32.const 268435455
  i32.gt_u
  if
   i32.const 2608
   i32.const 5856
   i32.const 70
   i32.const 60
   call $~lib/builtins/abort
   unreachable
  end
  i32.const 8
  local.get $8
  local.get $8
  i32.const 8
  i32.le_u
  select
  i32.const 2
  i32.shl
  local.tee $5
  i32.const 1
  call $~lib/rt/stub/__new
  local.tee $6
  i32.const 0
  local.get $5
  memory.fill
  local.get $3
  local.get $6
  i32.store
  local.get $3
  local.get $6
  i32.store offset=4
  local.get $3
  local.get $5
  i32.store offset=8
  local.get $3
  local.get $8
  i32.store offset=12
  loop $for-loop|0
   local.get $2
   local.get $7
   i32.wrap_i64
   i32.lt_s
   if
    local.get $3
    local.get $2
    i32.const 0
    local.get $0
    call $assembly/blockdata/transaction/Transaction#constructor
    call $~lib/array/Array<assembly/blockdata/transaction/Input>#__set
    local.get $2
    i32.const 1
    i32.add
    local.set $2
    br $for-loop|0
   end
  end
  local.get $1
  local.get $3
  i32.store offset=8
  local.get $1
  local.get $4
  local.get $0
  i32.load
  local.get $4
  i32.sub
  call $assembly/utils/box/Box#constructor
  i32.store
  local.get $1
 )
 (func $assembly/index/test_parseBlock
  (local $0 i32)
  call $assembly/indexer/index/__host_len
  call $~lib/arraybuffer/ArrayBuffer#constructor
  local.tee $0
  call $assembly/indexer/index/__load_input
  local.get $0
  local.get $0
  i32.const 20
  i32.sub
  i32.load offset=16
  call $assembly/utils/box/Box#constructor
  local.tee $0
  i32.load
  i32.load
  drop
  local.get $0
  local.get $0
  i32.load
  i32.const 4
  i32.add
  i32.store
  local.get $0
  local.get $0
  i32.load offset=4
  i32.const 4
  i32.sub
  i32.store offset=4
  local.get $0
  call $assembly/blockdata/block/Block#constructor
  drop
 )
 (func $assembly/utils/utils/parsePushOp (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  i32.load offset=4
  i32.eqz
  if
   local.get $0
   return
  end
  local.get $0
  i32.load
  local.tee $2
  i32.load8_u
  local.set $1
  local.get $0
  local.get $2
  i32.const 1
  i32.add
  i32.store
  local.get $0
  local.get $0
  i32.load offset=4
  i32.const 1
  i32.sub
  i32.store offset=4
  block $folding-inner0
   local.get $1
   i32.const 76
   i32.eq
   if
    local.get $0
    i32.load
    i32.load8_u
    local.set $1
    local.get $0
    local.get $0
    i32.load
    i32.const 1
    i32.add
    i32.store
    local.get $0
    local.get $0
    i32.load offset=4
    i32.const 1
    i32.sub
    i32.store offset=4
    br $folding-inner0
   end
   local.get $1
   i32.const 77
   i32.eq
   if
    local.get $0
    i32.load
    local.tee $2
    i32.load16_u
    local.set $1
    local.get $0
    local.get $2
    i32.const 2
    i32.add
    i32.store
    local.get $0
    local.get $0
    i32.load offset=4
    i32.const 2
    i32.sub
    i32.store offset=4
    br $folding-inner0
   end
   local.get $1
   i32.const 78
   i32.eq
   if
    local.get $0
    i32.load
    local.tee $2
    i32.load
    local.set $1
    local.get $0
    local.get $2
    i32.const 4
    i32.add
    i32.store
    local.get $0
    local.get $0
    i32.load offset=4
    i32.const 4
    i32.sub
    i32.store offset=4
    br $folding-inner0
   end
   local.get $1
   i32.const 79
   i32.eq
   if
    i32.const 0
    i32.const 0
    call $assembly/utils/box/Box#constructor
    return
   end
   local.get $1
   i32.const 81
   i32.eq
   if
    i32.const 0
    i32.const 0
    call $assembly/utils/box/Box#constructor
    return
   end
   local.get $1
   i32.const 96
   i32.le_u
   local.get $1
   i32.const 82
   i32.ge_u
   i32.and
   if
    i32.const 0
    local.get $1
    i32.const 80
    i32.sub
    call $assembly/utils/box/Box#constructor
    return
   end
   local.get $1
   i32.const 75
   i32.le_u
   i32.const 0
   local.get $1
   select
   br_if $folding-inner0
   local.get $1
   i32.eqz
   if
    local.get $0
    i32.load
    local.get $0
    i32.load offset=4
    call $assembly/utils/box/Box#constructor
    local.tee $0
    i32.const 0
    i32.store offset=4
    local.get $0
    return
   end
   local.get $0
   return
  end
  local.get $0
  local.get $1
  call $assembly/utils/utils/parseBytes
 )
 (func $assembly/utils/utils/decodeTag (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  i32.load
  local.tee $2
  i32.eqz
  if
   local.get $0
   i32.load offset=4
   return
  end
  local.get $0
  i32.load offset=4
  i32.eqz
  if
   i32.const 0
   return
  end
  i32.const 4
  call $~lib/arraybuffer/ArrayBuffer#constructor
  local.set $1
  local.get $0
  i32.load offset=4
  local.get $1
  i32.const 20
  i32.sub
  i32.load offset=16
  i32.gt_u
  if
   i32.const 0
   return
  end
  local.get $1
  local.get $2
  local.get $0
  i32.load offset=4
  memory.copy
  local.get $1
  i32.load
 )
 (func $assembly/blockdata/inscription/Field#constructor (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  i32.const 8
  i32.const 36
  call $~lib/rt/stub/__new
  local.tee $2
  i32.const 0
  i32.store
  local.get $2
  i32.const 0
  i32.store offset=4
  local.get $2
  local.get $0
  i32.store
  local.get $2
  local.get $1
  i32.store offset=4
  local.get $2
 )
 (func $assembly/utils/utils/_fromPushBox (param $0 i32) (result i32)
  (local $1 i32)
  local.get $0
  i32.load
  i32.eqz
  if
   local.get $0
   i32.load offset=4
   if
    i32.const 1
    call $~lib/arraybuffer/ArrayBuffer#constructor
    local.tee $1
    local.get $0
    i32.load offset=4
    i32.store8
    local.get $1
    return
   else
    i32.const 4
    call $~lib/arraybuffer/ArrayBuffer#constructor
    local.tee $0
    i32.const -1
    i32.store
    local.get $0
    return
   end
   unreachable
  end
  local.get $0
  i32.load offset=4
  call $~lib/arraybuffer/ArrayBuffer#constructor
  local.tee $1
  local.get $0
  i32.load
  local.get $0
  i32.load offset=4
  memory.copy
  local.get $1
 )
 (func $assembly/utils/utils/concat~anonymous|0 (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  local.get $0
  local.get $0
  i32.const 20
  i32.sub
  i32.load offset=16
  call $assembly/utils/box/Box#constructor
 )
 (func $~lib/rt/__newArray (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  local.get $0
  i32.const 2
  i32.shl
  local.tee $3
  i32.const 1
  call $~lib/rt/stub/__new
  local.set $2
  i32.const 16
  i32.const 32
  call $~lib/rt/stub/__new
  local.tee $1
  local.get $2
  i32.store
  local.get $1
  local.get $2
  i32.store offset=4
  local.get $1
  local.get $3
  i32.store offset=8
  local.get $1
  local.get $0
  i32.store offset=12
  local.get $1
 )
 (func $assembly/utils/box/Box.concat~anonymous|0 (param $0 i32) (param $1 i32) (param $2 i32) (param $3 i32) (result i32)
  local.get $0
  local.get $1
  i32.load offset=4
  i32.add
 )
 (func $assembly/utils/box/Box.concat~anonymous|1 (param $0 i32) (param $1 i32) (param $2 i32) (param $3 i32) (result i32)
  local.get $0
  local.get $1
  i32.load
  local.get $1
  i32.load offset=4
  memory.copy
  local.get $0
  local.get $1
  i32.load offset=4
  i32.add
 )
 (func $assembly/utils/box/Box.concat (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  local.get $0
  i32.load offset=12
  local.set $4
  loop $for-loop|0
   local.get $1
   local.get $4
   local.get $0
   i32.load offset=12
   local.tee $5
   local.get $4
   local.get $5
   i32.lt_s
   select
   i32.lt_s
   if
    local.get $0
    i32.load offset=4
    local.get $1
    i32.const 2
    i32.shl
    i32.add
    i32.load
    local.set $5
    i32.const 4
    global.set $~argumentsLength
    local.get $2
    local.get $5
    local.get $1
    local.get $0
    i32.const 16608
    i32.load
    call_indirect (type $4)
    local.set $2
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|0
   end
  end
  local.get $2
  call $~lib/arraybuffer/ArrayBuffer#constructor
  local.tee $2
  local.set $1
  local.get $0
  i32.load offset=12
  local.set $4
  loop $for-loop|01
   local.get $3
   local.get $4
   local.get $0
   i32.load offset=12
   local.tee $5
   local.get $4
   local.get $5
   i32.lt_s
   select
   i32.lt_s
   if
    local.get $0
    i32.load offset=4
    local.get $3
    i32.const 2
    i32.shl
    i32.add
    i32.load
    local.set $5
    i32.const 4
    global.set $~argumentsLength
    local.get $1
    local.get $5
    local.get $3
    local.get $0
    i32.const 16640
    i32.load
    call_indirect (type $4)
    local.set $1
    local.get $3
    i32.const 1
    i32.add
    local.set $3
    br $for-loop|01
   end
  end
  local.get $2
 )
 (func $assembly/blockdata/inscription/Inscription#constructor (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  i32.const 9
  i32.const 35
  call $~lib/rt/stub/__new
  local.tee $2
  i32.const 0
  i32.store
  local.get $2
  i32.const 0
  i32.store offset=4
  local.get $2
  i32.const 0
  i32.store8 offset=8
  local.get $2
  i32.const 0
  i32.store
  i32.const 16
  i32.const 37
  call $~lib/rt/stub/__new
  local.tee $1
  i32.const 0
  i32.store
  local.get $1
  i32.const 0
  i32.store offset=4
  local.get $1
  i32.const 0
  i32.store offset=8
  local.get $1
  i32.const 0
  i32.store offset=12
  i32.const 32
  i32.const 1
  call $~lib/rt/stub/__new
  local.tee $3
  i32.const 0
  i32.const 32
  memory.fill
  local.get $1
  local.get $3
  i32.store
  local.get $1
  local.get $3
  i32.store offset=4
  local.get $1
  i32.const 32
  i32.store offset=8
  local.get $1
  i32.const 0
  i32.store offset=12
  local.get $2
  local.get $1
  i32.store offset=4
  local.get $2
  i32.const 0
  i32.store8 offset=8
  local.get $2
  block $__inlined_func$assembly/blockdata/inscription/parseEnvelope$17 (result i32)
   local.get $0
   i32.load
   local.get $0
   i32.load offset=4
   call $assembly/utils/box/Box#constructor
   local.tee $3
   i32.load
   local.set $0
   local.get $3
   i32.load offset=4
   local.set $1
   loop $while-continue|0
    local.get $0
    local.get $3
    i32.load
    local.get $3
    i32.load offset=4
    i32.add
    i32.const 1
    i32.sub
    i32.lt_u
    if
     block $while-break|0
      local.get $0
      i32.load8_u
      if (result i32)
       i32.const 0
      else
       local.get $0
       i32.load8_u offset=1
       i32.const 99
       i32.eq
      end
      if
       local.get $0
       i32.const 2
       i32.add
       local.set $0
       local.get $1
       i32.const 2
       i32.sub
       local.set $1
       br $while-break|0
      end
      local.get $0
      local.get $1
      call $assembly/utils/box/Box#constructor
      local.set $4
      local.get $0
      i32.load8_u
      local.tee $5
      i32.const 79
      i32.le_u
      if (result i32)
       i32.const 1
      else
       local.get $5
       i32.const 96
       i32.le_u
       local.get $5
       i32.const 80
       i32.gt_u
       i32.and
      end
      if (result i32)
       local.get $4
       call $assembly/utils/utils/parsePushOp
       drop
       local.get $4
       i32.load offset=4
       local.set $1
       local.get $4
       i32.load
      else
       local.get $1
       i32.const 1
       i32.sub
       local.set $1
       local.get $0
       i32.const 1
       i32.add
      end
      local.set $0
      br $while-continue|0
     end
    end
   end
   local.get $0
   local.get $1
   call $assembly/utils/box/Box#constructor
   local.set $1
   loop $while-continue|1
    local.get $1
    i32.load offset=4
    if
     local.get $1
     i32.load
     local.tee $3
     i32.load8_u
     i32.const 104
     i32.eq
     if
      local.get $0
      local.get $3
      local.get $0
      i32.sub
      call $assembly/utils/box/Box#constructor
      br $__inlined_func$assembly/blockdata/inscription/parseEnvelope$17
     end
     local.get $1
     call $assembly/utils/utils/parsePushOp
     drop
     br $while-continue|1
    end
   end
   i32.const 0
  end
  local.tee $1
  i32.load
  local.get $1
  i32.load offset=4
  call $assembly/utils/box/Box#constructor
  i32.store
  local.get $1
  call $assembly/utils/utils/parsePushOp
  i32.load
  i32.load
  i32.const 16777215
  i32.and
  i32.const 6582895
  i32.ne
  if
   i32.const 0
   i32.const 16480
   i32.const 81
   i32.const 7
   call $~lib/builtins/abort
   unreachable
  end
  i32.const 16
  i32.const 38
  call $~lib/rt/stub/__new
  local.tee $4
  i32.const 0
  i32.store
  local.get $4
  i32.const 0
  i32.store offset=4
  local.get $4
  i32.const 0
  i32.store offset=8
  local.get $4
  i32.const 0
  i32.store offset=12
  i32.const 32
  i32.const 1
  call $~lib/rt/stub/__new
  local.tee $0
  i32.const 0
  i32.const 32
  memory.fill
  local.get $4
  local.get $0
  i32.store
  local.get $4
  local.get $0
  i32.store offset=4
  local.get $4
  i32.const 32
  i32.store offset=8
  local.get $4
  i32.const 0
  i32.store offset=12
  local.get $1
  call $assembly/utils/utils/parsePushOp
  local.set $0
  loop $for-loop|0
   local.get $1
   i32.load offset=4
   if
    block $for-break0
     local.get $0
     call $assembly/utils/utils/decodeTag
     if (result i32)
      local.get $0
      call $assembly/utils/utils/decodeTag
      i32.const 11
      i32.le_u
     else
      i32.const 0
     end
     if
      local.get $0
      call $assembly/utils/utils/decodeTag
      local.set $0
      local.get $2
      i32.load offset=4
      local.get $0
      local.get $1
      call $assembly/utils/utils/parsePushOp
      call $assembly/utils/utils/_fromPushBox
      call $assembly/blockdata/inscription/Field#constructor
      call $~lib/array/Array<assembly/blockdata/transaction/Output>#push
      drop
     else
      local.get $0
      call $assembly/utils/utils/decodeTag
      i32.eqz
      br_if $for-break0
     end
     local.get $1
     call $assembly/utils/utils/parsePushOp
     local.set $0
     br $for-loop|0
    end
   end
  end
  local.get $1
  if
   loop $while-continue|10
    local.get $1
    i32.load offset=4
    if
     local.get $4
     local.get $1
     call $assembly/utils/utils/parsePushOp
     call $assembly/utils/utils/_fromPushBox
     call $~lib/array/Array<assembly/blockdata/transaction/Output>#push
     drop
     br $while-continue|10
    end
   end
  end
  local.get $4
  i32.load offset=12
  local.tee $5
  call $~lib/rt/__newArray
  local.tee $0
  i32.load offset=4
  local.set $6
  i32.const 0
  local.set $1
  loop $for-loop|00
   local.get $1
   local.get $5
   local.get $4
   i32.load offset=12
   local.tee $3
   local.get $3
   local.get $5
   i32.gt_s
   select
   i32.lt_s
   if
    local.get $1
    i32.const 2
    i32.shl
    local.tee $3
    local.get $4
    i32.load offset=4
    i32.add
    i32.load
    local.set $7
    i32.const 3
    global.set $~argumentsLength
    local.get $3
    local.get $6
    i32.add
    local.get $7
    local.get $1
    local.get $4
    i32.const 16576
    i32.load
    call_indirect (type $8)
    i32.store
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|00
   end
  end
  local.get $0
  call $assembly/utils/box/Box.concat
  local.set $0
  local.get $2
  i32.load offset=4
  i32.const 0
  local.get $0
  call $assembly/blockdata/inscription/Field#constructor
  call $~lib/array/Array<assembly/blockdata/transaction/Output>#push
  drop
  local.get $2
 )
 (func $assembly/blockdata/transaction/Input#inscription (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  local.get $0
  i32.load offset=20
  i32.eqz
  if
   i32.const 0
   return
  end
  local.get $0
  i32.load offset=20
  local.tee $2
  i32.load offset=4
  local.tee $3
  i32.load offset=12
  local.set $1
  i32.const 0
  local.set $0
  block $__inlined_func$assembly/blockdata/witness/Witness#tapscript$998
   local.get $1
   i32.const 0
   i32.le_s
   br_if $__inlined_func$assembly/blockdata/witness/Witness#tapscript$998
   local.get $1
   i32.const 2
   i32.ge_s
   if (result i32)
    local.get $1
    i32.const 1
    i32.sub
    local.get $1
    local.get $3
    local.get $1
    i32.const 1
    i32.sub
    call $~lib/array/Array<assembly/blockdata/transaction/Input>#__get
    i32.load8_u offset=6
    select
    local.tee $1
    i32.const 1
    i32.le_s
    br_if $__inlined_func$assembly/blockdata/witness/Witness#tapscript$998
    local.get $2
    i32.load offset=4
    local.get $1
    i32.const 2
    i32.sub
    call $~lib/array/Array<assembly/blockdata/transaction/Input>#__get
    i32.load8_u offset=5
    i32.eqz
    br_if $__inlined_func$assembly/blockdata/witness/Witness#tapscript$998
    local.get $2
    i32.load offset=4
    local.get $1
    i32.const 1
    i32.sub
    call $~lib/array/Array<assembly/blockdata/transaction/Input>#__get
    i32.load
    local.tee $3
    i32.load offset=4
    i32.const 33
    i32.lt_u
    if (result i32)
     i32.const 1
    else
     local.get $3
     i32.load offset=4
     i32.const 33
     i32.sub
     i32.const 31
     i32.and
    end
    br_if $__inlined_func$assembly/blockdata/witness/Witness#tapscript$998
    local.get $2
    i32.load offset=4
    local.get $1
    i32.const 2
    i32.sub
    call $~lib/array/Array<assembly/blockdata/transaction/Input>#__get
    i32.load
    local.tee $0
    i32.load
    local.get $0
    i32.load offset=4
    call $assembly/utils/box/Box#constructor
   else
    i32.const 0
   end
   local.set $0
  end
  local.get $0
  if (result i32)
   block $__inlined_func$assembly/blockdata/witness/Witness.isInscribed$43 (result i32)
    local.get $0
    i32.load
    local.get $0
    i32.load offset=4
    call $assembly/utils/box/Box#constructor
    local.tee $2
    i32.load
    local.tee $1
    local.get $2
    i32.load offset=4
    local.tee $3
    i32.add
    local.set $2
    loop $while-continue|0
     local.get $1
     local.get $2
     i32.const 1
     i32.sub
     i32.lt_u
     if
      block $while-break|0
       local.get $1
       i32.load8_u
       if (result i32)
        i32.const 0
       else
        local.get $1
        i32.load8_u offset=1
        i32.const 99
        i32.eq
       end
       if
        local.get $1
        i32.const 2
        i32.add
        local.set $1
        local.get $3
        i32.const 2
        i32.sub
        local.set $3
        br $while-break|0
       end
       local.get $1
       i32.const 1
       i32.add
       local.set $1
       local.get $3
       i32.const 1
       i32.sub
       local.set $3
       br $while-continue|0
      end
     end
    end
    loop $while-continue|1
     local.get $1
     local.get $2
     i32.lt_u
     if
      local.get $2
      i32.load8_u
      i32.const 104
      i32.ne
      if
       local.get $2
       i32.const 1
       i32.sub
       local.set $2
       local.get $3
       i32.const 1
       i32.sub
       local.set $3
       br $while-continue|1
      end
     end
    end
    i32.const 0
    local.get $1
    local.get $3
    call $assembly/utils/box/Box#constructor
    local.tee $1
    i32.load offset=4
    if (result i32)
     local.get $1
     i32.load
     i32.load8_u
     local.tee $2
     i32.const 79
     i32.le_u
     if (result i32)
      i32.const 1
     else
      local.get $2
      i32.const 96
      i32.le_u
      local.get $2
      i32.const 80
      i32.gt_u
      i32.and
     end
    else
     i32.const 0
    end
    i32.eqz
    br_if $__inlined_func$assembly/blockdata/witness/Witness.isInscribed$43
    drop
    local.get $1
    call $assembly/utils/utils/parsePushOp
    i32.load
    i32.load
    i32.const 16777215
    i32.and
    i32.const 6582895
    i32.eq
   end
  else
   i32.const 0
  end
  i32.eqz
  if
   i32.const 0
   return
  end
  local.get $0
  call $assembly/blockdata/inscription/Inscription#constructor
 )
 (func $assembly/index/test_parseWitness
  (local $0 i32)
  call $assembly/indexer/index/__host_len
  call $~lib/arraybuffer/ArrayBuffer#constructor
  local.tee $0
  call $assembly/indexer/index/__load_input
  local.get $0
  local.get $0
  i32.const 20
  i32.sub
  i32.load offset=16
  call $assembly/utils/box/Box#constructor
  local.tee $0
  i32.load
  i32.load
  drop
  local.get $0
  local.get $0
  i32.load
  i32.const 4
  i32.add
  i32.store
  local.get $0
  local.get $0
  i32.load offset=4
  i32.const 4
  i32.sub
  i32.store offset=4
  i32.const 0
  local.get $0
  call $assembly/blockdata/transaction/Transaction#constructor
  i32.load offset=12
  i32.const 1
  call $~lib/array/Array<assembly/blockdata/transaction/Input>#__get
  call $assembly/blockdata/transaction/Input#inscription
  drop
 )
 (func $assembly/indexer/tables/IndexPointer#select (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  i32.const 2
  call $~lib/rt/__newArray
  local.tee $2
  i32.load offset=4
  drop
  local.get $2
  i32.const 0
  local.get $0
  local.get $0
  i32.const 20
  i32.sub
  i32.load offset=16
  call $assembly/utils/box/Box#constructor
  call $~lib/array/Array<assembly/blockdata/transaction/Input>#__set
  local.get $2
  i32.const 1
  local.get $1
  local.get $1
  i32.const 20
  i32.sub
  i32.load offset=16
  call $assembly/utils/box/Box#constructor
  call $~lib/array/Array<assembly/blockdata/transaction/Input>#__set
  local.get $2
  call $assembly/utils/box/Box.concat
 )
 (func $assembly/indexer/widebst/BSTU128#getMaskPointer (param $0 i32) (param $1 i32) (result i32)
  local.get $0
  i32.load
  local.get $1
  call $assembly/indexer/tables/IndexPointer#select
  local.set $0
  i32.const 1
  global.set $~argumentsLength
  local.get $0
  i32.const 16736
  i32.const 0
  call $~lib/string/String.UTF8.encode@varargs
  call $assembly/indexer/tables/IndexPointer#select
 )
 (func $~lib/util/hash/HASH<~lib/string/String> (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  local.get $0
  if (result i32)
   local.get $0
   local.tee $1
   i32.const 20
   i32.sub
   i32.load offset=16
   i32.const -2
   i32.and
   local.tee $3
   i32.const 16
   i32.ge_u
   if (result i32)
    i32.const 606290984
    local.set $2
    i32.const -2048144777
    local.set $4
    i32.const 1640531535
    local.set $5
    local.get $1
    local.get $3
    i32.add
    i32.const 16
    i32.sub
    local.set $7
    loop $while-continue|0
     local.get $1
     local.get $7
     i32.le_u
     if
      local.get $2
      local.get $1
      i32.load
      i32.const -2048144777
      i32.mul
      i32.add
      i32.const 13
      i32.rotl
      i32.const -1640531535
      i32.mul
      local.set $2
      local.get $4
      local.get $1
      i32.load offset=4
      i32.const -2048144777
      i32.mul
      i32.add
      i32.const 13
      i32.rotl
      i32.const -1640531535
      i32.mul
      local.set $4
      local.get $6
      local.get $1
      i32.load offset=8
      i32.const -2048144777
      i32.mul
      i32.add
      i32.const 13
      i32.rotl
      i32.const -1640531535
      i32.mul
      local.set $6
      local.get $5
      local.get $1
      i32.load offset=12
      i32.const -2048144777
      i32.mul
      i32.add
      i32.const 13
      i32.rotl
      i32.const -1640531535
      i32.mul
      local.set $5
      local.get $1
      i32.const 16
      i32.add
      local.set $1
      br $while-continue|0
     end
    end
    local.get $3
    local.get $2
    i32.const 1
    i32.rotl
    local.get $4
    i32.const 7
    i32.rotl
    i32.add
    local.get $6
    i32.const 12
    i32.rotl
    i32.add
    local.get $5
    i32.const 18
    i32.rotl
    i32.add
    i32.add
   else
    local.get $3
    i32.const 374761393
    i32.add
   end
   local.set $2
   local.get $0
   local.get $3
   i32.add
   i32.const 4
   i32.sub
   local.set $4
   loop $while-continue|1
    local.get $1
    local.get $4
    i32.le_u
    if
     local.get $2
     local.get $1
     i32.load
     i32.const -1028477379
     i32.mul
     i32.add
     i32.const 17
     i32.rotl
     i32.const 668265263
     i32.mul
     local.set $2
     local.get $1
     i32.const 4
     i32.add
     local.set $1
     br $while-continue|1
    end
   end
   local.get $0
   local.get $3
   i32.add
   local.set $0
   loop $while-continue|2
    local.get $0
    local.get $1
    i32.gt_u
    if
     local.get $2
     local.get $1
     i32.load8_u
     i32.const 374761393
     i32.mul
     i32.add
     i32.const 11
     i32.rotl
     i32.const -1640531535
     i32.mul
     local.set $2
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|2
    end
   end
   local.get $2
   local.get $2
   i32.const 15
   i32.shr_u
   i32.xor
   i32.const -2048144777
   i32.mul
   local.tee $0
   i32.const 13
   i32.shr_u
   local.get $0
   i32.xor
   i32.const -1028477379
   i32.mul
   local.tee $0
   i32.const 16
   i32.shr_u
   local.get $0
   i32.xor
  else
   i32.const 0
  end
 )
 (func $"~lib/map/Map<~lib/string/String,~lib/arraybuffer/ArrayBuffer>#find" (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  local.get $0
  i32.load
  local.get $2
  local.get $0
  i32.load offset=4
  i32.and
  i32.const 2
  i32.shl
  i32.add
  i32.load
  local.set $0
  loop $while-continue|0
   local.get $0
   if
    local.get $0
    i32.load offset=8
    local.tee $2
    i32.const 1
    i32.and
    if (result i32)
     i32.const 0
    else
     local.get $0
     i32.load
     local.get $1
     call $~lib/string/String.__eq
    end
    if
     local.get $0
     return
    end
    local.get $2
    i32.const -2
    i32.and
    local.set $0
    br $while-continue|0
   end
  end
  i32.const 0
 )
 (func $"~lib/map/Map<~lib/string/String,~lib/arraybuffer/ArrayBuffer>#set" (param $0 i32) (param $1 i32) (param $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  local.get $0
  local.get $1
  local.get $1
  call $~lib/util/hash/HASH<~lib/string/String>
  local.tee $7
  call $"~lib/map/Map<~lib/string/String,~lib/arraybuffer/ArrayBuffer>#find"
  local.tee $3
  if
   local.get $3
   local.get $2
   i32.store offset=4
  else
   local.get $0
   i32.load offset=12
   local.tee $3
   local.get $0
   i32.load offset=16
   i32.eq
   if
    local.get $0
    i32.load offset=20
    local.get $3
    i32.const 3
    i32.mul
    i32.const 4
    i32.div_s
    i32.lt_s
    if (result i32)
     local.get $0
     i32.load offset=4
    else
     local.get $0
     i32.load offset=4
     i32.const 1
     i32.shl
     i32.const 1
     i32.or
    end
    local.tee $9
    i32.const 1
    i32.add
    local.tee $3
    i32.const 2
    i32.shl
    call $~lib/arraybuffer/ArrayBuffer#constructor
    local.set $8
    local.get $3
    i32.const 3
    i32.shl
    i32.const 3
    i32.div_s
    local.tee $6
    i32.const 12
    i32.mul
    call $~lib/arraybuffer/ArrayBuffer#constructor
    local.set $4
    local.get $0
    i32.load offset=8
    local.tee $10
    local.get $0
    i32.load offset=16
    i32.const 12
    i32.mul
    i32.add
    local.set $5
    local.get $4
    local.set $3
    loop $while-continue|0
     local.get $5
     local.get $10
     i32.ne
     if
      local.get $10
      i32.load offset=8
      i32.const 1
      i32.and
      i32.eqz
      if
       local.get $3
       local.get $10
       i32.load
       local.tee $11
       i32.store
       local.get $3
       local.get $10
       i32.load offset=4
       i32.store offset=4
       local.get $3
       local.get $8
       local.get $11
       call $~lib/util/hash/HASH<~lib/string/String>
       local.get $9
       i32.and
       i32.const 2
       i32.shl
       i32.add
       local.tee $11
       i32.load
       i32.store offset=8
       local.get $11
       local.get $3
       i32.store
       local.get $3
       i32.const 12
       i32.add
       local.set $3
      end
      local.get $10
      i32.const 12
      i32.add
      local.set $10
      br $while-continue|0
     end
    end
    local.get $0
    local.get $8
    i32.store
    local.get $0
    local.get $9
    i32.store offset=4
    local.get $0
    local.get $4
    i32.store offset=8
    local.get $0
    local.get $6
    i32.store offset=12
    local.get $0
    local.get $0
    i32.load offset=20
    i32.store offset=16
   end
   local.get $0
   i32.load offset=8
   local.set $3
   local.get $0
   local.get $0
   i32.load offset=16
   local.tee $4
   i32.const 1
   i32.add
   i32.store offset=16
   local.get $3
   local.get $4
   i32.const 12
   i32.mul
   i32.add
   local.tee $3
   local.get $1
   i32.store
   local.get $3
   local.get $2
   i32.store offset=4
   local.get $0
   local.get $0
   i32.load offset=20
   i32.const 1
   i32.add
   i32.store offset=20
   local.get $3
   local.get $0
   i32.load
   local.get $7
   local.get $0
   i32.load offset=4
   i32.and
   i32.const 2
   i32.shl
   i32.add
   local.tee $0
   i32.load
   i32.store offset=8
   local.get $0
   local.get $3
   i32.store
  end
 )
 (func $"~lib/map/Map<~lib/string/String,~lib/arraybuffer/ArrayBuffer>#get" (param $0 i32) (param $1 i32) (result i32)
  local.get $0
  local.get $1
  local.get $1
  call $~lib/util/hash/HASH<~lib/string/String>
  call $"~lib/map/Map<~lib/string/String,~lib/arraybuffer/ArrayBuffer>#find"
  local.tee $0
  i32.eqz
  if
   i32.const 16768
   i32.const 16832
   i32.const 105
   i32.const 17
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  i32.load offset=4
 )
 (func $assembly/indexer/tables/IndexPointer#get (param $0 i32) (result i32)
  (local $1 i32)
  local.get $0
  local.get $0
  i32.const 20
  i32.sub
  i32.load offset=16
  call $assembly/utils/box/Box#constructor
  call $assembly/utils/box/Box#toHexString
  local.set $1
  global.get $assembly/indexer/index/_updates
  local.get $1
  local.get $1
  call $~lib/util/hash/HASH<~lib/string/String>
  call $"~lib/map/Map<~lib/string/String,~lib/arraybuffer/ArrayBuffer>#find"
  if
   global.get $assembly/indexer/index/_updates
   local.get $1
   call $"~lib/map/Map<~lib/string/String,~lib/arraybuffer/ArrayBuffer>#get"
   local.set $0
  else
   local.get $0
   local.get $0
   call $assembly/indexer/index/__get_len
   call $~lib/arraybuffer/ArrayBuffer#constructor
   local.tee $0
   call $assembly/indexer/index/__get
   global.get $assembly/indexer/index/_updates
   local.get $1
   local.get $0
   call $"~lib/map/Map<~lib/string/String,~lib/arraybuffer/ArrayBuffer>#set"
  end
  local.get $0
  local.get $0
  i32.const 20
  i32.sub
  i32.load offset=16
  call $assembly/utils/box/Box#constructor
  local.tee $0
  i32.load offset=4
  call $~lib/arraybuffer/ArrayBuffer#constructor
  local.tee $1
  local.get $0
  i32.load
  local.get $0
  i32.load offset=4
  memory.copy
  local.get $1
 )
 (func $assembly/indexer/tables/IndexPointer#set (param $0 i32) (param $1 i32)
  (local $2 i32)
  local.get $0
  local.get $0
  i32.const 20
  i32.sub
  i32.load offset=16
  call $assembly/utils/box/Box#constructor
  call $assembly/utils/box/Box#toHexString
  local.set $2
  global.get $assembly/indexer/index/_updates
  local.get $2
  local.get $1
  call $"~lib/map/Map<~lib/string/String,~lib/arraybuffer/ArrayBuffer>#set"
  global.get $assembly/indexer/index/_updateKeys
  local.get $2
  local.get $0
  call $"~lib/map/Map<~lib/string/String,~lib/arraybuffer/ArrayBuffer>#set"
 )
 (func $assembly/indexer/widebst/BSTU128#set (param $0 i32) (param $1 i32) (param $2 i32)
  (local $3 i64)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  i32.const 16
  call $~lib/arraybuffer/ArrayBuffer#constructor
  local.tee $6
  local.get $1
  i64.load offset=8
  local.tee $3
  i64.const 8
  i64.shr_u
  i64.const 71777214294589695
  i64.and
  local.get $3
  i64.const 71777214294589695
  i64.and
  i64.const 8
  i64.shl
  i64.or
  local.tee $3
  i64.const 16
  i64.shr_u
  i64.const 281470681808895
  i64.and
  local.get $3
  i64.const 281470681808895
  i64.and
  i64.const 16
  i64.shl
  i64.or
  i64.const 32
  i64.rotr
  i64.store
  local.get $6
  local.get $1
  i64.load
  local.tee $3
  i64.const 8
  i64.shr_u
  i64.const 71777214294589695
  i64.and
  local.get $3
  i64.const 71777214294589695
  i64.and
  i64.const 8
  i64.shl
  i64.or
  local.tee $3
  i64.const 16
  i64.shr_u
  i64.const 281470681808895
  i64.and
  local.get $3
  i64.const 281470681808895
  i64.and
  i64.const 16
  i64.shl
  i64.or
  i64.const 32
  i64.rotr
  i64.store offset=8
  local.get $2
  i32.const 20
  i32.sub
  i32.load offset=16
  if
   i32.const 16
   call $~lib/arraybuffer/ArrayBuffer#constructor
   local.tee $5
   local.get $1
   i64.load offset=8
   local.tee $3
   i64.const 8
   i64.shr_u
   i64.const 71777214294589695
   i64.and
   local.get $3
   i64.const 71777214294589695
   i64.and
   i64.const 8
   i64.shl
   i64.or
   local.tee $3
   i64.const 16
   i64.shr_u
   i64.const 281470681808895
   i64.and
   local.get $3
   i64.const 281470681808895
   i64.and
   i64.const 16
   i64.shl
   i64.or
   i64.const 32
   i64.rotr
   i64.store
   local.get $5
   local.get $1
   i64.load
   local.tee $3
   i64.const 8
   i64.shr_u
   i64.const 71777214294589695
   i64.and
   local.get $3
   i64.const 71777214294589695
   i64.and
   i64.const 8
   i64.shl
   i64.or
   local.tee $3
   i64.const 16
   i64.shr_u
   i64.const 281470681808895
   i64.and
   local.get $3
   i64.const 281470681808895
   i64.and
   i64.const 16
   i64.shl
   i64.or
   i64.const 32
   i64.rotr
   i64.store offset=8
   loop $for-loop|0
    local.get $4
    i32.const 16
    i32.lt_s
    if
     local.get $4
     call $~lib/arraybuffer/ArrayBuffer#constructor
     local.set $1
     local.get $4
     if
      local.get $1
      local.get $5
      local.get $4
      memory.copy
     end
     local.get $0
     local.get $1
     call $assembly/indexer/widebst/BSTU128#getMaskPointer
     local.tee $7
     call $assembly/indexer/tables/IndexPointer#get
     local.tee $1
     i32.const 20
     i32.sub
     i32.load offset=16
     i32.eqz
     if
      i32.const 32
      call $~lib/arraybuffer/ArrayBuffer#constructor
      local.set $1
     end
     local.get $4
     local.get $5
     i32.add
     i32.load8_u
     local.tee $8
     i32.const 3
     i32.shr_u
     local.get $1
     i32.add
     local.tee $9
     i32.load8_u
     i32.const 1
     i32.const 7
     local.get $8
     i32.const 7
     i32.and
     i32.sub
     i32.const 7
     i32.and
     i32.shl
     local.tee $8
     i32.and
     i32.eqz
     if
      local.get $9
      local.get $8
      local.get $9
      i32.load8_u
      i32.or
      i32.store8
      local.get $7
      local.get $1
      call $assembly/indexer/tables/IndexPointer#set
     end
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $for-loop|0
    end
   end
  else
   i32.const 16
   call $~lib/arraybuffer/ArrayBuffer#constructor
   local.tee $7
   local.get $1
   i64.load offset=8
   local.tee $3
   i64.const 8
   i64.shr_u
   i64.const 71777214294589695
   i64.and
   local.get $3
   i64.const 71777214294589695
   i64.and
   i64.const 8
   i64.shl
   i64.or
   local.tee $3
   i64.const 16
   i64.shr_u
   i64.const 281470681808895
   i64.and
   local.get $3
   i64.const 281470681808895
   i64.and
   i64.const 16
   i64.shl
   i64.or
   i64.const 32
   i64.rotr
   i64.store
   local.get $7
   local.get $1
   i64.load
   local.tee $3
   i64.const 8
   i64.shr_u
   i64.const 71777214294589695
   i64.and
   local.get $3
   i64.const 71777214294589695
   i64.and
   i64.const 8
   i64.shl
   i64.or
   local.tee $3
   i64.const 16
   i64.shr_u
   i64.const 281470681808895
   i64.and
   local.get $3
   i64.const 281470681808895
   i64.and
   i64.const 16
   i64.shl
   i64.or
   i64.const 32
   i64.rotr
   i64.store offset=8
   i32.const 15
   local.set $4
   loop $for-loop|00
    local.get $4
    i32.const 0
    i32.ge_s
    if
     block $for-break0
      local.get $4
      call $~lib/arraybuffer/ArrayBuffer#constructor
      local.set $1
      local.get $4
      if
       local.get $1
       local.get $7
       local.get $4
       memory.copy
      end
      local.get $0
      local.get $1
      call $assembly/indexer/widebst/BSTU128#getMaskPointer
      local.tee $8
      call $assembly/indexer/tables/IndexPointer#get
      local.tee $1
      i32.const 20
      i32.sub
      i32.load offset=16
      i32.eqz
      if
       i32.const 32
       call $~lib/arraybuffer/ArrayBuffer#constructor
       local.set $1
      end
      local.get $4
      local.get $7
      i32.add
      i32.load8_u
      local.tee $5
      i32.const 3
      i32.shr_u
      local.get $1
      i32.add
      local.tee $9
      i32.load8_u
      i32.const 1
      i32.const 7
      local.get $5
      i32.const 7
      i32.and
      i32.sub
      i32.const 7
      i32.and
      local.tee $5
      i32.shl
      i32.and
      if
       local.get $9
       local.get $9
       i32.load8_u
       i32.const -2
       local.get $5
       i32.rotl
       i32.and
       i32.store8
      end
      block $__inlined_func$assembly/indexer/bst/isZeroU256$502 (result i32)
       i32.const 0
       local.set $5
       loop $for-loop|001
        local.get $5
        i32.const 4
        i32.lt_s
        if
         i32.const 0
         local.get $1
         local.get $5
         i32.const 3
         i32.shl
         i32.add
         i64.load
         i64.const 0
         i64.ne
         br_if $__inlined_func$assembly/indexer/bst/isZeroU256$502
         drop
         local.get $5
         i32.const 1
         i32.add
         local.set $5
         br $for-loop|001
        end
       end
       i32.const 1
      end
      if
       local.get $8
       i32.const 0
       call $~lib/arraybuffer/ArrayBuffer#constructor
       call $assembly/indexer/tables/IndexPointer#set
      else
       local.get $8
       local.get $1
       call $assembly/indexer/tables/IndexPointer#set
       br $for-break0
      end
      local.get $4
      i32.const 1
      i32.sub
      local.set $4
      br $for-loop|00
     end
    end
   end
  end
  local.get $0
  i32.load
  local.get $6
  call $assembly/indexer/tables/IndexPointer#select
  local.get $2
  call $assembly/indexer/tables/IndexPointer#set
 )
 (func $~lib/array/Array<u64>#constructor (result i32)
  (local $0 i32)
  (local $1 i32)
  i32.const 16
  i32.const 45
  call $~lib/rt/stub/__new
  local.tee $0
  i32.const 0
  i32.store
  local.get $0
  i32.const 0
  i32.store offset=4
  local.get $0
  i32.const 0
  i32.store offset=8
  local.get $0
  i32.const 0
  i32.store offset=12
  i32.const 64
  i32.const 1
  call $~lib/rt/stub/__new
  local.tee $1
  i32.const 0
  i32.const 64
  memory.fill
  local.get $0
  local.get $1
  i32.store
  local.get $0
  local.get $1
  i32.store offset=4
  local.get $0
  i32.const 64
  i32.store offset=8
  local.get $0
  i32.const 4
  i32.store offset=12
  local.get $0
 )
 (func $~lib/array/Array<u64>#__set (param $0 i32) (param $1 i32) (param $2 i64)
  (local $3 i32)
  local.get $1
  local.get $0
  i32.load offset=12
  i32.ge_u
  if
   local.get $1
   i32.const 0
   i32.lt_s
   if
    i32.const 3344
    i32.const 5856
    i32.const 130
    i32.const 22
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i32.const 1
   i32.add
   local.tee $3
   i32.const 3
   i32.const 1
   call $~lib/array/ensureCapacity
   local.get $0
   local.get $3
   i32.store offset=12
  end
  local.get $0
  i32.load offset=4
  local.get $1
  i32.const 3
  i32.shl
  i32.add
  local.get $2
  i64.store
 )
 (func $~lib/array/Array<u64>#__get (param $0 i32) (param $1 i32) (result i64)
  local.get $1
  local.get $0
  i32.load offset=12
  i32.ge_u
  if
   i32.const 3344
   i32.const 5856
   i32.const 114
   i32.const 42
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  i32.load offset=4
  local.get $1
  i32.const 3
  i32.shl
  i32.add
  i64.load
 )
 (func $assembly/indexer/bst/maskGreaterThan (param $0 i32) (param $1 i32)
  (local $2 i64)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  call $~lib/array/Array<u64>#constructor
  local.tee $3
  i32.const 0
  local.get $0
  i64.load
  local.tee $2
  i64.const 8
  i64.shr_u
  i64.const 71777214294589695
  i64.and
  local.get $2
  i64.const 71777214294589695
  i64.and
  i64.const 8
  i64.shl
  i64.or
  local.tee $2
  i64.const 16
  i64.shr_u
  i64.const 281470681808895
  i64.and
  local.get $2
  i64.const 281470681808895
  i64.and
  i64.const 16
  i64.shl
  i64.or
  i64.const 32
  i64.rotr
  call $~lib/array/Array<u64>#__set
  local.get $3
  i32.const 1
  local.get $0
  i64.load offset=8
  local.tee $2
  i64.const 8
  i64.shr_u
  i64.const 71777214294589695
  i64.and
  local.get $2
  i64.const 71777214294589695
  i64.and
  i64.const 8
  i64.shl
  i64.or
  local.tee $2
  i64.const 16
  i64.shr_u
  i64.const 281470681808895
  i64.and
  local.get $2
  i64.const 281470681808895
  i64.and
  i64.const 16
  i64.shl
  i64.or
  i64.const 32
  i64.rotr
  call $~lib/array/Array<u64>#__set
  local.get $3
  i32.const 2
  local.get $0
  i64.load offset=16
  local.tee $2
  i64.const 8
  i64.shr_u
  i64.const 71777214294589695
  i64.and
  local.get $2
  i64.const 71777214294589695
  i64.and
  i64.const 8
  i64.shl
  i64.or
  local.tee $2
  i64.const 16
  i64.shr_u
  i64.const 281470681808895
  i64.and
  local.get $2
  i64.const 281470681808895
  i64.and
  i64.const 16
  i64.shl
  i64.or
  i64.const 32
  i64.rotr
  call $~lib/array/Array<u64>#__set
  local.get $3
  i32.const 3
  local.get $0
  i64.load offset=24
  local.tee $2
  i64.const 8
  i64.shr_u
  i64.const 71777214294589695
  i64.and
  local.get $2
  i64.const 71777214294589695
  i64.and
  i64.const 8
  i64.shl
  i64.or
  local.tee $2
  i64.const 16
  i64.shr_u
  i64.const 281470681808895
  i64.and
  local.get $2
  i64.const 281470681808895
  i64.and
  i64.const 16
  i64.shl
  i64.or
  i64.const 32
  i64.rotr
  call $~lib/array/Array<u64>#__set
  local.get $3
  local.get $1
  i32.const 255
  i32.and
  local.tee $6
  i32.const 6
  i32.shr_u
  local.tee $1
  local.get $3
  local.get $1
  call $~lib/array/Array<u64>#__get
  i64.const 1
  local.get $6
  i32.const 63
  i32.and
  local.tee $6
  i32.const 1
  i32.add
  i64.extend_i32_u
  i64.shl
  i64.const 1
  i64.sub
  i64.const 63
  local.get $6
  i64.extend_i32_u
  i64.sub
  i64.shl
  i64.const -1
  i64.xor
  i64.and
  call $~lib/array/Array<u64>#__set
  loop $for-loop|0
   local.get $1
   local.get $5
   i32.gt_u
   if
    local.get $3
    local.get $5
    i64.const 0
    call $~lib/array/Array<u64>#__set
    local.get $5
    i32.const 1
    i32.add
    local.set $5
    br $for-loop|0
   end
  end
  loop $for-loop|1
   local.get $4
   i32.const 4
   i32.lt_s
   if
    local.get $0
    local.get $4
    i32.const 3
    i32.shl
    i32.add
    local.get $3
    local.get $4
    call $~lib/array/Array<u64>#__get
    local.tee $2
    i64.const 8
    i64.shr_u
    i64.const 71777214294589695
    i64.and
    local.get $2
    i64.const 71777214294589695
    i64.and
    i64.const 8
    i64.shl
    i64.or
    local.tee $2
    i64.const 16
    i64.shr_u
    i64.const 281470681808895
    i64.and
    local.get $2
    i64.const 281470681808895
    i64.and
    i64.const 16
    i64.shl
    i64.or
    i64.const 32
    i64.rotr
    i64.store
    local.get $4
    i32.const 1
    i32.add
    local.set $4
    br $for-loop|1
   end
  end
 )
 (func $assembly/indexer/bst/binarySearchU16 (param $0 i32) (result i32)
  (local $1 i32)
  local.get $0
  i32.const 65535
  i32.and
  i32.const 8
  i32.shr_u
  local.tee $1
  if (result i32)
   block $__inlined_func$assembly/indexer/bst/binarySearchU8$5 (result i32)
    local.get $1
    i32.const 4
    i32.shr_u
    local.tee $0
    if
     block $__inlined_func$assembly/indexer/bst/binarySearchU4$25 (result i32)
      local.get $0
      i32.const 2
      i32.shr_u
      local.tee $1
      if
       local.get $1
       i32.const 1
       i32.shr_u
       i32.eqz
       br $__inlined_func$assembly/indexer/bst/binarySearchU4$25
      end
      i32.const 2
      i32.const 3
      local.get $0
      i32.const 3
      i32.and
      i32.const 1
      i32.shr_u
      select
     end
     br $__inlined_func$assembly/indexer/bst/binarySearchU8$5
    end
    block $__inlined_func$assembly/indexer/bst/binarySearchU4$26 (result i32)
     local.get $1
     i32.const 15
     i32.and
     local.tee $0
     i32.const 2
     i32.shr_u
     local.tee $1
     if
      local.get $1
      i32.const 1
      i32.shr_u
      i32.eqz
      br $__inlined_func$assembly/indexer/bst/binarySearchU4$26
     end
     i32.const 2
     i32.const 3
     local.get $0
     i32.const 3
     i32.and
     i32.const 1
     i32.shr_u
     select
    end
    i32.const 4
    i32.add
   end
  else
   block $__inlined_func$assembly/indexer/bst/binarySearchU8$6 (result i32)
    local.get $0
    i32.const 255
    i32.and
    local.tee $0
    i32.const 15
    i32.and
    local.set $1
    local.get $0
    i32.const 4
    i32.shr_u
    local.tee $0
    if
     block $__inlined_func$assembly/indexer/bst/binarySearchU4$250 (result i32)
      local.get $0
      i32.const 2
      i32.shr_u
      local.tee $1
      if
       local.get $1
       i32.const 1
       i32.shr_u
       i32.eqz
       br $__inlined_func$assembly/indexer/bst/binarySearchU4$250
      end
      i32.const 2
      i32.const 3
      local.get $0
      i32.const 3
      i32.and
      i32.const 1
      i32.shr_u
      select
     end
     br $__inlined_func$assembly/indexer/bst/binarySearchU8$6
    end
    block $__inlined_func$assembly/indexer/bst/binarySearchU4$261 (result i32)
     local.get $1
     i32.const 2
     i32.shr_u
     local.tee $0
     if
      local.get $0
      i32.const 1
      i32.shr_u
      i32.eqz
      br $__inlined_func$assembly/indexer/bst/binarySearchU4$261
     end
     i32.const 2
     i32.const 3
     local.get $1
     i32.const 3
     i32.and
     i32.const 1
     i32.shr_u
     select
    end
    i32.const 4
    i32.add
   end
   i32.const 8
   i32.add
  end
 )
 (func $assembly/indexer/bst/binarySearchU32 (param $0 i32) (result i32)
  (local $1 i32)
  local.get $0
  i32.const 16
  i32.shr_u
  local.tee $1
  if (result i32)
   local.get $1
   call $assembly/indexer/bst/binarySearchU16
  else
   local.get $0
   i32.const 65535
   i32.and
   call $assembly/indexer/bst/binarySearchU16
   i32.const 16
   i32.add
  end
 )
 (func $assembly/indexer/bst/binarySearchU64 (param $0 i64) (result i32)
  (local $1 i32)
  local.get $0
  i64.const 32
  i64.shr_u
  i64.const 4294967295
  i64.and
  i32.wrap_i64
  local.tee $1
  if
   local.get $1
   call $assembly/indexer/bst/binarySearchU32
   return
  end
  local.get $0
  i64.const 4294967295
  i64.and
  i32.wrap_i64
  call $assembly/indexer/bst/binarySearchU32
  i32.const 32
  i32.add
 )
 (func $assembly/indexer/bst/binarySearchU256 (param $0 i32) (result i32)
  (local $1 i64)
  (local $2 i64)
  (local $3 i64)
  (local $4 i64)
  (local $5 i64)
  local.get $0
  i64.load
  local.tee $1
  i64.const 8
  i64.shr_u
  i64.const 71777214294589695
  i64.and
  local.get $1
  i64.const 71777214294589695
  i64.and
  i64.const 8
  i64.shl
  i64.or
  local.tee $1
  i64.const 16
  i64.shr_u
  i64.const 281470681808895
  i64.and
  local.get $1
  i64.const 281470681808895
  i64.and
  i64.const 16
  i64.shl
  i64.or
  i64.const 32
  i64.rotr
  local.tee $1
  local.get $0
  i64.load offset=8
  local.tee $2
  i64.const 8
  i64.shr_u
  i64.const 71777214294589695
  i64.and
  local.get $2
  i64.const 71777214294589695
  i64.and
  i64.const 8
  i64.shl
  i64.or
  local.tee $2
  i64.const 16
  i64.shr_u
  i64.const 281470681808895
  i64.and
  local.get $2
  i64.const 281470681808895
  i64.and
  i64.const 16
  i64.shl
  i64.or
  i64.const 32
  i64.rotr
  local.tee $3
  i64.or
  local.tee $2
  local.get $0
  i64.load offset=16
  local.tee $4
  i64.const 8
  i64.shr_u
  i64.const 71777214294589695
  i64.and
  local.get $4
  i64.const 71777214294589695
  i64.and
  i64.const 8
  i64.shl
  i64.or
  local.tee $4
  i64.const 16
  i64.shr_u
  i64.const 281470681808895
  i64.and
  local.get $4
  i64.const 281470681808895
  i64.and
  i64.const 16
  i64.shl
  i64.or
  i64.const 32
  i64.rotr
  local.tee $4
  local.get $0
  i64.load offset=24
  local.tee $5
  i64.const 8
  i64.shr_u
  i64.const 71777214294589695
  i64.and
  local.get $5
  i64.const 71777214294589695
  i64.and
  i64.const 8
  i64.shl
  i64.or
  local.tee $5
  i64.const 16
  i64.shr_u
  i64.const 281470681808895
  i64.and
  local.get $5
  i64.const 281470681808895
  i64.and
  i64.const 16
  i64.shl
  i64.or
  i64.const 32
  i64.rotr
  local.tee $5
  i64.or
  i64.or
  i64.eqz
  if
   i32.const -1
   return
  end
  local.get $2
  i64.const 0
  i64.ne
  if (result i32)
   local.get $1
   i64.const 0
   i64.ne
   if (result i32)
    local.get $1
    call $assembly/indexer/bst/binarySearchU64
   else
    local.get $3
    call $assembly/indexer/bst/binarySearchU64
    i32.const -64
    i32.sub
   end
  else
   local.get $4
   i64.const 0
   i64.ne
   if (result i32)
    local.get $4
    call $assembly/indexer/bst/binarySearchU64
   else
    local.get $5
    call $assembly/indexer/bst/binarySearchU64
    i32.const -64
    i32.sub
   end
   i32.const 128
   i32.add
  end
 )
 (func $assembly/indexer/widebst/BSTU128#getMask (param $0 i32) (param $1 i32) (result i32)
  local.get $0
  local.get $1
  call $assembly/indexer/widebst/BSTU128#getMaskPointer
  call $assembly/indexer/tables/IndexPointer#get
  local.tee $0
  i32.const 20
  i32.sub
  i32.load offset=16
  i32.eqz
  if
   i32.const 32
   call $~lib/arraybuffer/ArrayBuffer#constructor
   return
  end
  local.get $0
 )
 (func $assembly/indexer/widebst/BSTU128#seekGreater (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (local $3 i64)
  (local $4 i32)
  i32.const 16
  call $~lib/arraybuffer/ArrayBuffer#constructor
  local.tee $2
  local.get $1
  i64.load offset=8
  local.tee $3
  i64.const 8
  i64.shr_u
  i64.const 71777214294589695
  i64.and
  local.get $3
  i64.const 71777214294589695
  i64.and
  i64.const 8
  i64.shl
  i64.or
  local.tee $3
  i64.const 16
  i64.shr_u
  i64.const 281470681808895
  i64.and
  local.get $3
  i64.const 281470681808895
  i64.and
  i64.const 16
  i64.shl
  i64.or
  i64.const 32
  i64.rotr
  i64.store
  local.get $2
  local.get $1
  i64.load
  local.tee $3
  i64.const 8
  i64.shr_u
  i64.const 71777214294589695
  i64.and
  local.get $3
  i64.const 71777214294589695
  i64.and
  i64.const 8
  i64.shl
  i64.or
  local.tee $3
  i64.const 16
  i64.shr_u
  i64.const 281470681808895
  i64.and
  local.get $3
  i64.const 281470681808895
  i64.and
  i64.const 16
  i64.shl
  i64.or
  i64.const 32
  i64.rotr
  i64.store offset=8
  loop $do-loop|0
   local.get $2
   local.get $2
   i32.const 20
   i32.sub
   i32.load offset=16
   call $assembly/utils/box/Box#constructor
   local.tee $4
   local.get $4
   i32.load offset=4
   i32.const 1
   i32.sub
   i32.store offset=4
   local.get $4
   i32.load offset=4
   call $~lib/arraybuffer/ArrayBuffer#constructor
   local.tee $1
   local.get $4
   i32.load
   local.get $4
   i32.load offset=4
   memory.copy
   local.get $0
   local.get $1
   call $assembly/indexer/widebst/BSTU128#getMaskPointer
   call $assembly/indexer/tables/IndexPointer#get
   local.tee $4
   i32.const 20
   i32.sub
   i32.load offset=16
   if
    local.get $4
    local.get $2
    local.get $1
    i32.const 20
    i32.sub
    i32.load offset=16
    i32.add
    i32.load8_u
    call $assembly/indexer/bst/maskGreaterThan
    local.get $4
    call $assembly/indexer/bst/binarySearchU256
    local.tee $2
    i32.const -1
    i32.ne
    if
     i32.const 2
     call $~lib/rt/__newArray
     local.tee $4
     i32.load offset=4
     drop
     local.get $4
     i32.const 0
     local.get $1
     local.get $1
     i32.const 20
     i32.sub
     i32.load offset=16
     call $assembly/utils/box/Box#constructor
     call $~lib/array/Array<assembly/blockdata/transaction/Input>#__set
     i32.const 1
     call $~lib/arraybuffer/ArrayBuffer#constructor
     local.tee $1
     local.get $2
     i32.store8
     local.get $4
     i32.const 1
     local.get $1
     local.get $1
     i32.const 20
     i32.sub
     i32.load offset=16
     call $assembly/utils/box/Box#constructor
     call $~lib/array/Array<assembly/blockdata/transaction/Input>#__set
     local.get $0
     local.set $2
     local.get $4
     call $assembly/utils/box/Box.concat
     local.set $0
     loop $while-continue|0
      local.get $0
      i32.const 20
      i32.sub
      i32.load offset=16
      local.tee $1
      i32.const 16
      i32.ne
      if
       local.get $1
       i32.const 1
       i32.add
       call $~lib/arraybuffer/ArrayBuffer#constructor
       local.tee $1
       local.get $0
       local.get $0
       i32.const 20
       i32.sub
       i32.load offset=16
       memory.copy
       local.get $1
       local.get $0
       i32.const 20
       i32.sub
       i32.load offset=16
       i32.add
       local.get $2
       local.get $0
       call $assembly/indexer/widebst/BSTU128#getMask
       call $assembly/indexer/bst/binarySearchU256
       i32.store8
       local.get $1
       local.set $0
       br $while-continue|0
      end
     end
     i32.const 16
     i32.const 44
     call $~lib/rt/stub/__new
     local.tee $1
     i64.const 0
     i64.store
     local.get $1
     i64.const 0
     i64.store offset=8
     local.get $1
     local.get $0
     i64.load
     local.tee $3
     i64.const 8
     i64.shr_u
     i64.const 71777214294589695
     i64.and
     local.get $3
     i64.const 71777214294589695
     i64.and
     i64.const 8
     i64.shl
     i64.or
     local.tee $3
     i64.const 16
     i64.shr_u
     i64.const 281470681808895
     i64.and
     local.get $3
     i64.const 281470681808895
     i64.and
     i64.const 16
     i64.shl
     i64.or
     i64.const 32
     i64.rotr
     i64.store offset=8
     local.get $1
     local.get $0
     i64.load offset=8
     local.tee $3
     i64.const 8
     i64.shr_u
     i64.const 71777214294589695
     i64.and
     local.get $3
     i64.const 71777214294589695
     i64.and
     i64.const 8
     i64.shl
     i64.or
     local.tee $3
     i64.const 16
     i64.shr_u
     i64.const 281470681808895
     i64.and
     local.get $3
     i64.const 281470681808895
     i64.and
     i64.const 16
     i64.shl
     i64.or
     i64.const 32
     i64.rotr
     i64.store
     local.get $1
     return
    end
   end
   local.get $1
   local.tee $2
   i32.const 20
   i32.sub
   i32.load offset=16
   br_if $do-loop|0
  end
  i32.const 0
 )
 (func $~lib/util/number/utoa64 (param $0 i64) (param $1 i32) (result i32)
  (local $2 i64)
  (local $3 i32)
  (local $4 i64)
  (local $5 i64)
  (local $6 i32)
  (local $7 i32)
  local.get $1
  i32.const 2
  i32.lt_s
  local.get $1
  i32.const 36
  i32.gt_s
  i32.or
  if
   i32.const 3616
   i32.const 3744
   i32.const 401
   i32.const 5
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  i64.eqz
  if
   i32.const 3808
   return
  end
  local.get $1
  i32.const 10
  i32.eq
  if
   local.get $0
   i64.const 4294967295
   i64.le_u
   if
    local.get $0
    i32.wrap_i64
    local.tee $1
    i32.const 100000
    i32.lt_u
    if (result i32)
     local.get $1
     i32.const 100
     i32.lt_u
     if (result i32)
      local.get $1
      i32.const 10
      i32.ge_u
      i32.const 1
      i32.add
     else
      local.get $1
      i32.const 10000
      i32.ge_u
      i32.const 3
      i32.add
      local.get $1
      i32.const 1000
      i32.ge_u
      i32.add
     end
    else
     local.get $1
     i32.const 10000000
     i32.lt_u
     if (result i32)
      local.get $1
      i32.const 1000000
      i32.ge_u
      i32.const 6
      i32.add
     else
      local.get $1
      i32.const 1000000000
      i32.ge_u
      i32.const 8
      i32.add
      local.get $1
      i32.const 100000000
      i32.ge_u
      i32.add
     end
    end
    local.tee $6
    i32.const 1
    i32.shl
    i32.const 2
    call $~lib/rt/stub/__new
    local.tee $3
    local.get $1
    local.get $6
    call $~lib/util/number/utoa32_dec_lut
   else
    local.get $0
    i64.const 1000000000000000
    i64.lt_u
    if (result i32)
     local.get $0
     i64.const 1000000000000
     i64.lt_u
     if (result i32)
      local.get $0
      i64.const 100000000000
      i64.ge_u
      i32.const 10
      i32.add
      local.get $0
      i64.const 10000000000
      i64.ge_u
      i32.add
     else
      local.get $0
      i64.const 100000000000000
      i64.ge_u
      i32.const 13
      i32.add
      local.get $0
      i64.const 10000000000000
      i64.ge_u
      i32.add
     end
    else
     local.get $0
     i64.const 100000000000000000
     i64.lt_u
     if (result i32)
      local.get $0
      i64.const 10000000000000000
      i64.ge_u
      i32.const 16
      i32.add
     else
      local.get $0
      i64.const -8446744073709551616
      i64.ge_u
      i32.const 18
      i32.add
      local.get $0
      i64.const 1000000000000000000
      i64.ge_u
      i32.add
     end
    end
    local.tee $1
    i32.const 1
    i32.shl
    i32.const 2
    call $~lib/rt/stub/__new
    local.set $3
    loop $while-continue|0
     local.get $0
     i64.const 100000000
     i64.ge_u
     if
      local.get $3
      local.get $1
      i32.const 4
      i32.sub
      local.tee $1
      i32.const 1
      i32.shl
      i32.add
      local.get $0
      local.get $0
      i64.const 100000000
      i64.div_u
      local.tee $0
      i64.const 100000000
      i64.mul
      i64.sub
      i32.wrap_i64
      local.tee $6
      i32.const 10000
      i32.rem_u
      local.tee $7
      i32.const 100
      i32.div_u
      i32.const 2
      i32.shl
      i32.const 3820
      i32.add
      i64.load32_u
      local.get $7
      i32.const 100
      i32.rem_u
      i32.const 2
      i32.shl
      i32.const 3820
      i32.add
      i64.load32_u
      i64.const 32
      i64.shl
      i64.or
      i64.store
      local.get $3
      local.get $1
      i32.const 4
      i32.sub
      local.tee $1
      i32.const 1
      i32.shl
      i32.add
      local.get $6
      i32.const 10000
      i32.div_u
      local.tee $6
      i32.const 100
      i32.div_u
      i32.const 2
      i32.shl
      i32.const 3820
      i32.add
      i64.load32_u
      local.get $6
      i32.const 100
      i32.rem_u
      i32.const 2
      i32.shl
      i32.const 3820
      i32.add
      i64.load32_u
      i64.const 32
      i64.shl
      i64.or
      i64.store
      br $while-continue|0
     end
    end
    local.get $3
    local.get $0
    i32.wrap_i64
    local.get $1
    call $~lib/util/number/utoa32_dec_lut
   end
  else
   local.get $1
   i32.const 16
   i32.eq
   if
    i32.const 63
    local.get $0
    i64.clz
    i32.wrap_i64
    i32.sub
    i32.const 2
    i32.shr_s
    i32.const 1
    i32.add
    local.tee $1
    i32.const 1
    i32.shl
    i32.const 2
    call $~lib/rt/stub/__new
    local.set $3
    loop $while-continue|01
     local.get $1
     i32.const 2
     i32.ge_u
     if
      local.get $3
      local.get $1
      i32.const 2
      i32.sub
      local.tee $1
      i32.const 1
      i32.shl
      i32.add
      local.get $0
      i32.wrap_i64
      i32.const 255
      i32.and
      i32.const 2
      i32.shl
      i32.const 4240
      i32.add
      i32.load
      i32.store
      local.get $0
      i64.const 8
      i64.shr_u
      local.set $0
      br $while-continue|01
     end
    end
    local.get $1
    i32.const 1
    i32.and
    if
     local.get $3
     local.get $0
     i32.wrap_i64
     i32.const 6
     i32.shl
     i32.const 4240
     i32.add
     i32.load16_u
     i32.store16
    end
   else
    block $__inlined_func$~lib/util/number/ulog_base$559 (result i32)
     local.get $0
     local.set $2
     local.get $1
     i32.popcnt
     i32.const 1
     i32.eq
     if
      i32.const 63
      local.get $0
      i64.clz
      i32.wrap_i64
      i32.sub
      i32.const 31
      local.get $1
      i32.clz
      i32.sub
      i32.div_u
      i32.const 1
      i32.add
      br $__inlined_func$~lib/util/number/ulog_base$559
     end
     local.get $1
     i64.extend_i32_s
     local.tee $5
     local.set $4
     i32.const 1
     local.set $3
     loop $while-continue|02
      local.get $2
      local.get $4
      i64.ge_u
      if
       local.get $2
       local.get $4
       i64.div_u
       local.set $2
       local.get $4
       local.get $4
       i64.mul
       local.set $4
       local.get $3
       i32.const 1
       i32.shl
       local.set $3
       br $while-continue|02
      end
     end
     loop $while-continue|1
      local.get $2
      i64.const 0
      i64.ne
      if
       local.get $2
       local.get $5
       i64.div_u
       local.set $2
       local.get $3
       i32.const 1
       i32.add
       local.set $3
       br $while-continue|1
      end
     end
     local.get $3
     i32.const 1
     i32.sub
    end
    local.tee $6
    i32.const 1
    i32.shl
    i32.const 2
    call $~lib/rt/stub/__new
    local.tee $3
    local.get $0
    local.get $6
    local.get $1
    call $~lib/util/number/utoa64_any_core
   end
  end
  local.get $3
 )
 (func $assembly/utils/utils/padLeft (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  i32.const 5392
  local.set $1
  loop $for-loop|0
   local.get $2
   i32.const 16
   local.get $0
   i32.const 20
   i32.sub
   i32.load offset=16
   i32.const 1
   i32.shr_u
   i32.sub
   i32.lt_s
   if
    local.get $1
    i32.const 3808
    call $~lib/string/String.__concat
    local.set $1
    local.get $2
    i32.const 1
    i32.add
    local.set $2
    br $for-loop|0
   end
  end
  local.get $1
  local.get $0
  call $~lib/string/String.__concat
 )
 (func $assembly/index/test_BSTU128
  (local $0 i32)
  (local $1 i32)
  i32.const 1
  global.set $~argumentsLength
  i32.const 16672
  i32.const 0
  call $~lib/string/String.UTF8.encode@varargs
  local.set $1
  i32.const 4
  i32.const 43
  call $~lib/rt/stub/__new
  local.tee $0
  i32.const 0
  i32.store
  local.get $0
  local.get $1
  i32.store
  i32.const 16
  i32.const 44
  call $~lib/rt/stub/__new
  local.tee $1
  i64.const 256
  i64.store
  local.get $1
  i64.const 0
  i64.store offset=8
  i32.const 16
  i32.const 44
  call $~lib/rt/stub/__new
  local.tee $1
  i64.const 256
  i64.store
  local.get $1
  i64.const 0
  i64.store offset=8
  i32.const 1
  global.set $~argumentsLength
  local.get $0
  local.get $1
  i32.const 16704
  i32.const 0
  call $~lib/string/String.UTF8.encode@varargs
  call $assembly/indexer/widebst/BSTU128#set
  i32.const 16
  i32.const 44
  call $~lib/rt/stub/__new
  local.tee $1
  i64.const 320
  i64.store
  local.get $1
  i64.const 0
  i64.store offset=8
  i32.const 1
  global.set $~argumentsLength
  local.get $0
  local.get $1
  i32.const 16704
  i32.const 0
  call $~lib/string/String.UTF8.encode@varargs
  call $assembly/indexer/widebst/BSTU128#set
  i32.const 16
  i32.const 44
  call $~lib/rt/stub/__new
  local.tee $1
  i64.const 260
  i64.store
  local.get $1
  i64.const 0
  i64.store offset=8
  i32.const 1
  global.set $~argumentsLength
  local.get $0
  local.get $1
  i32.const 16704
  i32.const 0
  call $~lib/string/String.UTF8.encode@varargs
  call $assembly/indexer/widebst/BSTU128#set
  i32.const 16
  i32.const 44
  call $~lib/rt/stub/__new
  local.tee $1
  i64.const 259
  i64.store
  local.get $1
  i64.const 0
  i64.store offset=8
  local.get $0
  local.get $1
  call $assembly/indexer/widebst/BSTU128#seekGreater
  local.tee $1
  i64.load offset=8
  i32.const 16
  call $~lib/util/number/utoa64
  call $assembly/utils/utils/padLeft
  local.get $1
  i64.load
  i32.const 16
  call $~lib/util/number/utoa64
  call $assembly/utils/utils/padLeft
  call $~lib/string/String.__concat
  local.set $1
  i32.const 2
  global.set $~argumentsLength
  local.get $1
  i32.const 1
  call $~lib/string/String.UTF8.encode@varargs
  call $assembly/utils/logging/__log
  i32.const 16
  i32.const 44
  call $~lib/rt/stub/__new
  local.tee $1
  i64.const 260
  i64.store
  local.get $1
  i64.const 0
  i64.store offset=8
  local.get $0
  local.get $1
  i32.const 0
  call $~lib/arraybuffer/ArrayBuffer#constructor
  call $assembly/indexer/widebst/BSTU128#set
  i32.const 16
  i32.const 44
  call $~lib/rt/stub/__new
  local.tee $1
  i64.const 259
  i64.store
  local.get $1
  i64.const 0
  i64.store offset=8
  local.get $0
  local.get $1
  call $assembly/indexer/widebst/BSTU128#seekGreater
  local.tee $0
  i64.load offset=8
  i32.const 16
  call $~lib/util/number/utoa64
  call $assembly/utils/utils/padLeft
  local.get $0
  i64.load
  i32.const 16
  call $~lib/util/number/utoa64
  call $assembly/utils/utils/padLeft
  call $~lib/string/String.__concat
  local.set $0
  i32.const 2
  global.set $~argumentsLength
  local.get $0
  i32.const 1
  call $~lib/string/String.UTF8.encode@varargs
  call $assembly/utils/logging/__log
 )
 (func $assembly/indexer/bst/BST<u64>#set (param $0 i32) (param $1 i64) (param $2 i32)
  (local $3 i32)
  (local $4 i64)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  i32.const 8
  call $~lib/arraybuffer/ArrayBuffer#constructor
  local.tee $7
  local.get $1
  i64.const 8
  i64.shr_u
  i64.const 71777214294589695
  i64.and
  local.get $1
  i64.const 71777214294589695
  i64.and
  i64.const 8
  i64.shl
  i64.or
  local.tee $4
  i64.const 16
  i64.shr_u
  i64.const 281470681808895
  i64.and
  local.get $4
  i64.const 281470681808895
  i64.and
  i64.const 16
  i64.shl
  i64.or
  i64.const 32
  i64.rotr
  i64.store
  local.get $2
  i32.const 20
  i32.sub
  i32.load offset=16
  if
   i32.const 8
   call $~lib/arraybuffer/ArrayBuffer#constructor
   local.tee $6
   local.get $4
   i64.const 16
   i64.shr_u
   i64.const 281470681808895
   i64.and
   local.get $4
   i64.const 281470681808895
   i64.and
   i64.const 16
   i64.shl
   i64.or
   i64.const 32
   i64.rotr
   i64.store
   loop $for-loop|0
    local.get $5
    i32.const 8
    i32.lt_s
    if
     local.get $5
     call $~lib/arraybuffer/ArrayBuffer#constructor
     local.set $3
     local.get $5
     if
      local.get $3
      local.get $6
      local.get $5
      memory.copy
     end
     local.get $0
     local.get $3
     call $assembly/indexer/widebst/BSTU128#getMaskPointer
     local.tee $8
     call $assembly/indexer/tables/IndexPointer#get
     local.tee $3
     i32.const 20
     i32.sub
     i32.load offset=16
     i32.eqz
     if
      i32.const 32
      call $~lib/arraybuffer/ArrayBuffer#constructor
      local.set $3
     end
     local.get $5
     local.get $6
     i32.add
     i32.load8_u
     local.tee $9
     i32.const 3
     i32.shr_u
     local.get $3
     i32.add
     local.tee $10
     i32.load8_u
     i32.const 1
     i32.const 7
     local.get $9
     i32.const 7
     i32.and
     i32.sub
     i32.const 7
     i32.and
     i32.shl
     local.tee $9
     i32.and
     i32.eqz
     if
      local.get $10
      local.get $9
      local.get $10
      i32.load8_u
      i32.or
      i32.store8
      local.get $8
      local.get $3
      call $assembly/indexer/tables/IndexPointer#set
     end
     local.get $5
     i32.const 1
     i32.add
     local.set $5
     br $for-loop|0
    end
   end
  else
   i32.const 8
   call $~lib/arraybuffer/ArrayBuffer#constructor
   local.tee $8
   local.get $1
   i64.const 8
   i64.shr_u
   i64.const 71777214294589695
   i64.and
   local.get $1
   i64.const 71777214294589695
   i64.and
   i64.const 8
   i64.shl
   i64.or
   local.tee $1
   i64.const 16
   i64.shr_u
   i64.const 281470681808895
   i64.and
   local.get $1
   i64.const 281470681808895
   i64.and
   i64.const 16
   i64.shl
   i64.or
   i64.const 32
   i64.rotr
   i64.store
   i32.const 7
   local.set $5
   loop $for-loop|00
    local.get $5
    i32.const 0
    i32.ge_s
    if
     block $for-break0
      local.get $5
      call $~lib/arraybuffer/ArrayBuffer#constructor
      local.set $3
      local.get $5
      if
       local.get $3
       local.get $8
       local.get $5
       memory.copy
      end
      local.get $0
      local.get $3
      call $assembly/indexer/widebst/BSTU128#getMaskPointer
      local.tee $9
      call $assembly/indexer/tables/IndexPointer#get
      local.tee $3
      i32.const 20
      i32.sub
      i32.load offset=16
      i32.eqz
      if
       i32.const 32
       call $~lib/arraybuffer/ArrayBuffer#constructor
       local.set $3
      end
      local.get $5
      local.get $8
      i32.add
      i32.load8_u
      local.tee $6
      i32.const 3
      i32.shr_u
      local.get $3
      i32.add
      local.tee $10
      i32.load8_u
      i32.const 1
      i32.const 7
      local.get $6
      i32.const 7
      i32.and
      i32.sub
      i32.const 7
      i32.and
      local.tee $6
      i32.shl
      i32.and
      if
       local.get $10
       local.get $10
       i32.load8_u
       i32.const -2
       local.get $6
       i32.rotl
       i32.and
       i32.store8
      end
      block $__inlined_func$assembly/indexer/bst/isZeroU256$573 (result i32)
       i32.const 0
       local.set $6
       loop $for-loop|001
        local.get $6
        i32.const 4
        i32.lt_s
        if
         i32.const 0
         local.get $3
         local.get $6
         i32.const 3
         i32.shl
         i32.add
         i64.load
         i64.const 0
         i64.ne
         br_if $__inlined_func$assembly/indexer/bst/isZeroU256$573
         drop
         local.get $6
         i32.const 1
         i32.add
         local.set $6
         br $for-loop|001
        end
       end
       i32.const 1
      end
      if
       local.get $9
       i32.const 0
       call $~lib/arraybuffer/ArrayBuffer#constructor
       call $assembly/indexer/tables/IndexPointer#set
      else
       local.get $9
       local.get $3
       call $assembly/indexer/tables/IndexPointer#set
       br $for-break0
      end
      local.get $5
      i32.const 1
      i32.sub
      local.set $5
      br $for-loop|00
     end
    end
   end
  end
  local.get $0
  i32.load
  local.get $7
  call $assembly/indexer/tables/IndexPointer#select
  local.get $2
  call $assembly/indexer/tables/IndexPointer#set
 )
 (func $~lib/array/Array<~lib/array/Array<u8>>#constructor (result i32)
  (local $0 i32)
  (local $1 i32)
  i32.const 16
  i32.const 48
  call $~lib/rt/stub/__new
  local.tee $0
  i32.const 0
  i32.store
  local.get $0
  i32.const 0
  i32.store offset=4
  local.get $0
  i32.const 0
  i32.store offset=8
  local.get $0
  i32.const 0
  i32.store offset=12
  i32.const 32
  i32.const 1
  call $~lib/rt/stub/__new
  local.tee $1
  i32.const 0
  i32.const 32
  memory.fill
  local.get $0
  local.get $1
  i32.store
  local.get $0
  local.get $1
  i32.store offset=4
  local.get $0
  i32.const 32
  i32.store offset=8
  local.get $0
  i32.const 0
  i32.store offset=12
  local.get $0
 )
 (func $assembly/indexer/index/_flush~anonymous|0 (param $0 i32) (param $1 i32) (param $2 i32) (param $3 i32) (result i32)
  local.get $0
  global.get $assembly/indexer/index/_updateKeys
  local.get $1
  call $"~lib/map/Map<~lib/string/String,~lib/arraybuffer/ArrayBuffer>#get"
  call $assembly/indexer/index/arrayBufferToArray
  call $~lib/array/Array<assembly/blockdata/transaction/Output>#push
  drop
  local.get $0
  global.get $assembly/indexer/index/_updates
  local.get $1
  call $"~lib/map/Map<~lib/string/String,~lib/arraybuffer/ArrayBuffer>#get"
  call $assembly/indexer/index/arrayBufferToArray
  call $~lib/array/Array<assembly/blockdata/transaction/Output>#push
  drop
  local.get $0
 )
 (func $assembly/proto/metashrew/__proto.Encoder#varint64 (param $0 i32) (param $1 i64)
  loop $while-continue|0
   local.get $1
   i64.const 127
   i64.gt_u
   if
    local.get $0
    i32.load
    local.get $1
    i64.const 127
    i64.and
    i64.const 128
    i64.or
    i32.wrap_i64
    call $~lib/array/Array<u8>#push
    local.get $1
    i64.const 7
    i64.shr_u
    local.set $1
    br $while-continue|0
   end
  end
  local.get $0
  i32.load
  local.get $1
  i32.wrap_i64
  call $~lib/array/Array<u8>#push
 )
 (func $assembly/indexer/index/_flush
  (local $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  global.get $assembly/indexer/index/_updateKeys
  local.tee $1
  i32.load offset=8
  local.set $5
  local.get $1
  i32.load offset=16
  local.set $3
  i32.const 16
  i32.const 47
  call $~lib/rt/stub/__new
  local.tee $6
  i32.const 0
  i32.store
  local.get $6
  i32.const 0
  i32.store offset=4
  local.get $6
  i32.const 0
  i32.store offset=8
  local.get $6
  i32.const 0
  i32.store offset=12
  local.get $3
  i32.const 268435455
  i32.gt_u
  if
   i32.const 2608
   i32.const 5856
   i32.const 70
   i32.const 60
   call $~lib/builtins/abort
   unreachable
  end
  i32.const 8
  local.get $3
  local.get $3
  i32.const 8
  i32.le_u
  select
  i32.const 2
  i32.shl
  local.tee $1
  i32.const 1
  call $~lib/rt/stub/__new
  local.tee $7
  i32.const 0
  local.get $1
  memory.fill
  local.get $6
  local.get $7
  i32.store
  local.get $6
  local.get $7
  i32.store offset=4
  local.get $6
  local.get $1
  i32.store offset=8
  local.get $6
  local.get $3
  i32.store offset=12
  loop $for-loop|0
   local.get $2
   local.get $3
   i32.lt_s
   if
    local.get $5
    local.get $2
    i32.const 12
    i32.mul
    i32.add
    local.tee $7
    i32.load offset=8
    i32.const 1
    i32.and
    i32.eqz
    if
     local.get $0
     local.tee $1
     i32.const 1
     i32.add
     local.set $0
     local.get $6
     local.get $1
     local.get $7
     i32.load
     call $~lib/array/Array<assembly/blockdata/transaction/Input>#__set
    end
    local.get $2
    i32.const 1
    i32.add
    local.set $2
    br $for-loop|0
   end
  end
  local.get $6
  local.get $0
  i32.const 2
  i32.const 0
  call $~lib/array/ensureCapacity
  local.get $6
  local.get $0
  i32.store offset=12
  call $~lib/array/Array<~lib/array/Array<u8>>#constructor
  local.tee $2
  local.set $1
  local.get $6
  i32.load offset=12
  local.set $0
  loop $for-loop|00
   local.get $4
   local.get $0
   local.get $6
   i32.load offset=12
   local.tee $3
   local.get $0
   local.get $3
   i32.lt_s
   select
   i32.lt_s
   if
    local.get $6
    i32.load offset=4
    local.get $4
    i32.const 2
    i32.shl
    i32.add
    i32.load
    local.set $3
    i32.const 4
    global.set $~argumentsLength
    local.get $1
    local.get $3
    local.get $4
    local.get $6
    i32.const 17024
    i32.load
    call_indirect (type $4)
    local.set $1
    local.get $4
    i32.const 1
    i32.add
    local.set $4
    br $for-loop|00
   end
  end
  i32.const 4
  i32.const 50
  call $~lib/rt/stub/__new
  local.tee $0
  i32.eqz
  if
   i32.const 0
   i32.const 0
   call $~lib/rt/stub/__new
   local.set $0
  end
  local.get $0
  call $~lib/array/Array<~lib/array/Array<u8>>#constructor
  i32.store
  local.get $0
  local.get $2
  i32.store
  global.get $assembly/indexer/index/_updateKeys
  local.tee $1
  i32.const 16
  call $~lib/arraybuffer/ArrayBuffer#constructor
  i32.store
  local.get $1
  i32.const 3
  i32.store offset=4
  local.get $1
  i32.const 48
  call $~lib/arraybuffer/ArrayBuffer#constructor
  i32.store offset=8
  local.get $1
  i32.const 4
  i32.store offset=12
  local.get $1
  i32.const 0
  i32.store offset=16
  local.get $1
  i32.const 0
  i32.store offset=20
  i32.const 0
  global.set $~argumentsLength
  i32.const 0
  local.set $1
  i32.const 0
  call $~lib/array/Array<u8>#constructor
  local.set $2
  i32.const 4
  i32.const 51
  call $~lib/rt/stub/__new
  local.tee $3
  i32.const 0
  i32.store
  local.get $3
  local.get $2
  i32.store
  local.get $3
  i32.load
  local.set $2
  local.get $0
  i32.load
  i32.load offset=12
  i32.const 0
  i32.gt_s
  if
   loop $for-loop|01
    local.get $1
    local.get $0
    i32.load
    i32.load offset=12
    i32.lt_s
    if
     local.get $3
     i64.const 10
     call $assembly/proto/metashrew/__proto.Encoder#varint64
     local.get $3
     local.get $0
     i32.load
     local.get $1
     call $~lib/array/Array<assembly/blockdata/transaction/Input>#__get
     i64.load32_s offset=12
     call $assembly/proto/metashrew/__proto.Encoder#varint64
     local.get $0
     i32.load
     local.get $1
     call $~lib/array/Array<assembly/blockdata/transaction/Input>#__get
     local.set $5
     i32.const 0
     local.set $4
     loop $for-loop|1
      local.get $4
      local.get $5
      i32.load offset=12
      i32.lt_s
      if
       local.get $3
       i32.load
       local.get $5
       local.get $4
       call $~lib/array/Array<u8>#__get
       call $~lib/array/Array<u8>#push
       local.get $4
       i32.const 1
       i32.add
       local.set $4
       br $for-loop|1
      end
     end
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     br $for-loop|01
    end
   end
  end
  local.get $2
  i32.load offset=12
  local.tee $0
  i32.const 4
  call $~lib/rt/stub/__new
  local.tee $1
  local.get $2
  i32.load offset=4
  local.get $0
  memory.copy
  local.get $1
  call $assembly/indexer/index/__flush
 )
 (func $assembly/index/test_seekLower
  (local $0 i32)
  (local $1 i32)
  i32.const 1
  global.set $~argumentsLength
  i32.const 16880
  i32.const 0
  call $~lib/string/String.UTF8.encode@varargs
  local.set $0
  i32.const 1
  global.set $~argumentsLength
  local.get $0
  i32.const 16912
  i32.const 0
  call $~lib/string/String.UTF8.encode@varargs
  call $assembly/indexer/tables/IndexPointer#select
  drop
  i32.const 1
  global.set $~argumentsLength
  i32.const 16880
  i32.const 0
  call $~lib/string/String.UTF8.encode@varargs
  local.set $0
  i32.const 1
  global.set $~argumentsLength
  local.get $0
  i32.const 16912
  i32.const 0
  call $~lib/string/String.UTF8.encode@varargs
  call $assembly/indexer/tables/IndexPointer#select
  local.set $1
  i32.const 4
  i32.const 46
  call $~lib/rt/stub/__new
  local.tee $0
  i32.const 0
  i32.store
  local.get $0
  local.get $1
  i32.store
  i32.const 1
  global.set $~argumentsLength
  local.get $0
  i64.const 3
  i32.const 16704
  i32.const 0
  call $~lib/string/String.UTF8.encode@varargs
  call $assembly/indexer/bst/BST<u64>#set
  i32.const 1
  global.set $~argumentsLength
  local.get $0
  i64.const 196608
  i32.const 16960
  i32.const 0
  call $~lib/string/String.UTF8.encode@varargs
  call $assembly/indexer/bst/BST<u64>#set
  i32.const 1
  global.set $~argumentsLength
  local.get $0
  i64.const 216172782113783808
  i32.const 16992
  i32.const 0
  call $~lib/string/String.UTF8.encode@varargs
  call $assembly/indexer/bst/BST<u64>#set
  call $assembly/indexer/index/_flush
 )
 (func $assembly/index/test_asmmath
  (local $0 i32)
  i32.const 32
  call $~lib/arraybuffer/ArrayBuffer#constructor
  local.tee $0
  i32.const 25
  i32.add
  local.get $0
  i32.load8_u offset=25
  i32.const 128
  i32.or
  i32.store8
  local.get $0
  local.get $0
  i32.const 20
  i32.sub
  i32.load offset=16
  call $assembly/utils/box/Box#constructor
  call $assembly/utils/box/Box#toHexString
  local.set $0
  i32.const 2
  global.set $~argumentsLength
  local.get $0
  i32.const 1
  call $~lib/string/String.UTF8.encode@varargs
  call $assembly/utils/logging/__log
 )
 (func $assembly/indexer/bst/BST<u64>#seekGreater (param $0 i32) (param $1 i64) (result i64)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  i32.const 8
  call $~lib/arraybuffer/ArrayBuffer#constructor
  local.tee $2
  local.get $1
  i64.const 8
  i64.shr_u
  i64.const 71777214294589695
  i64.and
  local.get $1
  i64.const 71777214294589695
  i64.and
  i64.const 8
  i64.shl
  i64.or
  local.tee $1
  i64.const 16
  i64.shr_u
  i64.const 281470681808895
  i64.and
  local.get $1
  i64.const 281470681808895
  i64.and
  i64.const 16
  i64.shl
  i64.or
  i64.const 32
  i64.rotr
  i64.store
  loop $do-loop|0
   local.get $2
   local.get $2
   i32.const 20
   i32.sub
   i32.load offset=16
   call $assembly/utils/box/Box#constructor
   local.tee $4
   local.get $4
   i32.load offset=4
   i32.const 1
   i32.sub
   i32.store offset=4
   local.get $4
   i32.load offset=4
   call $~lib/arraybuffer/ArrayBuffer#constructor
   local.tee $3
   local.get $4
   i32.load
   local.get $4
   i32.load offset=4
   memory.copy
   local.get $0
   local.get $3
   call $assembly/indexer/widebst/BSTU128#getMaskPointer
   call $assembly/indexer/tables/IndexPointer#get
   local.tee $4
   i32.const 20
   i32.sub
   i32.load offset=16
   if
    local.get $4
    local.get $2
    local.get $3
    i32.const 20
    i32.sub
    i32.load offset=16
    i32.add
    i32.load8_u
    call $assembly/indexer/bst/maskGreaterThan
    local.get $4
    call $assembly/indexer/bst/binarySearchU256
    local.tee $2
    i32.const -1
    i32.ne
    if
     i32.const 2
     call $~lib/rt/__newArray
     local.tee $4
     i32.load offset=4
     drop
     local.get $4
     i32.const 0
     local.get $3
     local.get $3
     i32.const 20
     i32.sub
     i32.load offset=16
     call $assembly/utils/box/Box#constructor
     call $~lib/array/Array<assembly/blockdata/transaction/Input>#__set
     i32.const 1
     call $~lib/arraybuffer/ArrayBuffer#constructor
     local.tee $3
     local.get $2
     i32.store8
     local.get $4
     i32.const 1
     local.get $3
     local.get $3
     i32.const 20
     i32.sub
     i32.load offset=16
     call $assembly/utils/box/Box#constructor
     call $~lib/array/Array<assembly/blockdata/transaction/Input>#__set
     local.get $0
     local.set $3
     local.get $4
     call $assembly/utils/box/Box.concat
     local.set $0
     loop $while-continue|0
      local.get $0
      i32.const 20
      i32.sub
      i32.load offset=16
      local.tee $2
      i32.const 8
      i32.ne
      if
       block $while-break|0
        local.get $2
        i32.const 1
        i32.add
        call $~lib/arraybuffer/ArrayBuffer#constructor
        local.tee $2
        local.get $0
        local.get $0
        i32.const 20
        i32.sub
        i32.load offset=16
        memory.copy
        local.get $3
        local.get $0
        call $assembly/indexer/widebst/BSTU128#getMask
        local.tee $4
        i32.const 20
        i32.sub
        i32.load offset=16
        if (result i32)
         local.get $4
        else
         i32.const 32
         call $~lib/arraybuffer/ArrayBuffer#constructor
        end
        call $assembly/indexer/bst/binarySearchU256
        local.tee $4
        i32.const -1
        i32.eq
        br_if $while-break|0
        local.get $2
        local.get $0
        i32.const 20
        i32.sub
        i32.load offset=16
        i32.add
        local.get $4
        i32.store8
        local.get $2
        local.set $0
        br $while-continue|0
       end
      end
     end
     local.get $0
     i64.load
     local.tee $1
     i64.const 8
     i64.shr_u
     i64.const 71777214294589695
     i64.and
     local.get $1
     i64.const 71777214294589695
     i64.and
     i64.const 8
     i64.shl
     i64.or
     local.tee $1
     i64.const 16
     i64.shr_u
     i64.const 281470681808895
     i64.and
     local.get $1
     i64.const 281470681808895
     i64.and
     i64.const 16
     i64.shl
     i64.or
     i64.const 32
     i64.rotr
     return
    end
   end
   local.get $3
   local.tee $2
   i32.const 20
   i32.sub
   i32.load offset=16
   br_if $do-loop|0
  end
  i64.const 0
 )
 (func $assembly/index/test_unmarkPath
  (local $0 i32)
  (local $1 i32)
  i32.const 1
  global.set $~argumentsLength
  i32.const 16672
  i32.const 0
  call $~lib/string/String.UTF8.encode@varargs
  local.set $1
  i32.const 4
  i32.const 46
  call $~lib/rt/stub/__new
  local.tee $0
  i32.const 0
  i32.store
  local.get $0
  local.get $1
  i32.store
  i32.const 1
  global.set $~argumentsLength
  local.get $0
  i64.const 5070559597188767176
  i32.const 16704
  i32.const 0
  call $~lib/string/String.UTF8.encode@varargs
  call $assembly/indexer/bst/BST<u64>#set
  i32.const 1
  global.set $~argumentsLength
  local.get $0
  i64.const 4748706812154772304
  i32.const 16704
  i32.const 0
  call $~lib/string/String.UTF8.encode@varargs
  call $assembly/indexer/bst/BST<u64>#set
  i32.const 1
  global.set $~argumentsLength
  local.get $0
  i64.const 6722812031064417984
  i32.const 16704
  i32.const 0
  call $~lib/string/String.UTF8.encode@varargs
  call $assembly/indexer/bst/BST<u64>#set
  i32.const 1
  global.set $~argumentsLength
  local.get $0
  i64.const 6722812031064417985
  i32.const 16704
  i32.const 0
  call $~lib/string/String.UTF8.encode@varargs
  call $assembly/indexer/bst/BST<u64>#set
  i32.const 1
  global.set $~argumentsLength
  local.get $0
  i64.const 6722812031064417986
  i32.const 16704
  i32.const 0
  call $~lib/string/String.UTF8.encode@varargs
  call $assembly/indexer/bst/BST<u64>#set
  i32.const 1
  global.set $~argumentsLength
  local.get $0
  i64.const 6722812031064417987
  i32.const 16704
  i32.const 0
  call $~lib/string/String.UTF8.encode@varargs
  call $assembly/indexer/bst/BST<u64>#set
  i32.const 1
  global.set $~argumentsLength
  local.get $0
  i64.const 6722812111136751616
  i32.const 16704
  i32.const 0
  call $~lib/string/String.UTF8.encode@varargs
  call $assembly/indexer/bst/BST<u64>#set
  i32.const 1
  global.set $~argumentsLength
  local.get $0
  i64.const 6722812111153463296
  i32.const 16704
  i32.const 0
  call $~lib/string/String.UTF8.encode@varargs
  call $assembly/indexer/bst/BST<u64>#set
  i32.const 1
  global.set $~argumentsLength
  local.get $0
  i64.const -8321187212749196030
  i32.const 16704
  i32.const 0
  call $~lib/string/String.UTF8.encode@varargs
  call $assembly/indexer/bst/BST<u64>#set
  i32.const 1
  global.set $~argumentsLength
  local.get $0
  i64.const -7063788063758536637
  i32.const 16704
  i32.const 0
  call $~lib/string/String.UTF8.encode@varargs
  call $assembly/indexer/bst/BST<u64>#set
  local.get $0
  i64.const 5070559597188767176
  i32.const 0
  call $~lib/arraybuffer/ArrayBuffer#constructor
  call $assembly/indexer/bst/BST<u64>#set
  local.get $0
  i64.const 6722812031064417985
  i32.const 0
  call $~lib/arraybuffer/ArrayBuffer#constructor
  call $assembly/indexer/bst/BST<u64>#set
  i32.const 17056
  local.get $0
  i64.const 4748706812154772304
  call $assembly/indexer/bst/BST<u64>#seekGreater
  i32.const 16
  call $~lib/util/number/utoa64
  call $~lib/string/String.__concat
  local.set $1
  i32.const 2
  global.set $~argumentsLength
  local.get $1
  i32.const 1
  call $~lib/string/String.UTF8.encode@varargs
  call $assembly/utils/logging/__log
  i32.const 17056
  local.get $0
  i64.const 6722812031064417984
  call $assembly/indexer/bst/BST<u64>#seekGreater
  i32.const 16
  call $~lib/util/number/utoa64
  call $~lib/string/String.__concat
  local.set $1
  i32.const 2
  global.set $~argumentsLength
  local.get $1
  i32.const 1
  call $~lib/string/String.UTF8.encode@varargs
  call $assembly/utils/logging/__log
  i32.const 17056
  local.get $0
  i64.const 6722812031064417985
  call $assembly/indexer/bst/BST<u64>#seekGreater
  i32.const 16
  call $~lib/util/number/utoa64
  call $~lib/string/String.__concat
  local.set $1
  i32.const 2
  global.set $~argumentsLength
  local.get $1
  i32.const 1
  call $~lib/string/String.UTF8.encode@varargs
  call $assembly/utils/logging/__log
  i32.const 17056
  local.get $0
  i64.const 6722812031064417986
  call $assembly/indexer/bst/BST<u64>#seekGreater
  i32.const 16
  call $~lib/util/number/utoa64
  call $~lib/string/String.__concat
  local.set $1
  i32.const 2
  global.set $~argumentsLength
  local.get $1
  i32.const 1
  call $~lib/string/String.UTF8.encode@varargs
  call $assembly/utils/logging/__log
  i32.const 17056
  local.get $0
  i64.const 6722812031064417987
  call $assembly/indexer/bst/BST<u64>#seekGreater
  i32.const 16
  call $~lib/util/number/utoa64
  call $~lib/string/String.__concat
  local.set $1
  i32.const 2
  global.set $~argumentsLength
  local.get $1
  i32.const 1
  call $~lib/string/String.UTF8.encode@varargs
  call $assembly/utils/logging/__log
  i32.const 17056
  local.get $0
  i64.const 6722812111136751616
  call $assembly/indexer/bst/BST<u64>#seekGreater
  i32.const 16
  call $~lib/util/number/utoa64
  call $~lib/string/String.__concat
  local.set $1
  i32.const 2
  global.set $~argumentsLength
  local.get $1
  i32.const 1
  call $~lib/string/String.UTF8.encode@varargs
  call $assembly/utils/logging/__log
  local.get $0
  i64.const 6722812031064417987
  i32.const 0
  call $~lib/arraybuffer/ArrayBuffer#constructor
  call $assembly/indexer/bst/BST<u64>#set
  i32.const 17056
  local.get $0
  i64.const 6722812031064417986
  call $assembly/indexer/bst/BST<u64>#seekGreater
  i32.const 16
  call $~lib/util/number/utoa64
  call $~lib/string/String.__concat
  local.set $1
  i32.const 2
  global.set $~argumentsLength
  local.get $1
  i32.const 1
  call $~lib/string/String.UTF8.encode@varargs
  call $assembly/utils/logging/__log
  local.get $0
  i64.const 6722812031064417984
  i32.const 0
  call $~lib/arraybuffer/ArrayBuffer#constructor
  call $assembly/indexer/bst/BST<u64>#set
  local.get $0
  i64.const 6722812031064417986
  i32.const 0
  call $~lib/arraybuffer/ArrayBuffer#constructor
  call $assembly/indexer/bst/BST<u64>#set
  local.get $0
  i64.const 6722812031064417985
  i32.const 0
  call $~lib/arraybuffer/ArrayBuffer#constructor
  call $assembly/indexer/bst/BST<u64>#set
  i32.const 17056
  local.get $0
  i64.const 5070559597188767176
  call $assembly/indexer/bst/BST<u64>#seekGreater
  i32.const 16
  call $~lib/util/number/utoa64
  call $~lib/string/String.__concat
  local.set $0
  i32.const 2
  global.set $~argumentsLength
  local.get $0
  i32.const 1
  call $~lib/string/String.UTF8.encode@varargs
  call $assembly/utils/logging/__log
 )
 (func $assembly/index/test_isOrdTag
  (local $0 i32)
  i32.const 1
  global.set $~argumentsLength
  i32.const 17088
  i32.const 0
  call $~lib/string/String.UTF8.encode@varargs
  local.tee $0
  local.get $0
  i32.const 20
  i32.sub
  i32.load offset=16
  call $assembly/utils/box/Box#constructor
  i32.load
  i32.load
  drop
 )
 (func $assembly/index/test_seekGreater
  (local $0 i32)
  (local $1 i32)
  i32.const 1
  global.set $~argumentsLength
  i32.const 16880
  i32.const 0
  call $~lib/string/String.UTF8.encode@varargs
  local.set $0
  i32.const 1
  global.set $~argumentsLength
  local.get $0
  i32.const 16912
  i32.const 0
  call $~lib/string/String.UTF8.encode@varargs
  call $assembly/indexer/tables/IndexPointer#select
  drop
  i32.const 1
  global.set $~argumentsLength
  i32.const 16880
  i32.const 0
  call $~lib/string/String.UTF8.encode@varargs
  local.set $0
  i32.const 1
  global.set $~argumentsLength
  local.get $0
  i32.const 16912
  i32.const 0
  call $~lib/string/String.UTF8.encode@varargs
  call $assembly/indexer/tables/IndexPointer#select
  local.set $1
  i32.const 4
  i32.const 46
  call $~lib/rt/stub/__new
  local.tee $0
  i32.const 0
  i32.store
  local.get $0
  local.get $1
  i32.store
  i32.const 1
  global.set $~argumentsLength
  local.get $0
  i64.const 3
  i32.const 16704
  i32.const 0
  call $~lib/string/String.UTF8.encode@varargs
  call $assembly/indexer/bst/BST<u64>#set
  i32.const 1
  global.set $~argumentsLength
  local.get $0
  i64.const 4
  i32.const 16992
  i32.const 0
  call $~lib/string/String.UTF8.encode@varargs
  call $assembly/indexer/bst/BST<u64>#set
  i32.const 1
  global.set $~argumentsLength
  local.get $0
  i64.const 196608
  i32.const 16960
  i32.const 0
  call $~lib/string/String.UTF8.encode@varargs
  call $assembly/indexer/bst/BST<u64>#set
  i32.const 1
  global.set $~argumentsLength
  local.get $0
  i64.const 196612
  i32.const 16960
  i32.const 0
  call $~lib/string/String.UTF8.encode@varargs
  call $assembly/indexer/bst/BST<u64>#set
  local.get $0
  i64.const 0
  call $assembly/indexer/bst/BST<u64>#seekGreater
  i32.const 10
  call $~lib/util/number/utoa64
  local.set $0
  i32.const 2
  global.set $~argumentsLength
  local.get $0
  i32.const 1
  call $~lib/string/String.UTF8.encode@varargs
  call $assembly/utils/logging/__log
  call $assembly/indexer/index/_flush
 )
 (func $assembly/indexer/bst/maskLowerThan (param $0 i32) (param $1 i32)
  (local $2 i64)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  call $~lib/array/Array<u64>#constructor
  local.tee $3
  i32.const 0
  local.get $0
  i64.load
  local.tee $2
  i64.const 8
  i64.shr_u
  i64.const 71777214294589695
  i64.and
  local.get $2
  i64.const 71777214294589695
  i64.and
  i64.const 8
  i64.shl
  i64.or
  local.tee $2
  i64.const 16
  i64.shr_u
  i64.const 281470681808895
  i64.and
  local.get $2
  i64.const 281470681808895
  i64.and
  i64.const 16
  i64.shl
  i64.or
  i64.const 32
  i64.rotr
  call $~lib/array/Array<u64>#__set
  local.get $3
  i32.const 1
  local.get $0
  i64.load offset=8
  local.tee $2
  i64.const 8
  i64.shr_u
  i64.const 71777214294589695
  i64.and
  local.get $2
  i64.const 71777214294589695
  i64.and
  i64.const 8
  i64.shl
  i64.or
  local.tee $2
  i64.const 16
  i64.shr_u
  i64.const 281470681808895
  i64.and
  local.get $2
  i64.const 281470681808895
  i64.and
  i64.const 16
  i64.shl
  i64.or
  i64.const 32
  i64.rotr
  call $~lib/array/Array<u64>#__set
  local.get $3
  i32.const 2
  local.get $0
  i64.load offset=16
  local.tee $2
  i64.const 8
  i64.shr_u
  i64.const 71777214294589695
  i64.and
  local.get $2
  i64.const 71777214294589695
  i64.and
  i64.const 8
  i64.shl
  i64.or
  local.tee $2
  i64.const 16
  i64.shr_u
  i64.const 281470681808895
  i64.and
  local.get $2
  i64.const 281470681808895
  i64.and
  i64.const 16
  i64.shl
  i64.or
  i64.const 32
  i64.rotr
  call $~lib/array/Array<u64>#__set
  local.get $3
  i32.const 3
  local.get $0
  i64.load offset=24
  local.tee $2
  i64.const 8
  i64.shr_u
  i64.const 71777214294589695
  i64.and
  local.get $2
  i64.const 71777214294589695
  i64.and
  i64.const 8
  i64.shl
  i64.or
  local.tee $2
  i64.const 16
  i64.shr_u
  i64.const 281470681808895
  i64.and
  local.get $2
  i64.const 281470681808895
  i64.and
  i64.const 16
  i64.shl
  i64.or
  i64.const 32
  i64.rotr
  call $~lib/array/Array<u64>#__set
  local.get $3
  local.get $1
  i32.const 255
  i32.and
  local.tee $1
  i32.const 6
  i32.shr_u
  local.tee $5
  local.get $3
  local.get $5
  call $~lib/array/Array<u64>#__get
  i64.const 1
  local.get $1
  i32.const 63
  i32.and
  i64.extend_i32_u
  local.tee $2
  i64.shl
  i64.const 1
  i64.sub
  i64.const 64
  local.get $2
  i64.sub
  i64.shl
  i64.and
  call $~lib/array/Array<u64>#__set
  local.get $5
  i32.const 1
  i32.add
  local.set $1
  loop $for-loop|0
   local.get $1
   i32.const 255
   i32.and
   local.tee $5
   i32.const 4
   i32.lt_u
   if
    local.get $3
    local.get $5
    i64.const 0
    call $~lib/array/Array<u64>#__set
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|0
   end
  end
  loop $for-loop|1
   local.get $4
   i32.const 4
   i32.lt_s
   if
    local.get $0
    local.get $4
    i32.const 3
    i32.shl
    i32.add
    local.get $3
    local.get $4
    call $~lib/array/Array<u64>#__get
    local.tee $2
    i64.const 8
    i64.shr_u
    i64.const 71777214294589695
    i64.and
    local.get $2
    i64.const 71777214294589695
    i64.and
    i64.const 8
    i64.shl
    i64.or
    local.tee $2
    i64.const 16
    i64.shr_u
    i64.const 281470681808895
    i64.and
    local.get $2
    i64.const 281470681808895
    i64.and
    i64.const 16
    i64.shl
    i64.or
    i64.const 32
    i64.rotr
    i64.store
    local.get $4
    i32.const 1
    i32.add
    local.set $4
    br $for-loop|1
   end
  end
 )
 (func $assembly/index/test_maskLowerThan
  (local $0 i32)
  i32.const 32
  call $~lib/arraybuffer/ArrayBuffer#constructor
  local.tee $0
  i64.const -1
  i64.store
  local.get $0
  i64.const -1
  i64.store offset=8
  local.get $0
  i64.const -1
  i64.store offset=16
  local.get $0
  i64.const -1
  i64.store offset=24
  local.get $0
  i32.const 255
  call $assembly/indexer/bst/maskLowerThan
  local.get $0
  i32.const 190
  call $assembly/indexer/bst/maskLowerThan
  local.get $0
  i32.const 100
  call $assembly/indexer/bst/maskLowerThan
  local.get $0
  i32.const 32
  call $assembly/indexer/bst/maskLowerThan
 )
 (func $assembly/index/test_maskGreaterThan
  (local $0 i32)
  i32.const 32
  call $~lib/arraybuffer/ArrayBuffer#constructor
  local.tee $0
  local.get $0
  i32.load8_u
  i32.const 128
  i32.or
  i32.store8
  local.get $0
  local.get $0
  i32.load8_u
  i32.const 16
  i32.or
  i32.store8
  local.get $0
  i32.const 3
  call $assembly/indexer/bst/maskGreaterThan
 )
 (func $assembly/index/test_maskLowerThan2
  (local $0 i32)
  i32.const 32
  call $~lib/arraybuffer/ArrayBuffer#constructor
  local.tee $0
  local.get $0
  i32.load8_u
  i32.const 16
  i32.or
  i32.store8
  local.get $0
  local.get $0
  i32.load8_u
  i32.const 128
  i32.or
  i32.store8
  local.get $0
  i32.const 4
  call $assembly/indexer/bst/maskLowerThan
 )
 (func $assembly/index/test_binarySearch
  i32.const 32
  call $~lib/arraybuffer/ArrayBuffer#constructor
  i32.const 1
  i32.store8 offset=9
 )
 (func $assembly/index/test_binarySearch2
  (local $0 i32)
  i32.const 32
  call $~lib/arraybuffer/ArrayBuffer#constructor
  local.tee $0
  local.get $0
  i32.load8_u
  i32.const 128
  i32.or
  i32.store8
  local.get $0
  local.get $0
  i32.load8_u
  i32.const 16
  i32.or
  i32.store8
 )
 (func $assembly/index/test_binarySearch3
  (local $0 i32)
  i32.const 32
  call $~lib/arraybuffer/ArrayBuffer#constructor
  local.tee $0
  local.get $0
  i32.load8_u
  i32.const 128
  i32.or
  i32.store8
  local.get $0
  local.get $0
  i32.load8_u
  i32.const 32
  i32.or
  i32.store8
 )
 (func $assembly/index/test_inscription
  (local $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  call $assembly/indexer/index/__host_len
  call $~lib/arraybuffer/ArrayBuffer#constructor
  local.tee $0
  call $assembly/indexer/index/__load_input
  local.get $0
  local.get $0
  i32.const 20
  i32.sub
  i32.load offset=16
  call $assembly/utils/box/Box#constructor
  local.tee $0
  i32.load
  local.tee $1
  i32.load
  drop
  local.get $0
  local.get $1
  i32.const 4
  i32.add
  i32.store
  local.get $0
  local.get $0
  i32.load offset=4
  i32.const 4
  i32.sub
  i32.store offset=4
  local.get $0
  call $assembly/blockdata/block/Block#constructor
  local.set $4
  loop $for-loop|0
   local.get $2
   local.get $4
   i32.load offset=8
   local.tee $0
   i32.load offset=12
   i32.lt_s
   if
    local.get $0
    local.get $2
    call $~lib/array/Array<assembly/blockdata/transaction/Input>#__get
    local.set $5
    i32.const 0
    local.set $1
    loop $for-loop|1
     local.get $1
     local.get $5
     i32.load offset=12
     local.tee $0
     i32.load offset=12
     i32.lt_s
     if
      local.get $0
      local.get $1
      call $~lib/array/Array<assembly/blockdata/transaction/Input>#__get
      call $assembly/blockdata/transaction/Input#inscription
      local.tee $3
      if
       i32.const 17120
       local.get $2
       call $~lib/util/number/itoa32
       call $~lib/string/String.__concat
       i32.const 17184
       call $~lib/string/String.__concat
       local.get $1
       call $~lib/util/number/itoa32
       call $~lib/string/String.__concat
       local.set $0
       i32.const 2
       global.set $~argumentsLength
       local.get $0
       i32.const 1
       call $~lib/string/String.UTF8.encode@varargs
       call $assembly/utils/logging/__log
       local.get $3
       i32.load
       local.tee $0
       i32.load offset=4
       call $~lib/arraybuffer/ArrayBuffer#constructor
       local.tee $6
       local.get $0
       i32.load
       local.get $0
       i32.load offset=4
       memory.copy
       local.get $6
       call $assembly/index/logArrayBuffer
       block $__inlined_func$assembly/blockdata/inscription/Inscription#field$1006 (result i32)
        i32.const 0
        local.set $0
        loop $for-loop|00
         local.get $0
         local.get $3
         i32.load offset=4
         local.tee $6
         i32.load offset=12
         i32.lt_s
         if
          local.get $6
          local.get $0
          call $~lib/array/Array<assembly/blockdata/transaction/Input>#__get
          i32.load
          i32.eqz
          if
           local.get $3
           i32.load offset=4
           local.get $0
           call $~lib/array/Array<assembly/blockdata/transaction/Input>#__get
           i32.load offset=4
           br $__inlined_func$assembly/blockdata/inscription/Inscription#field$1006
          end
          local.get $0
          i32.const 1
          i32.add
          local.set $0
          br $for-loop|00
         end
        end
        i32.const 0
       end
       local.tee $0
       if
        i32.const 2
        global.set $~argumentsLength
        i32.const 17232
        i32.const 1
        call $~lib/string/String.UTF8.encode@varargs
        call $assembly/utils/logging/__log
        local.get $0
        call $assembly/index/logArrayBuffer
       end
      end
      local.get $1
      i32.const 1
      i32.add
      local.set $1
      br $for-loop|1
     end
    end
    local.get $2
    i32.const 1
    i32.add
    local.set $2
    br $for-loop|0
   end
  end
 )
 (func $~lib/util/string/strtol<f64> (param $0 i32) (result f64)
  (local $1 i32)
  (local $2 i32)
  (local $3 f64)
  (local $4 f64)
  (local $5 i32)
  (local $6 i32)
  local.get $0
  i32.const 20
  i32.sub
  i32.load offset=16
  i32.const 1
  i32.shr_u
  local.tee $1
  i32.eqz
  if
   f64.const nan:0x8000000000000
   return
  end
  local.get $0
  local.tee $2
  i32.load16_u
  local.set $0
  loop $while-continue|0
   block $__inlined_func$~lib/util/string/isSpace$686 (result i32)
    local.get $0
    i32.const 128
    i32.or
    i32.const 160
    i32.eq
    local.get $0
    i32.const 9
    i32.sub
    i32.const 4
    i32.le_u
    i32.or
    local.get $0
    i32.const 5760
    i32.lt_u
    br_if $__inlined_func$~lib/util/string/isSpace$686
    drop
    i32.const 1
    local.get $0
    i32.const -8192
    i32.add
    i32.const 10
    i32.le_u
    br_if $__inlined_func$~lib/util/string/isSpace$686
    drop
    block $break|0
     block $case6|0
      local.get $0
      i32.const 5760
      i32.eq
      br_if $case6|0
      local.get $0
      i32.const 8232
      i32.eq
      br_if $case6|0
      local.get $0
      i32.const 8233
      i32.eq
      br_if $case6|0
      local.get $0
      i32.const 8239
      i32.eq
      br_if $case6|0
      local.get $0
      i32.const 8287
      i32.eq
      br_if $case6|0
      local.get $0
      i32.const 12288
      i32.eq
      br_if $case6|0
      local.get $0
      i32.const 65279
      i32.eq
      br_if $case6|0
      br $break|0
     end
     i32.const 1
     br $__inlined_func$~lib/util/string/isSpace$686
    end
    i32.const 0
   end
   if
    local.get $2
    i32.const 2
    i32.add
    local.tee $2
    i32.load16_u
    local.set $0
    local.get $1
    i32.const 1
    i32.sub
    local.set $1
    br $while-continue|0
   end
  end
  f64.const 1
  local.set $3
  local.get $0
  i32.const 43
  i32.eq
  local.get $0
  i32.const 45
  i32.eq
  i32.or
  if (result i32)
   local.get $1
   i32.const 1
   i32.sub
   local.tee $1
   i32.eqz
   if
    f64.const nan:0x8000000000000
    return
   end
   f64.const -1
   f64.const 1
   local.get $0
   i32.const 45
   i32.eq
   select
   local.set $3
   local.get $2
   i32.const 2
   i32.add
   local.tee $2
   i32.load16_u
  else
   local.get $0
  end
  i32.const 48
  i32.eq
  local.get $1
  i32.const 2
  i32.gt_s
  i32.and
  if (result i32)
   local.get $2
   i32.load16_u offset=2
   i32.const 32
   i32.or
   i32.const 120
   i32.eq
  else
   i32.const 0
  end
  if
   local.get $2
   i32.const 4
   i32.add
   local.set $2
   local.get $1
   i32.const 2
   i32.sub
   local.set $1
  end
  local.get $1
  i32.const 1
  i32.sub
  local.set $5
  loop $while-continue|2
   local.get $1
   local.tee $0
   i32.const 1
   i32.sub
   local.set $1
   local.get $0
   if
    block $while-break|2
     local.get $2
     i32.load16_u
     local.tee $6
     i32.const 48
     i32.sub
     local.tee $0
     i32.const 10
     i32.ge_u
     if
      local.get $6
      i32.const 65
      i32.sub
      i32.const 25
      i32.le_u
      if (result i32)
       local.get $6
       i32.const 55
       i32.sub
      else
       local.get $6
       i32.const 87
       i32.sub
       local.get $6
       local.get $6
       i32.const 97
       i32.sub
       i32.const 25
       i32.le_u
       select
      end
      local.set $0
     end
     local.get $0
     i32.const 16
     i32.ge_u
     if
      local.get $1
      local.get $5
      i32.eq
      if
       f64.const nan:0x8000000000000
       return
      end
      br $while-break|2
     end
     local.get $4
     f64.const 16
     f64.mul
     local.get $0
     f64.convert_i32_u
     f64.add
     local.set $4
     local.get $2
     i32.const 2
     i32.add
     local.set $2
     br $while-continue|2
    end
   end
  end
  local.get $3
  local.get $4
  f64.mul
 )
 (func $assembly/index/decodeHex (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  local.get $0
  i32.const 20
  i32.sub
  i32.load offset=16
  i32.const 2
  i32.shr_u
  call $~lib/arraybuffer/ArrayBuffer#constructor
  local.set $4
  loop $for-loop|0
   local.get $2
   local.get $0
   i32.const 20
   i32.sub
   i32.load offset=16
   i32.const 1
   i32.shr_u
   local.tee $3
   i32.lt_s
   if
    local.get $4
    local.get $2
    i32.const 2
    i32.div_s
    i32.add
    local.set $5
    local.get $2
    i32.const 0
    local.get $2
    i32.const 0
    i32.gt_s
    select
    local.tee $1
    local.get $3
    local.get $1
    local.get $3
    i32.lt_s
    select
    local.tee $6
    local.get $2
    i32.const 2
    i32.add
    local.tee $1
    i32.const 0
    local.get $1
    i32.const 0
    i32.gt_s
    select
    local.tee $1
    local.get $3
    local.get $1
    local.get $3
    i32.lt_s
    select
    local.tee $7
    local.get $6
    local.get $7
    i32.lt_s
    select
    i32.const 1
    i32.shl
    local.set $8
    i32.const 5392
    local.set $1
    block $__inlined_func$~lib/string/String#substring$687
     local.get $6
     local.get $7
     local.get $6
     local.get $7
     i32.gt_s
     select
     i32.const 1
     i32.shl
     local.tee $7
     local.get $8
     i32.sub
     local.tee $6
     i32.eqz
     br_if $__inlined_func$~lib/string/String#substring$687
     local.get $0
     local.set $1
     local.get $8
     i32.eqz
     local.get $7
     local.get $3
     i32.const 1
     i32.shl
     i32.eq
     i32.and
     br_if $__inlined_func$~lib/string/String#substring$687
     local.get $6
     i32.const 2
     call $~lib/rt/stub/__new
     local.tee $1
     local.get $0
     local.get $8
     i32.add
     local.get $6
     memory.copy
    end
    local.get $5
    local.get $1
    call $~lib/util/string/strtol<f64>
    i32.trunc_sat_f64_u
    i32.store8
    local.get $2
    i32.const 2
    i32.add
    local.set $2
    br $for-loop|0
   end
  end
  local.get $4
 )
 (func $assembly/index/test_indexBrc20
  (local $0 i32)
  i32.const 0
  i32.const 17296
  call $assembly/index/decodeHex
  local.tee $0
  local.get $0
  i32.const 20
  i32.sub
  i32.load offset=16
  call $assembly/utils/box/Box#constructor
  call $assembly/blockdata/transaction/Transaction#constructor
  i32.load offset=12
  i32.const 0
  call $~lib/array/Array<assembly/blockdata/transaction/Input>#__get
  call $assembly/blockdata/transaction/Input#inscription
  i32.eqz
  if
   i32.const 18512
   i32.const 18640
   i32.const 271
   i32.const 3
   call $~lib/builtins/abort
   unreachable
  end
 )
 (func $assembly/index/test_txid
  (local $0 i32)
  i32.const 0
  i32.const 18704
  call $assembly/index/decodeHex
  local.tee $0
  local.get $0
  i32.const 20
  i32.sub
  i32.load offset=16
  call $assembly/utils/box/Box#constructor
  call $assembly/blockdata/transaction/Transaction#constructor
  drop
 )
 (func $assembly/index/test_complement
  (local $0 i32)
  i32.const 255
  i32.const 10
  call $~lib/util/number/utoa32
  local.set $0
  i32.const 2
  global.set $~argumentsLength
  local.get $0
  i32.const 1
  call $~lib/string/String.UTF8.encode@varargs
  call $assembly/utils/logging/__log
 )
 (func $~start
  (local $0 i32)
  i32.const 36156
  global.set $~lib/rt/stub/offset
  i32.const 0
  i32.const 5
  call $~lib/rt/stub/__new
  local.tee $0
  if (result i32)
   local.get $0
  else
   i32.const 0
   i32.const 0
   call $~lib/rt/stub/__new
  end
  drop
  call $"~lib/map/Map<~lib/string/String,~lib/arraybuffer/ArrayBuffer>#constructor"
  global.set $assembly/indexer/index/_updates
  call $"~lib/map/Map<~lib/string/String,~lib/arraybuffer/ArrayBuffer>#constructor"
  global.set $assembly/indexer/index/_updateKeys
  i32.const 0
  i32.const 8
  call $~lib/rt/stub/__new
  local.tee $0
  if (result i32)
   local.get $0
  else
   i32.const 0
   i32.const 0
   call $~lib/rt/stub/__new
  end
  drop
  i32.const 1
  global.set $~argumentsLength
  i32.const 2768
  i32.const 0
  call $~lib/string/String.UTF8.encode@varargs
  global.set $assembly/utils/b32/ONE
  i32.const 3260
  i32.load
  i32.eqz
  if
   i32.const 3344
   i32.const 3408
   i32.const 78
   i32.const 41
   call $~lib/builtins/abort
   unreachable
  end
  i32.const 3264
  i32.load8_u
  drop
 )
)
